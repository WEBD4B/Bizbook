{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Comprehensive SaaS Finance Platform\n\n## Overview\n\nThis is a comprehensive SaaS financial management platform that serves both personal users and business owners. The application features personal finance tracking, business expense management, tax document generation, sales tax tracking with Shopify integration, and QuickBooks-style financial reporting. It uses PostgreSQL for persistence, Drizzle ORM for database operations, and modern React with TypeScript.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 2025)\n- **Major Scope Expansion**: Transformed from personal finance tracker to comprehensive SaaS platform\n- **Business Features**: Added business expense tracking, revenue management, and payout tracking\n- **Tax Management**: Implemented sales tax tracking, tax document generation, and Shopify integration\n- **Enhanced Dashboard**: Full-width layout with comprehensive financial metrics including available cash, available credit, and total liquidity\n- **Modern Architecture**: Maintained TypeScript-first approach with shadcn/ui components\n\n## System Architecture\n\n### Full-Stack TypeScript Architecture\nThe application follows a monorepo structure with shared types and schemas between frontend and backend:\n- **Frontend**: React with Vite build system\n- **Backend**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **UI Framework**: shadcn/ui components with Tailwind CSS\n- **State Management**: TanStack Query for server state\n\n### Directory Structure\n```\n├── client/          # React frontend application\n├── server/          # Express backend API\n├── shared/          # Shared schemas and types\n├── migrations/      # Database migration files\n└── dist/           # Production build output\n```\n\n## Key Components\n\n### Backend Architecture\n- **Express Server** (`server/index.ts`): Main application server with middleware setup\n- **Route Handler** (`server/routes.ts`): RESTful API endpoints for credit cards and loans\n- **Storage Layer** (`server/storage.ts`): Abstract storage interface with in-memory implementation\n- **Development Server** (`server/vite.ts`): Vite integration for development mode\n\n### Frontend Architecture\n- **React SPA**: Single-page application with client-side routing using wouter\n- **Component Library**: shadcn/ui components for consistent UI\n- **State Management**: TanStack Query for API state management\n- **Responsive Design**: Mobile-first approach with desktop sidebar navigation\n\n### Database Schema\nThe application uses Drizzle ORM with PostgreSQL dialect:\n- **Credit Cards Table**: Tracks balance, credit limit, interest rate, minimum payment, and due dates\n- **Loans Table**: Manages loan balances, terms, interest rates, and payment schedules\n- **Users Table**: Prepared for future authentication implementation\n\n### Shared Type System\n- **Schema Definitions** (`shared/schema.ts`): Drizzle table definitions with Zod validation\n- **Type Safety**: Full TypeScript coverage from database to frontend\n- **Validation**: Runtime validation using Zod schemas\n\n## Data Flow\n\n### API Communication\n1. **Frontend** makes HTTP requests to `/api` endpoints\n2. **Backend** validates requests using Zod schemas\n3. **Storage Layer** handles data persistence (currently in-memory)\n4. **Response** returns JSON data with proper error handling\n\n### State Management\n1. **TanStack Query** manages server state and caching\n2. **React Hook Form** handles form state and validation\n3. **Optimistic Updates** provide responsive user experience\n4. **Error Boundaries** catch and display user-friendly errors\n\n### Financial Calculations\n- **Payoff Calculations**: Client-side calculations for debt payoff scenarios\n- **Debt Visualization**: Pie charts showing debt distribution\n- **Credit Utilization**: Real-time calculation of credit card usage\n\n## External Dependencies\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **Recharts**: Data visualization components\n\n### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n\n### Database and Validation\n- **Drizzle ORM**: Type-safe database toolkit\n- **Neon Database**: Serverless PostgreSQL\n- **Zod**: Runtime type validation\n- **Connect PG Simple**: PostgreSQL session store\n\n## Deployment Strategy\n\n### Build Process\n1. **Frontend Build**: Vite builds React app to `dist/public`\n2. **Backend Build**: ESBuild bundles server code to `dist/index.js`\n3. **Database**: Drizzle migrations run via `npm run db:push`\n\n### Environment Configuration\n- **Development**: Uses Vite dev server with HMR\n- **Production**: Serves static files from Express server\n- **Database**: Requires `DATABASE_URL` environment variable\n\n### Development Workflow\n- **Hot Reload**: Frontend changes reflect immediately\n- **API Logging**: Request/response logging for debugging\n- **Type Checking**: Continuous TypeScript validation\n- **Error Overlay**: Runtime error display in development\n\nThe architecture prioritizes type safety, developer experience, and scalability while maintaining a clean separation between frontend, backend, and data layers. The in-memory storage can be easily replaced with a full database implementation when needed.","size_bytes":5473},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertCreditCardSchema, \n  insertLoanSchema, \n  insertMonthlyPaymentSchema,\n  insertIncomeSchema,\n  insertPaymentSchema,\n  insertExpenseSchema,\n  insertSavingsGoalSchema,\n  insertBudgetSchema,\n  insertInvestmentSchema,\n  insertAssetSchema,\n  insertLiabilitySchema,\n  insertNetWorthSnapshotSchema,\n  insertBusinessRevenueSchema,\n  insertBusinessExpenseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Credit Cards routes\n  app.get(\"/api/credit-cards\", async (req, res) => {\n    try {\n      const creditCards = await storage.getCreditCards();\n      res.json(creditCards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch credit cards\" });\n    }\n  });\n\n  app.get(\"/api/credit-cards/:id\", async (req, res) => {\n    try {\n      const creditCard = await storage.getCreditCard(req.params.id);\n      if (!creditCard) {\n        return res.status(404).json({ message: \"Credit card not found\" });\n      }\n      res.json(creditCard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch credit card\" });\n    }\n  });\n\n  app.post(\"/api/credit-cards\", async (req, res) => {\n    try {\n      const validatedData = insertCreditCardSchema.parse(req.body);\n      const creditCard = await storage.createCreditCard(validatedData);\n      res.status(201).json(creditCard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create credit card\" });\n    }\n  });\n\n  app.patch(\"/api/credit-cards/:id\", async (req, res) => {\n    try {\n      const partialData = insertCreditCardSchema.partial().parse(req.body);\n      const creditCard = await storage.updateCreditCard(req.params.id, partialData);\n      if (!creditCard) {\n        return res.status(404).json({ message: \"Credit card not found\" });\n      }\n      res.json(creditCard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update credit card\" });\n    }\n  });\n\n  app.delete(\"/api/credit-cards/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCreditCard(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Credit card not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete credit card\" });\n    }\n  });\n\n  // Loans routes\n  app.get(\"/api/loans\", async (req, res) => {\n    try {\n      const loans = await storage.getLoans();\n      res.json(loans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const loan = await storage.getLoan(req.params.id);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch loan\" });\n    }\n  });\n\n  app.post(\"/api/loans\", async (req, res) => {\n    try {\n      const validatedData = insertLoanSchema.parse(req.body);\n      const loan = await storage.createLoan(validatedData);\n      res.status(201).json(loan);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create loan\" });\n    }\n  });\n\n  app.patch(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const partialData = insertLoanSchema.partial().parse(req.body);\n      const loan = await storage.updateLoan(req.params.id, partialData);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update loan\" });\n    }\n  });\n\n  app.delete(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteLoan(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete loan\" });\n    }\n  });\n\n  // Monthly Payments routes\n  app.get(\"/api/monthly-payments\", async (req, res) => {\n    try {\n      const monthlyPayments = await storage.getMonthlyPayments();\n      res.json(monthlyPayments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch monthly payments\" });\n    }\n  });\n\n  app.post(\"/api/monthly-payments\", async (req, res) => {\n    try {\n      const validatedData = insertMonthlyPaymentSchema.parse(req.body);\n      const monthlyPayment = await storage.createMonthlyPayment(validatedData);\n      res.status(201).json(monthlyPayment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create monthly payment\" });\n    }\n  });\n\n  app.patch(\"/api/monthly-payments/:id\", async (req, res) => {\n    try {\n      const partialData = insertMonthlyPaymentSchema.partial().parse(req.body);\n      const monthlyPayment = await storage.updateMonthlyPayment(req.params.id, partialData);\n      if (!monthlyPayment) {\n        return res.status(404).json({ message: \"Monthly payment not found\" });\n      }\n      res.json(monthlyPayment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update monthly payment\" });\n    }\n  });\n\n  app.delete(\"/api/monthly-payments/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteMonthlyPayment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Monthly payment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete monthly payment\" });\n    }\n  });\n\n  // Income routes\n  app.get(\"/api/income\", async (req, res) => {\n    try {\n      const incomes = await storage.getIncomes();\n      res.json(incomes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch income\" });\n    }\n  });\n\n  app.post(\"/api/income\", async (req, res) => {\n    try {\n      const validatedData = insertIncomeSchema.parse(req.body);\n      const income = await storage.createIncome(validatedData);\n      res.status(201).json(income);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create income\" });\n    }\n  });\n\n  app.patch(\"/api/income/:id\", async (req, res) => {\n    try {\n      const partialData = insertIncomeSchema.partial().parse(req.body);\n      const income = await storage.updateIncome(req.params.id, partialData);\n      if (!income) {\n        return res.status(404).json({ message: \"Income not found\" });\n      }\n      res.json(income);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update income\" });\n    }\n  });\n\n  app.delete(\"/api/income/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteIncome(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Income not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete income\" });\n    }\n  });\n\n  // Payments routes\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const { accountId, accountType } = req.query;\n      if (accountId && accountType) {\n        const payments = await storage.getPaymentsByAccount(accountId as string, accountType as string);\n        res.json(payments);\n      } else {\n        const payments = await storage.getPayments();\n        res.json(payments);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (startDate && endDate) {\n        const expenses = await storage.getExpensesByDateRange(startDate as string, endDate as string);\n        res.json(expenses);\n      } else {\n        const expenses = await storage.getExpenses();\n        res.json(expenses);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.get(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const expense = await storage.getExpense(req.params.id);\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expense\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const validatedData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(validatedData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  app.patch(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const validatedData = insertExpenseSchema.partial().parse(req.body);\n      const expense = await storage.updateExpense(req.params.id, validatedData);\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update expense\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteExpense(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  // Financial calculations endpoint\n  app.post(\"/api/calculate-payoff\", async (req, res) => {\n    try {\n      const { balance, interestRate, monthlyPayment, extraPayment = 0 } = req.body;\n      \n      if (!balance || !interestRate || !monthlyPayment) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const monthlyRate = parseFloat(interestRate) / 100 / 12;\n      const totalPayment = parseFloat(monthlyPayment) + parseFloat(extraPayment);\n      let remainingBalance = parseFloat(balance);\n      let months = 0;\n      let totalInterest = 0;\n\n      while (remainingBalance > 0 && months < 1200) { // Max 100 years to prevent infinite loop\n        const interestPayment = remainingBalance * monthlyRate;\n        const principalPayment = Math.min(totalPayment - interestPayment, remainingBalance);\n        \n        remainingBalance -= principalPayment;\n        totalInterest += interestPayment;\n        months++;\n\n        if (principalPayment <= 0) break; // Prevent infinite loop if payment too small\n      }\n\n      res.json({\n        months,\n        totalInterest: totalInterest.toFixed(2),\n        payoffDate: new Date(Date.now() + months * 30 * 24 * 60 * 60 * 1000).toISOString(),\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate payoff\" });\n    }\n  });\n\n  // Savings Goals routes\n  app.get(\"/api/savings-goals\", async (req, res) => {\n    try {\n      const goals = await storage.getSavingsGoals();\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch savings goals\" });\n    }\n  });\n\n  app.post(\"/api/savings-goals\", async (req, res) => {\n    try {\n      const validatedData = insertSavingsGoalSchema.parse(req.body);\n      const goal = await storage.createSavingsGoal(validatedData);\n      res.status(201).json(goal);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid savings goal data\" });\n    }\n  });\n\n  app.put(\"/api/savings-goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const goal = await storage.updateSavingsGoal(id, req.body);\n      if (!goal) {\n        return res.status(404).json({ error: \"Savings goal not found\" });\n      }\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update savings goal\" });\n    }\n  });\n\n  app.delete(\"/api/savings-goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteSavingsGoal(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Savings goal not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete savings goal\" });\n    }\n  });\n\n  // Budget routes\n  app.get(\"/api/budgets\", async (req, res) => {\n    try {\n      const budgets = await storage.getBudgets();\n      res.json(budgets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch budgets\" });\n    }\n  });\n\n  app.post(\"/api/budgets\", async (req, res) => {\n    try {\n      const validatedData = insertBudgetSchema.parse(req.body);\n      const budget = await storage.createBudget(validatedData);\n      res.status(201).json(budget);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid budget data\" });\n    }\n  });\n\n  app.put(\"/api/budgets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const budget = await storage.updateBudget(id, req.body);\n      if (!budget) {\n        return res.status(404).json({ error: \"Budget not found\" });\n      }\n      res.json(budget);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update budget\" });\n    }\n  });\n\n  app.delete(\"/api/budgets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteBudget(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Budget not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete budget\" });\n    }\n  });\n\n  // Investment routes\n  app.get(\"/api/investments\", async (req, res) => {\n    try {\n      const investments = await storage.getInvestments();\n      res.json(investments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch investments\" });\n    }\n  });\n\n  app.post(\"/api/investments\", async (req, res) => {\n    try {\n      const validatedData = insertInvestmentSchema.parse(req.body);\n      const investment = await storage.createInvestment(validatedData);\n      res.status(201).json(investment);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid investment data\" });\n    }\n  });\n\n  app.put(\"/api/investments/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const investment = await storage.updateInvestment(id, req.body);\n      if (!investment) {\n        return res.status(404).json({ error: \"Investment not found\" });\n      }\n      res.json(investment);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update investment\" });\n    }\n  });\n\n  app.delete(\"/api/investments/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteInvestment(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Investment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete investment\" });\n    }\n  });\n\n  // Asset routes\n  app.get(\"/api/assets\", async (req, res) => {\n    try {\n      const assets = await storage.getAssets();\n      res.json(assets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.post(\"/api/assets\", async (req, res) => {\n    try {\n      const validatedData = insertAssetSchema.parse(req.body);\n      const asset = await storage.createAsset(validatedData);\n      res.status(201).json(asset);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid asset data\" });\n    }\n  });\n\n  app.put(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const asset = await storage.updateAsset(id, req.body);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.json(asset);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteAsset(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete asset\" });\n    }\n  });\n\n  // Liability routes\n  app.get(\"/api/liabilities\", async (req, res) => {\n    try {\n      const liabilities = await storage.getLiabilities();\n      res.json(liabilities);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch liabilities\" });\n    }\n  });\n\n  app.post(\"/api/liabilities\", async (req, res) => {\n    try {\n      const validatedData = insertLiabilitySchema.parse(req.body);\n      const liability = await storage.createLiability(validatedData);\n      res.status(201).json(liability);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(400).json({ error: \"Invalid liability data\" });\n    }\n  });\n\n  app.put(\"/api/liabilities/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const liability = await storage.updateLiability(id, req.body);\n      if (!liability) {\n        return res.status(404).json({ error: \"Liability not found\" });\n      }\n      res.json(liability);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update liability\" });\n    }\n  });\n\n  app.delete(\"/api/liabilities/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteLiability(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Liability not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete liability\" });\n    }\n  });\n\n  // Net Worth Snapshot routes\n  app.get(\"/api/net-worth-snapshots\", async (req, res) => {\n    try {\n      const snapshots = await storage.getNetWorthSnapshots();\n      res.json(snapshots);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch net worth snapshots\" });\n    }\n  });\n\n  app.get(\"/api/net-worth-snapshots/latest\", async (req, res) => {\n    try {\n      const snapshot = await storage.getLatestNetWorthSnapshot();\n      if (!snapshot) {\n        return res.status(404).json({ error: \"No net worth snapshots found\" });\n      }\n      res.json(snapshot);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch latest net worth snapshot\" });\n    }\n  });\n\n  app.post(\"/api/net-worth-snapshots\", async (req, res) => {\n    try {\n      const validatedData = insertNetWorthSnapshotSchema.parse(req.body);\n      const snapshot = await storage.createNetWorthSnapshot(validatedData);\n      res.status(201).json(snapshot);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(400).json({ error: \"Invalid net worth snapshot data\" });\n    }\n  });\n\n  // Calculate Net Worth endpoint\n  app.post(\"/api/calculate-net-worth\", async (req, res) => {\n    try {\n      const assets = await storage.getAssets();\n      const liabilities = await storage.getLiabilities();\n\n      // Calculate total assets by category\n      const assetsByCategory = assets.reduce((acc, asset) => {\n        const value = parseFloat(asset.currentValue) || 0;\n        const adjustedValue = value * (parseFloat(asset.ownershipPercentage || \"100\") / 100);\n        \n        switch (asset.assetType) {\n          case 'cash_liquid':\n            acc.cashLiquidAssets += adjustedValue;\n            break;\n          case 'investments':\n            acc.investmentAssets += adjustedValue;\n            break;\n          case 'real_estate':\n            acc.realEstateAssets += adjustedValue;\n            break;\n          case 'vehicles':\n            acc.vehicleAssets += adjustedValue;\n            break;\n          case 'personal_property':\n            acc.personalPropertyAssets += adjustedValue;\n            break;\n          case 'business':\n            acc.businessAssets += adjustedValue;\n            break;\n        }\n        return acc;\n      }, {\n        cashLiquidAssets: 0,\n        investmentAssets: 0,\n        realEstateAssets: 0,\n        vehicleAssets: 0,\n        personalPropertyAssets: 0,\n        businessAssets: 0\n      });\n\n      // Calculate total liabilities by category\n      const liabilitiesByCategory = liabilities.reduce((acc, liability) => {\n        const balance = parseFloat(liability.currentBalance) || 0;\n        \n        switch (liability.liabilityType) {\n          case 'consumer_debt':\n            acc.consumerDebt += balance;\n            break;\n          case 'vehicle_loans':\n            acc.vehicleLoans += balance;\n            break;\n          case 'real_estate':\n            acc.realEstateDebt += balance;\n            break;\n          case 'education':\n            acc.educationDebt += balance;\n            break;\n          case 'business':\n            acc.businessDebt += balance;\n            break;\n          case 'taxes_bills':\n            acc.taxesBills += balance;\n            break;\n        }\n        return acc;\n      }, {\n        consumerDebt: 0,\n        vehicleLoans: 0,\n        realEstateDebt: 0,\n        educationDebt: 0,\n        businessDebt: 0,\n        taxesBills: 0\n      });\n\n      const totalAssets = Object.values(assetsByCategory).reduce((sum, value) => sum + value, 0);\n      const totalLiabilities = Object.values(liabilitiesByCategory).reduce((sum, value) => sum + value, 0);\n      const netWorth = totalAssets - totalLiabilities;\n      \n      // Calculate buying power: liquid assets + available credit from credit cards\n      const creditCards = await storage.getCreditCards();\n      const availableCredit = creditCards.reduce((sum, card) => {\n        const limit = parseFloat(card.creditLimit || \"0\");\n        const balance = parseFloat(card.balance || \"0\");\n        return sum + Math.max(0, limit - balance);\n      }, 0);\n      \n      const buyingPower = assetsByCategory.cashLiquidAssets + availableCredit;\n\n      const calculation = {\n        totalAssets: totalAssets.toFixed(2),\n        totalLiabilities: totalLiabilities.toFixed(2),\n        netWorth: netWorth.toFixed(2),\n        buyingPower: buyingPower.toFixed(2),\n        liquidAssets: assetsByCategory.cashLiquidAssets.toFixed(2),\n        availableCredit: availableCredit.toFixed(2),\n        ...Object.fromEntries(\n          Object.entries(assetsByCategory).map(([key, value]) => [key, value.toFixed(2)])\n        ),\n        ...Object.fromEntries(\n          Object.entries(liabilitiesByCategory).map(([key, value]) => [key, value.toFixed(2)])\n        )\n      };\n\n      res.json(calculation);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to calculate net worth\" });\n    }\n  });\n\n  // Business expense routes\n  app.get(\"/api/business-expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getBusinessExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch business expenses\" });\n    }\n  });\n\n  app.post(\"/api/business-expenses\", async (req, res) => {\n    try {\n      const expense = await storage.createBusinessExpense(req.body);\n      res.status(201).json(expense);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create business expense\" });\n    }\n  });\n\n  // Business revenue routes\n  app.get(\"/api/business-revenue\", async (req, res) => {\n    try {\n      const revenue = await storage.getBusinessRevenue();\n      res.json(revenue);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch business revenue\" });\n    }\n  });\n\n  app.post(\"/api/business-revenue\", async (req, res) => {\n    try {\n      const validatedData = insertBusinessRevenueSchema.parse(req.body);\n      const revenue = await storage.createBusinessRevenue(validatedData);\n      res.status(201).json(revenue);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create business revenue\" });\n    }\n  });\n\n  // Tax document routes\n  app.get(\"/api/tax-documents\", async (req, res) => {\n    try {\n      const documents = await storage.getTaxDocuments();\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tax documents\" });\n    }\n  });\n\n  app.post(\"/api/tax-documents\", async (req, res) => {\n    try {\n      const document = await storage.createTaxDocument(req.body);\n      res.status(201).json(document);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create tax document\" });\n    }\n  });\n\n  // Sales tax settings routes\n  app.get(\"/api/sales-tax-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSalesTaxSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales tax settings\" });\n    }\n  });\n\n  app.post(\"/api/sales-tax-settings\", async (req, res) => {\n    try {\n      const setting = await storage.createSalesTaxSetting(req.body);\n      res.status(201).json(setting);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create sales tax setting\" });\n    }\n  });\n\n  // Business info routes\n  app.get(\"/api/business-info\", async (req, res) => {\n    try {\n      const info = await storage.getBusinessInfo();\n      res.json(info);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch business info\" });\n    }\n  });\n\n  app.post(\"/api/business-info\", async (req, res) => {\n    try {\n      const info = await storage.createBusinessInfo(req.body);\n      res.status(201).json(info);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create business info\" });\n    }\n  });\n\n  // Payment methods routes\n  app.get(\"/api/payment-methods\", async (req, res) => {\n    try {\n      const methods = await storage.getPaymentMethods();\n      res.json(methods);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payment methods\" });\n    }\n  });\n\n  app.post(\"/api/payment-methods\", async (req, res) => {\n    try {\n      const method = await storage.createPaymentMethod(req.body);\n      res.status(201).json(method);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create payment method\" });\n    }\n  });\n\n  // Additional tax routes\n  app.post(\"/api/sales-tax-returns\", async (req, res) => {\n    try {\n      const returnDoc = await storage.createSalesTaxReturn(req.body);\n      res.status(201).json(returnDoc);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create sales tax return\" });\n    }\n  });\n\n  app.post(\"/api/expense-reports\", async (req, res) => {\n    try {\n      const report = await storage.createExpenseReport(req.body);\n      res.status(201).json(report);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create expense report\" });\n    }\n  });\n\n  app.post(\"/api/schedule-c\", async (req, res) => {\n    try {\n      const scheduleC = await storage.createScheduleC(req.body);\n      res.status(201).json(scheduleC);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create Schedule C\" });\n    }\n  });\n\n  app.post(\"/api/shopify-integration\", async (req, res) => {\n    try {\n      const integration = await storage.createShopifyIntegration(req.body);\n      res.status(201).json(integration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to connect Shopify store\" });\n    }\n  });\n\n  // CSV import route with multer support\n  app.post(\"/api/shopify-csv-import\", async (req, res) => {\n    try {\n      // In a real implementation, you'd use multer to handle file uploads\n      // For now, we'll simulate processing the CSV data\n      const orders = await storage.processShopifyCsv(req.body);\n      res.status(201).json({ count: orders.length, orders });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to import CSV file\" });\n    }\n  });\n\n  app.get(\"/api/shopify-orders\", async (req, res) => {\n    try {\n      const orders = await storage.getShopifyOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch Shopify orders\" });\n    }\n  });\n\n  // Business Profile routes\n  app.get(\"/api/business-profiles\", async (req, res) => {\n    try {\n      const profiles = await storage.getBusinessProfiles();\n      res.json(profiles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch business profiles\" });\n    }\n  });\n\n  app.post(\"/api/business-profiles\", async (req, res) => {\n    try {\n      const profile = await storage.createBusinessProfile(req.body);\n      res.status(201).json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create business profile\" });\n    }\n  });\n\n  app.get(\"/api/business-profiles/:id\", async (req, res) => {\n    try {\n      const profile = await storage.getBusinessProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ error: \"Business profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch business profile\" });\n    }\n  });\n\n  app.put(\"/api/business-profiles/:id\", async (req, res) => {\n    try {\n      const profile = await storage.updateBusinessProfile(req.params.id, req.body);\n      if (!profile) {\n        return res.status(404).json({ error: \"Business profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update business profile\" });\n    }\n  });\n\n  app.delete(\"/api/business-profiles/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBusinessProfile(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Business profile not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete business profile\" });\n    }\n  });\n\n  // Purchase Order routes\n  app.get(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const { businessProfileId } = req.query;\n      if (businessProfileId) {\n        const orders = await storage.getPurchaseOrdersByBusiness(businessProfileId as string);\n        res.json(orders);\n      } else {\n        const orders = await storage.getPurchaseOrders();\n        res.json(orders);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchase orders\" });\n    }\n  });\n\n  app.post(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const order = await storage.createPurchaseOrder(req.body);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create purchase order\" });\n    }\n  });\n\n  app.get(\"/api/purchase-orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getPurchaseOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: \"Purchase order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchase order\" });\n    }\n  });\n\n  app.put(\"/api/purchase-orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.updatePurchaseOrder(req.params.id, req.body);\n      if (!order) {\n        return res.status(404).json({ error: \"Purchase order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update purchase order\" });\n    }\n  });\n\n  app.delete(\"/api/purchase-orders/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePurchaseOrder(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Purchase order not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete purchase order\" });\n    }\n  });\n\n  // Purchase Order Items routes\n  app.get(\"/api/purchase-orders/:id/items\", async (req, res) => {\n    try {\n      const items = await storage.getPurchaseOrderItems(req.params.id);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchase order items\" });\n    }\n  });\n\n  app.post(\"/api/purchase-order-items\", async (req, res) => {\n    try {\n      const item = await storage.createPurchaseOrderItem(req.body);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create purchase order item\" });\n    }\n  });\n\n  app.put(\"/api/purchase-order-items/:id\", async (req, res) => {\n    try {\n      const item = await storage.updatePurchaseOrderItem(req.params.id, req.body);\n      if (!item) {\n        return res.status(404).json({ error: \"Purchase order item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update purchase order item\" });\n    }\n  });\n\n  app.delete(\"/api/purchase-order-items/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePurchaseOrderItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Purchase order item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete purchase order item\" });\n    }\n  });\n\n  // Business Revenue routes\n  app.get(\"/api/business-revenue\", async (req, res) => {\n    try {\n      const revenue = await storage.getAllBusinessRevenue();\n      res.json(revenue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business revenue\" });\n    }\n  });\n\n  app.post(\"/api/business-revenue\", async (req, res) => {\n    try {\n      const validatedData = insertBusinessRevenueSchema.parse(req.body);\n      const revenue = await storage.createBusinessRevenue(validatedData);\n      res.status(201).json(revenue);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create business revenue\" });\n    }\n  });\n\n  // Business Expenses routes\n  app.get(\"/api/business-expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getAllBusinessExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business expenses\" });\n    }\n  });\n\n  app.post(\"/api/business-expenses\", async (req, res) => {\n    try {\n      const validatedData = insertBusinessExpenseSchema.parse(req.body);\n      const expense = await storage.createBusinessExpense(validatedData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create business expense\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37161},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type CreditCard, type InsertCreditCard, \n  type Loan, type InsertLoan,\n  type MonthlyPayment, type InsertMonthlyPayment,\n  type Income, type InsertIncome,\n  type Payment, type InsertPayment,\n  type Expense, type InsertExpense,\n  type SavingsGoal, type InsertSavingsGoal,\n  type Budget, type InsertBudget,\n  type Investment, type InsertInvestment,\n  type Asset, type InsertAsset,\n  type Liability, type InsertLiability,\n  type NetWorthSnapshot, type InsertNetWorthSnapshot,\n  type BusinessProfile, type InsertBusinessProfile,\n  type PurchaseOrder, type InsertPurchaseOrder,\n  type PurchaseOrderItem, type InsertPurchaseOrderItem\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Credit Cards\n  getCreditCards(): Promise<CreditCard[]>;\n  getCreditCard(id: string): Promise<CreditCard | undefined>;\n  createCreditCard(creditCard: InsertCreditCard): Promise<CreditCard>;\n  updateCreditCard(id: string, creditCard: Partial<InsertCreditCard>): Promise<CreditCard | undefined>;\n  deleteCreditCard(id: string): Promise<boolean>;\n  \n  // Loans\n  getLoans(): Promise<Loan[]>;\n  getLoan(id: string): Promise<Loan | undefined>;\n  createLoan(loan: InsertLoan): Promise<Loan>;\n  updateLoan(id: string, loan: Partial<InsertLoan>): Promise<Loan | undefined>;\n  deleteLoan(id: string): Promise<boolean>;\n  \n  // Monthly Payments\n  getMonthlyPayments(): Promise<MonthlyPayment[]>;\n  getMonthlyPayment(id: string): Promise<MonthlyPayment | undefined>;\n  createMonthlyPayment(payment: InsertMonthlyPayment): Promise<MonthlyPayment>;\n  updateMonthlyPayment(id: string, payment: Partial<InsertMonthlyPayment>): Promise<MonthlyPayment | undefined>;\n  deleteMonthlyPayment(id: string): Promise<boolean>;\n  \n  // Income\n  getIncomes(): Promise<Income[]>;\n  getIncome(id: string): Promise<Income | undefined>;\n  createIncome(income: InsertIncome): Promise<Income>;\n  updateIncome(id: string, income: Partial<InsertIncome>): Promise<Income | undefined>;\n  deleteIncome(id: string): Promise<boolean>;\n  \n  // Payments\n  getPayments(): Promise<Payment[]>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPaymentsByAccount(accountId: string, accountType: string): Promise<Payment[]>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  getExpense(id: string): Promise<Expense | undefined>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense | undefined>;\n  deleteExpense(id: string): Promise<boolean>;\n  getExpensesByDateRange(startDate: string, endDate: string): Promise<Expense[]>;\n\n  // Savings Goals\n  getSavingsGoals(): Promise<SavingsGoal[]>;\n  getSavingsGoal(id: string): Promise<SavingsGoal | undefined>;\n  createSavingsGoal(goal: InsertSavingsGoal): Promise<SavingsGoal>;\n  updateSavingsGoal(id: string, goal: Partial<InsertSavingsGoal>): Promise<SavingsGoal | undefined>;\n  deleteSavingsGoal(id: string): Promise<boolean>;\n\n  // Budgets\n  getBudgets(): Promise<Budget[]>;\n  getBudget(id: string): Promise<Budget | undefined>;\n  createBudget(budget: InsertBudget): Promise<Budget>;\n  updateBudget(id: string, budget: Partial<InsertBudget>): Promise<Budget | undefined>;\n  deleteBudget(id: string): Promise<boolean>;\n\n  // Investments\n  getInvestments(): Promise<Investment[]>;\n  getInvestment(id: string): Promise<Investment | undefined>;\n  createInvestment(investment: InsertInvestment): Promise<Investment>;\n  updateInvestment(id: string, investment: Partial<InsertInvestment>): Promise<Investment | undefined>;\n  deleteInvestment(id: string): Promise<boolean>;\n\n  // Assets\n  getAssets(): Promise<Asset[]>;\n  getAsset(id: string): Promise<Asset | undefined>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(id: string, asset: Partial<InsertAsset>): Promise<Asset | undefined>;\n  deleteAsset(id: string): Promise<boolean>;\n\n  // Liabilities\n  getLiabilities(): Promise<Liability[]>;\n  getLiability(id: string): Promise<Liability | undefined>;\n  createLiability(liability: InsertLiability): Promise<Liability>;\n  updateLiability(id: string, liability: Partial<InsertLiability>): Promise<Liability | undefined>;\n  deleteLiability(id: string): Promise<boolean>;\n\n  // Net Worth Snapshots\n  getNetWorthSnapshots(): Promise<NetWorthSnapshot[]>;\n  getNetWorthSnapshot(id: string): Promise<NetWorthSnapshot | undefined>;\n  createNetWorthSnapshot(snapshot: InsertNetWorthSnapshot): Promise<NetWorthSnapshot>;\n  getLatestNetWorthSnapshot(): Promise<NetWorthSnapshot | undefined>;\n\n  // Business Profiles\n  getBusinessProfiles(): Promise<BusinessProfile[]>;\n  getBusinessProfile(id: string): Promise<BusinessProfile | undefined>;\n  createBusinessProfile(profile: InsertBusinessProfile): Promise<BusinessProfile>;\n  updateBusinessProfile(id: string, profile: Partial<InsertBusinessProfile>): Promise<BusinessProfile | undefined>;\n  deleteBusinessProfile(id: string): Promise<boolean>;\n\n  // Purchase Orders\n  getPurchaseOrders(): Promise<PurchaseOrder[]>;\n  getPurchaseOrder(id: string): Promise<PurchaseOrder | undefined>;\n  createPurchaseOrder(order: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  updatePurchaseOrder(id: string, order: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder | undefined>;\n  deletePurchaseOrder(id: string): Promise<boolean>;\n  getPurchaseOrdersByBusiness(businessProfileId: string): Promise<PurchaseOrder[]>;\n\n  // Purchase Order Items\n  getPurchaseOrderItems(purchaseOrderId: string): Promise<PurchaseOrderItem[]>;\n  createPurchaseOrderItem(item: InsertPurchaseOrderItem): Promise<PurchaseOrderItem>;\n  updatePurchaseOrderItem(id: string, item: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem | undefined>;\n  deletePurchaseOrderItem(id: string): Promise<boolean>;\n\n  // Business Revenue\n  getAllBusinessRevenue(): Promise<any[]>;\n  createBusinessRevenue(revenue: any): Promise<any>;\n  updateBusinessRevenue(id: string, revenue: any): Promise<any>;\n  deleteBusinessRevenue(id: string): Promise<void>;\n\n  // Business Expenses\n  getAllBusinessExpenses(): Promise<any[]>;\n  createBusinessExpense(expense: any): Promise<any>;\n  updateBusinessExpense(id: string, expense: any): Promise<any>;\n  deleteBusinessExpense(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private creditCards: Map<string, CreditCard>;\n  private loans: Map<string, Loan>;\n  private monthlyPayments: Map<string, MonthlyPayment>;\n  private incomes: Map<string, Income>;\n  private payments: Map<string, Payment>;\n  private expenses: Map<string, Expense>;\n  private savingsGoals: Map<string, SavingsGoal>;\n  private budgets: Map<string, Budget>;\n  private investments: Map<string, Investment>;\n  private assets: Map<string, Asset>;\n  private liabilities: Map<string, Liability>;\n  private netWorthSnapshots: Map<string, NetWorthSnapshot>;\n  private businessProfiles: Map<string, BusinessProfile>;\n  private purchaseOrders: Map<string, PurchaseOrder>;\n  private purchaseOrderItems: Map<string, PurchaseOrderItem>;\n\n  constructor() {\n    this.users = new Map();\n    this.creditCards = new Map();\n    this.loans = new Map();\n    this.monthlyPayments = new Map();\n    this.incomes = new Map();\n    this.payments = new Map();\n    this.expenses = new Map();\n    this.savingsGoals = new Map();\n    this.budgets = new Map();\n    this.investments = new Map();\n    this.assets = new Map();\n    this.liabilities = new Map();\n    this.netWorthSnapshots = new Map();\n    this.businessProfiles = new Map();\n    this.purchaseOrders = new Map();\n    this.purchaseOrderItems = new Map();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Credit Cards\n  async getCreditCards(): Promise<CreditCard[]> {\n    return Array.from(this.creditCards.values());\n  }\n\n  async getCreditCard(id: string): Promise<CreditCard | undefined> {\n    return this.creditCards.get(id);\n  }\n\n  async createCreditCard(insertCreditCard: InsertCreditCard): Promise<CreditCard> {\n    const id = randomUUID();\n    const creditCard: CreditCard = { ...insertCreditCard, id };\n    this.creditCards.set(id, creditCard);\n    return creditCard;\n  }\n\n  async updateCreditCard(id: string, updates: Partial<InsertCreditCard>): Promise<CreditCard | undefined> {\n    const existing = this.creditCards.get(id);\n    if (!existing) return undefined;\n    \n    const updated: CreditCard = { ...existing, ...updates };\n    this.creditCards.set(id, updated);\n    return updated;\n  }\n\n  async deleteCreditCard(id: string): Promise<boolean> {\n    return this.creditCards.delete(id);\n  }\n\n  // Loans\n  async getLoans(): Promise<Loan[]> {\n    return Array.from(this.loans.values());\n  }\n\n  async getLoan(id: string): Promise<Loan | undefined> {\n    return this.loans.get(id);\n  }\n\n  async createLoan(insertLoan: InsertLoan): Promise<Loan> {\n    const id = randomUUID();\n    const loan: Loan = { ...insertLoan, id };\n    this.loans.set(id, loan);\n    return loan;\n  }\n\n  async updateLoan(id: string, updates: Partial<InsertLoan>): Promise<Loan | undefined> {\n    const existing = this.loans.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Loan = { ...existing, ...updates };\n    this.loans.set(id, updated);\n    return updated;\n  }\n\n  async deleteLoan(id: string): Promise<boolean> {\n    return this.loans.delete(id);\n  }\n\n  // Monthly Payments\n  async getMonthlyPayments(): Promise<MonthlyPayment[]> {\n    return Array.from(this.monthlyPayments.values());\n  }\n\n  async getMonthlyPayment(id: string): Promise<MonthlyPayment | undefined> {\n    return this.monthlyPayments.get(id);\n  }\n\n  async createMonthlyPayment(insertMonthlyPayment: InsertMonthlyPayment): Promise<MonthlyPayment> {\n    const id = randomUUID();\n    const monthlyPayment: MonthlyPayment = { \n      ...insertMonthlyPayment, \n      id,\n      isRecurring: insertMonthlyPayment.isRecurring ?? true\n    };\n    this.monthlyPayments.set(id, monthlyPayment);\n    return monthlyPayment;\n  }\n\n  async updateMonthlyPayment(id: string, updates: Partial<InsertMonthlyPayment>): Promise<MonthlyPayment | undefined> {\n    const existing = this.monthlyPayments.get(id);\n    if (!existing) return undefined;\n    \n    const updated: MonthlyPayment = { ...existing, ...updates };\n    this.monthlyPayments.set(id, updated);\n    return updated;\n  }\n\n  async deleteMonthlyPayment(id: string): Promise<boolean> {\n    return this.monthlyPayments.delete(id);\n  }\n\n  // Income\n  async getIncomes(): Promise<Income[]> {\n    return Array.from(this.incomes.values());\n  }\n\n  async getIncome(id: string): Promise<Income | undefined> {\n    return this.incomes.get(id);\n  }\n\n  async createIncome(insertIncome: InsertIncome): Promise<Income> {\n    const id = randomUUID();\n    const income: Income = { ...insertIncome, id };\n    this.incomes.set(id, income);\n    return income;\n  }\n\n  async updateIncome(id: string, updates: Partial<InsertIncome>): Promise<Income | undefined> {\n    const existing = this.incomes.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Income = { ...existing, ...updates };\n    this.incomes.set(id, updated);\n    return updated;\n  }\n\n  async deleteIncome(id: string): Promise<boolean> {\n    return this.incomes.delete(id);\n  }\n\n  // Payments\n  async getPayments(): Promise<Payment[]> {\n    return Array.from(this.payments.values());\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    return this.payments.get(id);\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const payment: Payment = { \n      ...insertPayment, \n      id,\n      notes: insertPayment.notes ?? null\n    };\n    this.payments.set(id, payment);\n    return payment;\n  }\n\n  async getPaymentsByAccount(accountId: string, accountType: string): Promise<Payment[]> {\n    return Array.from(this.payments.values()).filter(\n      payment => payment.accountId === accountId && payment.accountType === accountType\n    );\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async getExpense(id: string): Promise<Expense | undefined> {\n    return this.expenses.get(id);\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = { \n      ...insertExpense, \n      id,\n      paymentMethod: insertExpense.paymentMethod ?? null,\n      notes: insertExpense.notes ?? null,\n      isRecurring: insertExpense.isRecurring ?? false,\n      createdAt: new Date()\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async updateExpense(id: string, updates: Partial<InsertExpense>): Promise<Expense | undefined> {\n    const existing = this.expenses.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Expense = { ...existing, ...updates };\n    this.expenses.set(id, updated);\n    return updated;\n  }\n\n  async deleteExpense(id: string): Promise<boolean> {\n    return this.expenses.delete(id);\n  }\n\n  async getExpensesByDateRange(startDate: string, endDate: string): Promise<Expense[]> {\n    return Array.from(this.expenses.values()).filter(expense => {\n      const expenseDate = new Date(expense.expenseDate);\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      return expenseDate >= start && expenseDate <= end;\n    });\n  }\n\n  // Savings Goals\n  async getSavingsGoals(): Promise<SavingsGoal[]> {\n    return Array.from(this.savingsGoals.values());\n  }\n\n  async getSavingsGoal(id: string): Promise<SavingsGoal | undefined> {\n    return this.savingsGoals.get(id);\n  }\n\n  async createSavingsGoal(insertGoal: InsertSavingsGoal): Promise<SavingsGoal> {\n    const id = randomUUID();\n    const goal: SavingsGoal = { \n      ...insertGoal, \n      id,\n      currentAmount: insertGoal.currentAmount ?? \"0\",\n      monthlyContribution: insertGoal.monthlyContribution ?? \"0\",\n      isActive: insertGoal.isActive ?? true,\n      targetDate: insertGoal.targetDate ?? null,\n      createdAt: new Date()\n    };\n    this.savingsGoals.set(id, goal);\n    return goal;\n  }\n\n  async updateSavingsGoal(id: string, updates: Partial<InsertSavingsGoal>): Promise<SavingsGoal | undefined> {\n    const existing = this.savingsGoals.get(id);\n    if (!existing) return undefined;\n    \n    const updated: SavingsGoal = { ...existing, ...updates };\n    this.savingsGoals.set(id, updated);\n    return updated;\n  }\n\n  async deleteSavingsGoal(id: string): Promise<boolean> {\n    return this.savingsGoals.delete(id);\n  }\n\n  // Budgets\n  async getBudgets(): Promise<Budget[]> {\n    return Array.from(this.budgets.values());\n  }\n\n  async getBudget(id: string): Promise<Budget | undefined> {\n    return this.budgets.get(id);\n  }\n\n  async createBudget(insertBudget: InsertBudget): Promise<Budget> {\n    const id = randomUUID();\n    const budget: Budget = { \n      ...insertBudget, \n      id,\n      currentSpent: insertBudget.currentSpent ?? \"0\",\n      alertThreshold: insertBudget.alertThreshold ?? \"80\",\n      isActive: insertBudget.isActive ?? true\n    };\n    this.budgets.set(id, budget);\n    return budget;\n  }\n\n  async updateBudget(id: string, updates: Partial<InsertBudget>): Promise<Budget | undefined> {\n    const existing = this.budgets.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Budget = { ...existing, ...updates };\n    this.budgets.set(id, updated);\n    return updated;\n  }\n\n  async deleteBudget(id: string): Promise<boolean> {\n    return this.budgets.delete(id);\n  }\n\n  // Investments\n  async getInvestments(): Promise<Investment[]> {\n    return Array.from(this.investments.values());\n  }\n\n  async getInvestment(id: string): Promise<Investment | undefined> {\n    return this.investments.get(id);\n  }\n\n  async createInvestment(insertInvestment: InsertInvestment): Promise<Investment> {\n    const id = randomUUID();\n    const investment: Investment = { \n      ...insertInvestment, \n      id,\n      contributionAmount: insertInvestment.contributionAmount ?? \"0\",\n      contributionFrequency: insertInvestment.contributionFrequency ?? \"monthly\",\n      employerMatch: insertInvestment.employerMatch ?? \"0\",\n      riskLevel: insertInvestment.riskLevel ?? \"moderate\",\n      expectedReturn: insertInvestment.expectedReturn ?? \"7\",\n      lastUpdated: new Date()\n    };\n    this.investments.set(id, investment);\n    return investment;\n  }\n\n  async updateInvestment(id: string, updates: Partial<InsertInvestment>): Promise<Investment | undefined> {\n    const existing = this.investments.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Investment = { ...existing, ...updates, lastUpdated: new Date() };\n    this.investments.set(id, updated);\n    return updated;\n  }\n\n  async deleteInvestment(id: string): Promise<boolean> {\n    return this.investments.delete(id);\n  }\n\n  // Assets\n  async getAssets(): Promise<Asset[]> {\n    return Array.from(this.assets.values());\n  }\n\n  async getAsset(id: string): Promise<Asset | undefined> {\n    return this.assets.get(id);\n  }\n\n  async createAsset(insertAsset: InsertAsset): Promise<Asset> {\n    const id = randomUUID();\n    const asset: Asset = { \n      ...insertAsset, \n      id,\n      purchasePrice: insertAsset.purchasePrice ?? null,\n      purchaseDate: insertAsset.purchaseDate ?? null,\n      appreciationRate: insertAsset.appreciationRate ?? \"0\",\n      depreciationRate: insertAsset.depreciationRate ?? \"0\",\n      ownershipPercentage: insertAsset.ownershipPercentage ?? \"100\",\n      isLiquid: insertAsset.isLiquid ?? false,\n      institution: insertAsset.institution ?? null,\n      accountNumber: insertAsset.accountNumber ?? null,\n      maturityDate: insertAsset.maturityDate ?? null,\n      expectedReturn: insertAsset.expectedReturn ?? null,\n      riskLevel: insertAsset.riskLevel ?? null,\n      marketValue: insertAsset.marketValue ?? null,\n      notes: insertAsset.notes ?? null,\n      lastUpdated: new Date(),\n      createdAt: new Date()\n    };\n    this.assets.set(id, asset);\n    return asset;\n  }\n\n  async updateAsset(id: string, updates: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const existing = this.assets.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Asset = { ...existing, ...updates, lastUpdated: new Date() };\n    this.assets.set(id, updated);\n    return updated;\n  }\n\n  async deleteAsset(id: string): Promise<boolean> {\n    return this.assets.delete(id);\n  }\n\n  // Liabilities\n  async getLiabilities(): Promise<Liability[]> {\n    return Array.from(this.liabilities.values());\n  }\n\n  async getLiability(id: string): Promise<Liability | undefined> {\n    return this.liabilities.get(id);\n  }\n\n  async createLiability(insertLiability: InsertLiability): Promise<Liability> {\n    const id = randomUUID();\n    const liability: Liability = { \n      ...insertLiability, \n      id,\n      originalAmount: insertLiability.originalAmount ?? null,\n      interestRate: insertLiability.interestRate ?? null,\n      minimumPayment: insertLiability.minimumPayment ?? null,\n      monthlyPayment: insertLiability.monthlyPayment ?? null,\n      dueDate: insertLiability.dueDate ?? null,\n      paymentFrequency: insertLiability.paymentFrequency ?? \"monthly\",\n      lender: insertLiability.lender ?? null,\n      accountNumber: insertLiability.accountNumber ?? null,\n      loanTerm: insertLiability.loanTerm ?? null,\n      remainingTerm: insertLiability.remainingTerm ?? null,\n      payoffStrategy: insertLiability.payoffStrategy ?? null,\n      isSecured: insertLiability.isSecured ?? false,\n      collateral: insertLiability.collateral ?? null,\n      taxDeductible: insertLiability.taxDeductible ?? false,\n      creditLimit: insertLiability.creditLimit ?? null,\n      notes: insertLiability.notes ?? null,\n      lastUpdated: new Date(),\n      createdAt: new Date()\n    };\n    this.liabilities.set(id, liability);\n    return liability;\n  }\n\n  async updateLiability(id: string, updates: Partial<InsertLiability>): Promise<Liability | undefined> {\n    const existing = this.liabilities.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Liability = { ...existing, ...updates, lastUpdated: new Date() };\n    this.liabilities.set(id, updated);\n    return updated;\n  }\n\n  async deleteLiability(id: string): Promise<boolean> {\n    return this.liabilities.delete(id);\n  }\n\n  // Net Worth Snapshots\n  async getNetWorthSnapshots(): Promise<NetWorthSnapshot[]> {\n    return Array.from(this.netWorthSnapshots.values()).sort((a, b) => \n      new Date(b.snapshotDate).getTime() - new Date(a.snapshotDate).getTime()\n    );\n  }\n\n  async getNetWorthSnapshot(id: string): Promise<NetWorthSnapshot | undefined> {\n    return this.netWorthSnapshots.get(id);\n  }\n\n  async createNetWorthSnapshot(insertSnapshot: InsertNetWorthSnapshot): Promise<NetWorthSnapshot> {\n    const id = randomUUID();\n    const snapshot: NetWorthSnapshot = { \n      ...insertSnapshot, \n      id,\n      cashLiquidAssets: insertSnapshot.cashLiquidAssets ?? \"0\",\n      investmentAssets: insertSnapshot.investmentAssets ?? \"0\",\n      realEstateAssets: insertSnapshot.realEstateAssets ?? \"0\",\n      vehicleAssets: insertSnapshot.vehicleAssets ?? \"0\",\n      personalPropertyAssets: insertSnapshot.personalPropertyAssets ?? \"0\",\n      businessAssets: insertSnapshot.businessAssets ?? \"0\",\n      consumerDebt: insertSnapshot.consumerDebt ?? \"0\",\n      vehicleLoans: insertSnapshot.vehicleLoans ?? \"0\",\n      realEstateDebt: insertSnapshot.realEstateDebt ?? \"0\",\n      educationDebt: insertSnapshot.educationDebt ?? \"0\",\n      businessDebt: insertSnapshot.businessDebt ?? \"0\",\n      taxesBills: insertSnapshot.taxesBills ?? \"0\",\n      monthOverMonthChange: insertSnapshot.monthOverMonthChange ?? null,\n      yearOverYearChange: insertSnapshot.yearOverYearChange ?? null,\n      createdAt: new Date()\n    };\n    this.netWorthSnapshots.set(id, snapshot);\n    return snapshot;\n  }\n\n  async getLatestNetWorthSnapshot(): Promise<NetWorthSnapshot | undefined> {\n    const snapshots = await this.getNetWorthSnapshots();\n    return snapshots.length > 0 ? snapshots[0] : undefined;\n  }\n\n  // Business Expense methods\n  private businessExpenses = new Map<string, any>();\n  \n  async getBusinessExpenses(): Promise<any[]> {\n    return Array.from(this.businessExpenses.values());\n  }\n\n  async createBusinessExpense(expense: any): Promise<any> {\n    const newExpense = {\n      id: randomUUID(),\n      ...expense,\n      createdAt: new Date().toISOString(),\n    };\n    this.businessExpenses.set(newExpense.id, newExpense);\n    return newExpense;\n  }\n\n  async updateBusinessExpense(id: string, expense: any): Promise<any> {\n    const existing = this.businessExpenses.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...expense };\n    this.businessExpenses.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusinessExpense(id: string): Promise<void> {\n    this.businessExpenses.delete(id);\n  }\n\n  // Business Revenue methods\n  private businessRevenue = new Map<string, any>();\n  \n  async getBusinessRevenue(): Promise<any[]> {\n    return Array.from(this.businessRevenue.values());\n  }\n\n  async createBusinessRevenue(revenue: any): Promise<any> {\n    const newRevenue = {\n      id: randomUUID(),\n      ...revenue,\n      createdAt: new Date().toISOString(),\n    };\n    this.businessRevenue.set(newRevenue.id, newRevenue);\n    return newRevenue;\n  }\n\n  async updateBusinessRevenue(id: string, revenue: any): Promise<any> {\n    const existing = this.businessRevenue.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...revenue };\n    this.businessRevenue.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusinessRevenue(id: string): Promise<void> {\n    this.businessRevenue.delete(id);\n  }\n\n  // Business Payout methods\n  private businessPayouts = new Map<string, any>();\n  \n  async getBusinessPayouts(): Promise<any[]> {\n    return Array.from(this.businessPayouts.values());\n  }\n\n  async createBusinessPayout(payout: any): Promise<any> {\n    const newPayout = {\n      id: randomUUID(),\n      ...payout,\n      createdAt: new Date().toISOString(),\n    };\n    this.businessPayouts.set(newPayout.id, newPayout);\n    return newPayout;\n  }\n\n  async updateBusinessPayout(id: string, payout: any): Promise<any> {\n    const existing = this.businessPayouts.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...payout };\n    this.businessPayouts.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusinessPayout(id: string): Promise<void> {\n    this.businessPayouts.delete(id);\n  }\n\n  // Tax document methods\n  private taxDocuments = new Map<string, any>();\n  \n  async getTaxDocuments(): Promise<any[]> {\n    return Array.from(this.taxDocuments.values());\n  }\n\n  async createTaxDocument(document: any): Promise<any> {\n    const newDocument = {\n      id: randomUUID(),\n      ...document,\n      createdAt: new Date().toISOString(),\n    };\n    this.taxDocuments.set(newDocument.id, newDocument);\n    return newDocument;\n  }\n\n  async deleteTaxDocument(id: string): Promise<void> {\n    this.taxDocuments.delete(id);\n  }\n\n  // Sales tax settings methods\n  private salesTaxSettings = new Map<string, any>();\n  \n  async getSalesTaxSettings(): Promise<any[]> {\n    return Array.from(this.salesTaxSettings.values());\n  }\n\n  async createSalesTaxSetting(setting: any): Promise<any> {\n    const newSetting = {\n      id: randomUUID(),\n      ...setting,\n      createdAt: new Date().toISOString(),\n    };\n    this.salesTaxSettings.set(newSetting.id, newSetting);\n    return newSetting;\n  }\n\n  async updateSalesTaxSetting(id: string, setting: any): Promise<any> {\n    const existing = this.salesTaxSettings.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...setting };\n    this.salesTaxSettings.set(id, updated);\n    return updated;\n  }\n\n  async deleteSalesTaxSetting(id: string): Promise<void> {\n    this.salesTaxSettings.delete(id);\n  }\n\n  // Business info methods\n  private businessInfo = new Map<string, any>();\n  \n  async getBusinessInfo(): Promise<any[]> {\n    return Array.from(this.businessInfo.values());\n  }\n\n  async createBusinessInfo(info: any): Promise<any> {\n    const newInfo = {\n      id: randomUUID(),\n      ...info,\n      createdAt: new Date().toISOString(),\n    };\n    this.businessInfo.set(newInfo.id, newInfo);\n    return newInfo;\n  }\n\n  async updateBusinessInfo(id: string, info: any): Promise<any> {\n    const existing = this.businessInfo.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...info };\n    this.businessInfo.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusinessInfo(id: string): Promise<void> {\n    this.businessInfo.delete(id);\n  }\n\n  // Payment methods methods\n  private paymentMethods = new Map<string, any>();\n  \n  async getPaymentMethods(): Promise<any[]> {\n    return Array.from(this.paymentMethods.values());\n  }\n\n  async createPaymentMethod(method: any): Promise<any> {\n    const newMethod = {\n      id: randomUUID(),\n      ...method,\n      createdAt: new Date().toISOString(),\n    };\n    this.paymentMethods.set(newMethod.id, newMethod);\n    return newMethod;\n  }\n\n  async updatePaymentMethod(id: string, method: any): Promise<any> {\n    const existing = this.paymentMethods.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...method };\n    this.paymentMethods.set(id, updated);\n    return updated;\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    this.paymentMethods.delete(id);\n  }\n\n  // Additional tax management methods\n  private salesTaxReturns = new Map<string, any>();\n  private expenseReports = new Map<string, any>();\n  private scheduleCForms = new Map<string, any>();\n  private shopifyIntegrations = new Map<string, any>();\n\n  async createSalesTaxReturn(returnData: any): Promise<any> {\n    const newReturn = {\n      id: randomUUID(),\n      ...returnData,\n      createdAt: new Date().toISOString(),\n    };\n    this.salesTaxReturns.set(newReturn.id, newReturn);\n    return newReturn;\n  }\n\n  async createExpenseReport(reportData: any): Promise<any> {\n    const newReport = {\n      id: randomUUID(),\n      ...reportData,\n      createdAt: new Date().toISOString(),\n    };\n    this.expenseReports.set(newReport.id, newReport);\n    return newReport;\n  }\n\n  async createScheduleC(scheduleCData: any): Promise<any> {\n    const newScheduleC = {\n      id: randomUUID(),\n      ...scheduleCData,\n      createdAt: new Date().toISOString(),\n    };\n    this.scheduleCForms.set(newScheduleC.id, newScheduleC);\n    return newScheduleC;\n  }\n\n  async createShopifyIntegration(integrationData: any): Promise<any> {\n    const newIntegration = {\n      id: randomUUID(),\n      ...integrationData,\n      createdAt: new Date().toISOString(),\n    };\n    this.shopifyIntegrations.set(newIntegration.id, newIntegration);\n    return newIntegration;\n  }\n\n  // Shopify CSV processing and order management\n  private shopifyOrders = new Map<string, any>();\n\n  async processShopifyCsv(csvData: any): Promise<any[]> {\n    // Simulate CSV processing - in real implementation, parse the actual CSV file\n    const sampleOrders = [\n      {\n        id: randomUUID(),\n        orderId: \"#1001\",\n        customerName: \"John Smith\",\n        customerEmail: \"john.smith@email.com\",\n        orderDate: \"2024-08-01\",\n        orderTotal: 125.50,\n        salesTaxAmount: 10.04,\n        taxRate: \"8.0%\",\n        state: \"CA\",\n        city: \"Los Angeles\",\n        shippingAddress: \"123 Main St Los Angeles CA 90210\",\n        productNames: \"Premium Widget, Standard Widget\",\n        paymentStatus: \"paid\",\n        createdAt: new Date().toISOString(),\n      },\n      {\n        id: randomUUID(),\n        orderId: \"#1002\",\n        customerName: \"Sarah Johnson\",\n        customerEmail: \"sarah.j@email.com\",\n        orderDate: \"2024-08-01\",\n        orderTotal: 89.99,\n        salesTaxAmount: 7.20,\n        taxRate: \"8.0%\",\n        state: \"CA\",\n        city: \"San Francisco\",\n        shippingAddress: \"456 Oak Ave San Francisco CA 94102\",\n        productNames: \"Deluxe Service Package\",\n        paymentStatus: \"paid\",\n        createdAt: new Date().toISOString(),\n      },\n      {\n        id: randomUUID(),\n        orderId: \"#1003\",\n        customerName: \"Mike Brown\",\n        customerEmail: \"mike.brown@email.com\",\n        orderDate: \"2024-08-02\",\n        orderTotal: 45.00,\n        salesTaxAmount: 0.00,\n        taxRate: \"0.0%\",\n        state: \"OR\",\n        city: \"Portland\",\n        shippingAddress: \"789 Pine St Portland OR 97201\",\n        productNames: \"Digital Download\",\n        paymentStatus: \"paid\",\n        createdAt: new Date().toISOString(),\n      }\n    ];\n\n    // Store orders\n    sampleOrders.forEach(order => {\n      this.shopifyOrders.set(order.id, order);\n    });\n\n    return sampleOrders;\n  }\n\n  async getShopifyOrders(): Promise<any[]> {\n    return Array.from(this.shopifyOrders.values());\n  }\n\n  async createShopifyOrder(orderData: any): Promise<any> {\n    const newOrder = {\n      id: randomUUID(),\n      ...orderData,\n      createdAt: new Date().toISOString(),\n    };\n    this.shopifyOrders.set(newOrder.id, newOrder);\n    return newOrder;\n  }\n\n  async updateShopifyOrder(id: string, orderData: any): Promise<any> {\n    const existing = this.shopifyOrders.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...orderData };\n    this.shopifyOrders.set(id, updated);\n    return updated;\n  }\n\n  async deleteShopifyOrder(id: string): Promise<void> {\n    this.shopifyOrders.delete(id);\n  }\n\n  // Business Profiles\n  async getBusinessProfiles(): Promise<BusinessProfile[]> {\n    return Array.from(this.businessProfiles.values());\n  }\n\n  async getBusinessProfile(id: string): Promise<BusinessProfile | undefined> {\n    return this.businessProfiles.get(id);\n  }\n\n  async createBusinessProfile(insertProfile: InsertBusinessProfile): Promise<BusinessProfile> {\n    const id = randomUUID();\n    const profile: BusinessProfile = { \n      ...insertProfile, \n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.businessProfiles.set(id, profile);\n    return profile;\n  }\n\n  async updateBusinessProfile(id: string, insertProfile: Partial<InsertBusinessProfile>): Promise<BusinessProfile | undefined> {\n    const profile = this.businessProfiles.get(id);\n    if (!profile) return undefined;\n    \n    const updated: BusinessProfile = { \n      ...profile, \n      ...insertProfile,\n      updatedAt: new Date()\n    };\n    this.businessProfiles.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusinessProfile(id: string): Promise<boolean> {\n    return this.businessProfiles.delete(id);\n  }\n\n  // Purchase Orders\n  async getPurchaseOrders(): Promise<PurchaseOrder[]> {\n    return Array.from(this.purchaseOrders.values());\n  }\n\n  async getPurchaseOrder(id: string): Promise<PurchaseOrder | undefined> {\n    return this.purchaseOrders.get(id);\n  }\n\n  async createPurchaseOrder(insertOrder: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    const id = randomUUID();\n    const order: PurchaseOrder = { \n      ...insertOrder, \n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.purchaseOrders.set(id, order);\n    return order;\n  }\n\n  async updatePurchaseOrder(id: string, insertOrder: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder | undefined> {\n    const order = this.purchaseOrders.get(id);\n    if (!order) return undefined;\n    \n    const updated: PurchaseOrder = { \n      ...order, \n      ...insertOrder,\n      updatedAt: new Date()\n    };\n    this.purchaseOrders.set(id, updated);\n    return updated;\n  }\n\n  async deletePurchaseOrder(id: string): Promise<boolean> {\n    return this.purchaseOrders.delete(id);\n  }\n\n  async getPurchaseOrdersByBusiness(businessProfileId: string): Promise<PurchaseOrder[]> {\n    return Array.from(this.purchaseOrders.values()).filter(\n      order => order.businessProfileId === businessProfileId\n    );\n  }\n\n  // Purchase Order Items\n  async getPurchaseOrderItems(purchaseOrderId: string): Promise<PurchaseOrderItem[]> {\n    return Array.from(this.purchaseOrderItems.values()).filter(\n      item => item.purchaseOrderId === purchaseOrderId\n    );\n  }\n\n  async createPurchaseOrderItem(insertItem: InsertPurchaseOrderItem): Promise<PurchaseOrderItem> {\n    const id = randomUUID();\n    const item: PurchaseOrderItem = { \n      ...insertItem, \n      id,\n      createdAt: new Date()\n    };\n    this.purchaseOrderItems.set(id, item);\n    return item;\n  }\n\n  async updatePurchaseOrderItem(id: string, insertItem: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem | undefined> {\n    const item = this.purchaseOrderItems.get(id);\n    if (!item) return undefined;\n    \n    const updated: PurchaseOrderItem = { ...item, ...insertItem };\n    this.purchaseOrderItems.set(id, updated);\n    return updated;\n  }\n\n  async deletePurchaseOrderItem(id: string): Promise<boolean> {\n    return this.purchaseOrderItems.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":35653},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, date, boolean, timestamp, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const creditCards = pgTable(\"credit_cards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull(),\n  creditLimit: decimal(\"credit_limit\", { precision: 10, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  minimumPayment: decimal(\"minimum_payment\", { precision: 10, scale: 2 }).notNull(),\n  dueDate: integer(\"due_date\").notNull(), // day of month (1-31)\n  paymentFrequency: text(\"payment_frequency\").default(\"monthly\"), // monthly, biweekly, weekly\n  accountOpeningDate: date(\"account_opening_date\"),\n  introAprEndDate: date(\"intro_apr_end_date\"),\n  annualFee: decimal(\"annual_fee\", { precision: 10, scale: 2 }).default(\"0\"),\n  lateFees: decimal(\"late_fees\", { precision: 10, scale: 2 }).default(\"0\"),\n  promotionalOffers: text(\"promotional_offers\"),\n  utilizationThreshold: decimal(\"utilization_threshold\", { precision: 5, scale: 2 }).default(\"30\"), // recommended utilization %\n  lastPaymentDate: date(\"last_payment_date\"),\n  interestAccrued: decimal(\"interest_accrued\", { precision: 10, scale: 2 }).default(\"0\"),\n});\n\nexport const loans = pgTable(\"loans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull(),\n  originalAmount: decimal(\"original_amount\", { precision: 10, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  monthlyPayment: decimal(\"monthly_payment\", { precision: 10, scale: 2 }).notNull(),\n  termMonths: integer(\"term_months\").notNull(),\n  dueDate: integer(\"due_date\").notNull(), // day of month (1-31)\n  loanType: text(\"loan_type\").notNull(), // 'personal', 'auto', 'student', 'mortgage'\n  paymentFrequency: text(\"payment_frequency\").default(\"monthly\"), // monthly, biweekly, weekly\n  accountOpeningDate: date(\"account_opening_date\"),\n  targetPayoffDate: date(\"target_payoff_date\"),\n  payoffStrategy: text(\"payoff_strategy\").default(\"standard\"), // snowball, avalanche, custom\n  earlyPayoffPenalty: boolean(\"early_payoff_penalty\").default(false),\n  lastPaymentDate: date(\"last_payment_date\"),\n  interestAccrued: decimal(\"interest_accrued\", { precision: 10, scale: 2 }).default(\"0\"),\n  principalPaid: decimal(\"principal_paid\", { precision: 10, scale: 2 }).default(\"0\"),\n});\n\nexport const monthlyPayments = pgTable(\"monthly_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  dueDate: integer(\"due_date\").notNull(), // day of month (1-31)\n  paymentType: text(\"payment_type\").notNull(), // 'auto_loan', 'insurance', 'utilities', 'other'\n  isRecurring: boolean(\"is_recurring\").default(true),\n});\n\nexport const income = pgTable(\"income\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  frequency: text(\"frequency\").notNull(), // 'weekly', 'biweekly', 'monthly', 'yearly'\n  nextPayDate: date(\"next_pay_date\").notNull(),\n  incomeType: text(\"income_type\").default(\"active\"), // active, passive, side_hustle, investments\n  grossAmount: decimal(\"gross_amount\", { precision: 10, scale: 2 }),\n  netAmount: decimal(\"net_amount\", { precision: 10, scale: 2 }),\n  taxWithheld: decimal(\"tax_withheld\", { precision: 10, scale: 2 }).default(\"0\"),\n  isRecurring: boolean(\"is_recurring\").default(true),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: varchar(\"account_id\").notNull(),\n  accountType: text(\"account_type\").notNull(), // 'credit_card', 'loan', 'monthly_payment'\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\"payment_date\").notNull(),\n  notes: text(\"notes\"),\n});\n\nexport const insertCreditCardSchema = createInsertSchema(creditCards).omit({\n  id: true,\n});\n\nexport const insertLoanSchema = createInsertSchema(loans).omit({\n  id: true,\n});\n\nexport const insertMonthlyPaymentSchema = createInsertSchema(monthlyPayments).omit({\n  id: true,\n});\n\nexport const insertIncomeSchema = createInsertSchema(income).omit({\n  id: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n});\n\nexport type InsertCreditCard = z.infer<typeof insertCreditCardSchema>;\nexport type CreditCard = typeof creditCards.$inferSelect;\nexport type InsertLoan = z.infer<typeof insertLoanSchema>;\nexport type Loan = typeof loans.$inferSelect;\nexport type InsertMonthlyPayment = z.infer<typeof insertMonthlyPaymentSchema>;\nexport type MonthlyPayment = typeof monthlyPayments.$inferSelect;\nexport type InsertIncome = z.infer<typeof insertIncomeSchema>;\nexport type Income = typeof income.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\n// Users table for future auth implementation\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Business profiles for managing multiple businesses\nexport const businessProfiles = pgTable(\"business_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  businessName: varchar(\"business_name\").notNull(),\n  address: varchar(\"address\").notNull(),\n  city: varchar(\"city\").notNull(),\n  state: varchar(\"state\").notNull(),\n  zipCode: varchar(\"zip_code\").notNull(),\n  phone: varchar(\"phone\"),\n  fax: varchar(\"fax\"),\n  email: varchar(\"email\"),\n  logoUrl: varchar(\"logo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchase orders\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  businessProfileId: varchar(\"business_profile_id\").references(() => businessProfiles.id).notNull(),\n  poNumber: varchar(\"po_number\").notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  vendorName: varchar(\"vendor_name\").notNull(),\n  vendorAddress: varchar(\"vendor_address\").notNull(),\n  vendorPhone: varchar(\"vendor_phone\"),\n  shipToName: varchar(\"ship_to_name\"),\n  shipToAddress: varchar(\"ship_to_address\"),\n  shipToPhone: varchar(\"ship_to_phone\"),\n  requisitioner: varchar(\"requisitioner\"),\n  shipVia: varchar(\"ship_via\"),\n  fobPoint: varchar(\"fob_point\"),\n  shippingTerms: varchar(\"shipping_terms\"),\n  subtotal: varchar(\"subtotal\").notNull(),\n  salesTax: varchar(\"sales_tax\").default(\"0\"),\n  shippingHandling: varchar(\"shipping_handling\").default(\"0\"),\n  totalDue: varchar(\"total_due\").notNull(),\n  specialInstructions: text(\"special_instructions\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, sent, received, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchase order line items\nexport const purchaseOrderItems = pgTable(\"purchase_order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  purchaseOrderId: varchar(\"purchase_order_id\").references(() => purchaseOrders.id).notNull(),\n  itemNumber: varchar(\"item_number\"),\n  description: varchar(\"description\").notNull(),\n  quantity: varchar(\"quantity\").notNull(),\n  unitPrice: varchar(\"unit_price\").notNull(),\n  total: varchar(\"total\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type BusinessProfile = typeof businessProfiles.$inferSelect;\nexport type InsertBusinessProfile = typeof businessProfiles.$inferInsert;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type InsertPurchaseOrder = typeof purchaseOrders.$inferInsert;\nexport type PurchaseOrderItem = typeof purchaseOrderItems.$inferSelect;\nexport type InsertPurchaseOrderItem = typeof purchaseOrderItems.$inferInsert;\n\n// Business-related tables\nexport const businessExpenses = pgTable(\"business_expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  expenseName: varchar(\"expense_name\").notNull(),\n  category: varchar(\"category\").notNull(), // office-supplies, travel, meals, utilities, etc.\n  amount: varchar(\"amount\").notNull(),\n  expenseDate: timestamp(\"expense_date\").notNull(),\n  vendor: varchar(\"vendor\"),\n  description: text(\"description\"),\n  receipt: varchar(\"receipt_url\"), // for receipt storage\n  taxDeductible: boolean(\"tax_deductible\").default(true),\n  businessUnit: varchar(\"business_unit\"), // for multi-unit businesses\n  paymentMethod: varchar(\"payment_method\"), // cash, credit, check, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const businessRevenue = pgTable(\"business_revenue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: varchar(\"source\").notNull(), // shopify, manual, stripe, etc.\n  amount: varchar(\"amount\").notNull(),\n  description: varchar(\"description\"),\n  category: varchar(\"category\"),\n  revenueType: varchar(\"revenue_type\").default(\"one-time\"), // one-time, subscription\n  frequency: varchar(\"frequency\"), // weekly, monthly, quarterly, yearly (for subscriptions)\n  saleDate: timestamp(\"sale_date\").notNull(),\n  customer: varchar(\"customer\"),\n  product: varchar(\"product\"),\n  taxRate: varchar(\"tax_rate\").default(\"0\"), // sales tax rate applied\n  salesTax: varchar(\"sales_tax\").default(\"0\"), // calculated sales tax\n  state: varchar(\"state\"), // for state-specific tax tracking\n  invoiceNumber: varchar(\"invoice_number\"),\n  paymentStatus: varchar(\"payment_status\").default(\"paid\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const businessPayouts = pgTable(\"business_payouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  payoutType: varchar(\"payout_type\").notNull(), // salary, contractor, vendor, dividend, etc.\n  recipient: varchar(\"recipient\").notNull(),\n  amount: varchar(\"amount\").notNull(),\n  payoutDate: timestamp(\"payout_date\").notNull(),\n  taxWithholding: varchar(\"tax_withholding\").default(\"0\"),\n  category: varchar(\"category\").notNull(), // compensation, services, supplies, etc.\n  description: text(\"description\"),\n  taxForm: varchar(\"tax_form\"), // 1099, W2, etc.\n  businessUnit: varchar(\"business_unit\"),\n  paymentMethod: varchar(\"payment_method\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const taxDocuments = pgTable(\"tax_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentType: varchar(\"document_type\").notNull(), // 1099, profit-loss, sales-tax-report, etc.\n  taxYear: varchar(\"tax_year\").notNull(),\n  quarter: varchar(\"quarter\"), // for quarterly reports\n  generatedDate: timestamp(\"generated_date\").defaultNow(),\n  documentData: jsonb(\"document_data\").notNull(), // JSON data for the document\n  status: varchar(\"status\").default(\"draft\"), // draft, final, filed\n  filePath: varchar(\"file_path\"), // for PDF storage\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const salesTaxSettings = pgTable(\"sales_tax_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  state: varchar(\"state\").notNull(),\n  taxRate: varchar(\"tax_rate\").notNull(),\n  effectiveDate: timestamp(\"effective_date\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  businessMode: boolean(\"business_mode\").default(false),\n  combinedView: boolean(\"combined_view\").default(false), // show personal + business together\n  defaultBusinessUnit: varchar(\"default_business_unit\"),\n  taxYear: varchar(\"tax_year\").default(\"2024\"),\n  businessName: varchar(\"business_name\"),\n  businessType: varchar(\"business_type\"), // llc, corp, sole-prop, etc.\n  ein: varchar(\"ein\"), // employer identification number\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Types for business tables\nexport const insertBusinessExpenseSchema = createInsertSchema(businessExpenses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nexport type InsertBusinessExpense = z.infer<typeof insertBusinessExpenseSchema>;\nexport type BusinessExpense = typeof businessExpenses.$inferSelect;\n\nexport const insertBusinessRevenueSchema = createInsertSchema(businessRevenue).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nexport type InsertBusinessRevenue = z.infer<typeof insertBusinessRevenueSchema>;\nexport type BusinessRevenue = typeof businessRevenue.$inferSelect;\n\nexport const insertBusinessPayoutSchema = createInsertSchema(businessPayouts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nexport type InsertBusinessPayout = z.infer<typeof insertBusinessPayoutSchema>;\nexport type BusinessPayout = typeof businessPayouts.$inferSelect;\n\nexport const insertTaxDocumentSchema = createInsertSchema(taxDocuments).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertTaxDocument = z.infer<typeof insertTaxDocumentSchema>;\nexport type TaxDocument = typeof taxDocuments.$inferSelect;\n\nexport const insertSalesTaxSettingSchema = createInsertSchema(salesTaxSettings).omit({\n  id: true,\n  createdAt: true\n});\nexport type InsertSalesTaxSetting = z.infer<typeof insertSalesTaxSettingSchema>;\nexport type SalesTaxSetting = typeof salesTaxSettings.$inferSelect;\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n\n// Expense tracking for individual purchases and bills\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  amount: text(\"amount\").notNull(), // Store as string to preserve precision\n  category: text(\"category\").notNull(), // utilities, groceries, gas, entertainment, etc\n  expenseDate: date(\"expense_date\").notNull(),\n  paymentMethod: text(\"payment_method\"), // cash, credit-card, debit-card, check\n  notes: text(\"notes\"),\n  isRecurring: boolean(\"is_recurring\").default(false), // Track if this is a recurring expense\n  tags: text(\"tags\"), // JSON string of tags like \"Business\", \"Medical\", \"Pet\", \"Vacation\"\n  taxDeductible: boolean(\"tax_deductible\").default(false),\n  businessExpense: boolean(\"business_expense\").default(false),\n  receiptUrl: text(\"receipt_url\"), // For storing receipt images/documents\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Expense = typeof expenses.$inferSelect;\n\n// Savings Goals and Financial Targets\nexport const savingsGoals = pgTable(\"savings_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  goalName: text(\"goal_name\").notNull(),\n  targetAmount: decimal(\"target_amount\", { precision: 12, scale: 2 }).notNull(),\n  currentAmount: decimal(\"current_amount\", { precision: 12, scale: 2 }).default(\"0\"),\n  targetDate: date(\"target_date\"),\n  goalType: text(\"goal_type\").notNull(), // emergency_fund, vacation, house, car, retirement\n  monthlyContribution: decimal(\"monthly_contribution\", { precision: 10, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Budget Categories and Allocation\nexport const budgets = pgTable(\"budgets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(),\n  monthlyAllocation: decimal(\"monthly_allocation\", { precision: 10, scale: 2 }).notNull(),\n  currentSpent: decimal(\"current_spent\", { precision: 10, scale: 2 }).default(\"0\"),\n  budgetMonth: text(\"budget_month\").notNull(), // YYYY-MM format\n  alertThreshold: decimal(\"alert_threshold\", { precision: 5, scale: 2 }).default(\"80\"), // % of budget\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Investment Accounts and Holdings\nexport const investments = pgTable(\"investments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountName: text(\"account_name\").notNull(),\n  accountType: text(\"account_type\").notNull(), // 401k, ira, roth_ira, brokerage, crypto\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).notNull(),\n  contributionAmount: decimal(\"contribution_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  contributionFrequency: text(\"contribution_frequency\").default(\"monthly\"),\n  employerMatch: decimal(\"employer_match\", { precision: 5, scale: 2 }).default(\"0\"), // % match\n  riskLevel: text(\"risk_level\").default(\"moderate\"), // conservative, moderate, aggressive\n  expectedReturn: decimal(\"expected_return\", { precision: 5, scale: 2 }).default(\"7\"), // % annual\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Comprehensive Assets for Net Worth Calculation\nexport const assets = pgTable(\"assets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assetName: text(\"asset_name\").notNull(),\n  assetType: text(\"asset_type\").notNull(), // cash_liquid, investments, real_estate, vehicles, personal_property, business, receivables\n  subcategory: text(\"subcategory\"), // checking, savings, emergency_fund, stocks, crypto, primary_home, rental_property, auto, jewelry, etc.\n  currentValue: decimal(\"current_value\", { precision: 15, scale: 2 }).notNull(),\n  purchasePrice: decimal(\"purchase_price\", { precision: 15, scale: 2 }),\n  purchaseDate: date(\"purchase_date\"),\n  appreciationRate: decimal(\"appreciation_rate\", { precision: 5, scale: 2 }).default(\"0\"), // % annual\n  depreciationRate: decimal(\"depreciation_rate\", { precision: 5, scale: 2 }).default(\"0\"), // % annual for vehicles\n  ownershipPercentage: decimal(\"ownership_percentage\", { precision: 5, scale: 2 }).default(\"100\"),\n  isLiquid: boolean(\"is_liquid\").default(false),\n  institution: text(\"institution\"), // bank name, brokerage, etc.\n  accountNumber: text(\"account_number\"),\n  maturityDate: date(\"maturity_date\"), // for CDs, bonds\n  expectedReturn: decimal(\"expected_return\", { precision: 5, scale: 2 }), // % annual\n  riskLevel: text(\"risk_level\"), // conservative, moderate, aggressive\n  marketValue: decimal(\"market_value\", { precision: 15, scale: 2 }), // current market value if different from book value\n  notes: text(\"notes\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Comprehensive Liabilities for Net Worth Calculation\nexport const liabilities = pgTable(\"liabilities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  liabilityName: text(\"liability_name\").notNull(),\n  liabilityType: text(\"liability_type\").notNull(), // consumer_debt, vehicle_loans, real_estate, education, business, taxes_bills\n  subcategory: text(\"subcategory\"), // credit_card, bnpl, auto_loan, mortgage, heloc, student_loan, business_loan, unpaid_taxes, medical_bills\n  currentBalance: decimal(\"current_balance\", { precision: 15, scale: 2 }).notNull(),\n  originalAmount: decimal(\"original_amount\", { precision: 15, scale: 2 }),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }),\n  minimumPayment: decimal(\"minimum_payment\", { precision: 10, scale: 2 }),\n  monthlyPayment: decimal(\"monthly_payment\", { precision: 10, scale: 2 }),\n  dueDate: date(\"due_date\"),\n  paymentFrequency: text(\"payment_frequency\").default(\"monthly\"),\n  lender: text(\"lender\"), // institution name\n  accountNumber: text(\"account_number\"),\n  loanTerm: integer(\"loan_term\"), // total months\n  remainingTerm: integer(\"remaining_term\"), // months left\n  payoffStrategy: text(\"payoff_strategy\"), // minimum, avalanche, snowball\n  isSecured: boolean(\"is_secured\").default(false),\n  collateral: text(\"collateral\"), // what secures the loan\n  taxDeductible: boolean(\"tax_deductible\").default(false),\n  creditLimit: decimal(\"credit_limit\", { precision: 15, scale: 2 }), // for credit cards/lines of credit\n  notes: text(\"notes\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Net Worth Snapshots for historical tracking\nexport const netWorthSnapshots = pgTable(\"net_worth_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  snapshotDate: date(\"snapshot_date\").notNull(),\n  totalAssets: decimal(\"total_assets\", { precision: 15, scale: 2 }).notNull(),\n  totalLiabilities: decimal(\"total_liabilities\", { precision: 15, scale: 2 }).notNull(),\n  netWorth: decimal(\"net_worth\", { precision: 15, scale: 2 }).notNull(),\n  buyingPower: decimal(\"buying_power\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  // Asset category breakdowns\n  cashLiquidAssets: decimal(\"cash_liquid_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  investmentAssets: decimal(\"investment_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  realEstateAssets: decimal(\"real_estate_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  vehicleAssets: decimal(\"vehicle_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  personalPropertyAssets: decimal(\"personal_property_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  businessAssets: decimal(\"business_assets\", { precision: 15, scale: 2 }).default(\"0\"),\n  // Liability category breakdowns\n  consumerDebt: decimal(\"consumer_debt\", { precision: 15, scale: 2 }).default(\"0\"),\n  vehicleLoans: decimal(\"vehicle_loans\", { precision: 15, scale: 2 }).default(\"0\"),\n  realEstateDebt: decimal(\"real_estate_debt\", { precision: 15, scale: 2 }).default(\"0\"),\n  educationDebt: decimal(\"education_debt\", { precision: 15, scale: 2 }).default(\"0\"),\n  businessDebt: decimal(\"business_debt\", { precision: 15, scale: 2 }).default(\"0\"),\n  taxesBills: decimal(\"taxes_bills\", { precision: 15, scale: 2 }).default(\"0\"),\n  // Changes over time\n  monthOverMonthChange: decimal(\"month_over_month_change\", { precision: 15, scale: 2 }),\n  yearOverYearChange: decimal(\"year_over_year_change\", { precision: 15, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertSavingsGoalSchema = createInsertSchema(savingsGoals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBudgetSchema = createInsertSchema(budgets).omit({\n  id: true,\n});\n\nexport const insertInvestmentSchema = createInsertSchema(investments).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  id: true,\n  lastUpdated: true,\n  createdAt: true,\n});\n\nexport const insertLiabilitySchema = createInsertSchema(liabilities).omit({\n  id: true,\n  lastUpdated: true,\n  createdAt: true,\n});\n\nexport const insertNetWorthSnapshotSchema = createInsertSchema(netWorthSnapshots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSavingsGoal = z.infer<typeof insertSavingsGoalSchema>;\nexport type SavingsGoal = typeof savingsGoals.$inferSelect;\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;\nexport type Budget = typeof budgets.$inferSelect;\nexport type InsertInvestment = z.infer<typeof insertInvestmentSchema>;\nexport type Investment = typeof investments.$inferSelect;\nexport type InsertAsset = z.infer<typeof insertAssetSchema>;\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertLiability = z.infer<typeof insertLiabilitySchema>;\nexport type Liability = typeof liabilities.$inferSelect;\nexport type InsertNetWorthSnapshot = z.infer<typeof insertNetWorthSnapshotSchema>;\nexport type NetWorthSnapshot = typeof netWorthSnapshots.$inferSelect;\n","size_bytes":24586},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ComprehensiveDashboard from \"@/pages/comprehensive-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ComprehensiveDashboard} />\n      <Route path=\"/credit-cards\" component={ComprehensiveDashboard} />\n      <Route path=\"/loans\" component={ComprehensiveDashboard} />\n      <Route path=\"/schedule\" component={ComprehensiveDashboard} />\n      <Route path=\"/analytics\" component={ComprehensiveDashboard} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1058},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(355, 7%, 97%);\n  --accent: hsl(0, 84%, 60%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(240, 10%, 3.9%);\n  --radius: 0.5rem;\n  \n  /* Custom financial app colors */\n  --neutral-50: hsl(210, 20%, 98%);\n  --neutral-100: hsl(220, 14%, 96%);\n  --neutral-200: hsl(220, 13%, 91%);\n  --neutral-300: hsl(216, 12%, 84%);\n  --neutral-400: hsl(218, 11%, 65%);\n  --neutral-500: hsl(220, 9%, 46%);\n  --neutral-600: hsl(215, 14%, 34%);\n  --neutral-700: hsl(217, 19%, 27%);\n  --neutral-800: hsl(215, 28%, 17%);\n  --neutral-900: hsl(222, 84%, 5%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(0, 84%, 60%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(212, 12%, 87%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-neutral-50 { color: var(--neutral-50); }\n  .text-neutral-100 { color: var(--neutral-100); }\n  .text-neutral-200 { color: var(--neutral-200); }\n  .text-neutral-300 { color: var(--neutral-300); }\n  .text-neutral-400 { color: var(--neutral-400); }\n  .text-neutral-500 { color: var(--neutral-500); }\n  .text-neutral-600 { color: var(--neutral-600); }\n  .text-neutral-700 { color: var(--neutral-700); }\n  .text-neutral-800 { color: var(--neutral-800); }\n  .text-neutral-900 { color: var(--neutral-900); }\n  \n  .bg-neutral-50 { background-color: var(--neutral-50); }\n  .bg-neutral-100 { background-color: var(--neutral-100); }\n  .bg-neutral-200 { background-color: var(--neutral-200); }\n  .bg-neutral-300 { background-color: var(--neutral-300); }\n  .bg-neutral-400 { background-color: var(--neutral-400); }\n  .bg-neutral-500 { background-color: var(--neutral-500); }\n  .bg-neutral-600 { background-color: var(--neutral-600); }\n  .bg-neutral-700 { background-color: var(--neutral-700); }\n  .bg-neutral-800 { background-color: var(--neutral-800); }\n  .bg-neutral-900 { background-color: var(--neutral-900); }\n  \n  .border-neutral-200 { border-color: var(--neutral-200); }\n  .border-neutral-300 { border-color: var(--neutral-300); }\n}\n","size_bytes":3360},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/account-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCreditCardSchema, insertLoanSchema } from \"@shared/schema\";\nimport { Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst accountFormSchema = z.discriminatedUnion(\"type\", [\n  z.object({\n    type: z.literal(\"credit-card\"),\n    name: z.string().min(1, \"Account name is required\"),\n    balance: z.string().min(1, \"Balance is required\"),\n    creditLimit: z.string().min(1, \"Credit limit is required\"),\n    interestRate: z.string().min(1, \"Interest rate is required\"),\n    minimumPayment: z.string().min(1, \"Minimum payment is required\"),\n    dueDate: z.string().min(1, \"Due date is required\"),\n  }),\n  z.object({\n    type: z.literal(\"loan\"),\n    name: z.string().min(1, \"Loan name is required\"),\n    balance: z.string().min(1, \"Balance is required\"),\n    originalAmount: z.string().min(1, \"Original amount is required\"),\n    interestRate: z.string().min(1, \"Interest rate is required\"),\n    monthlyPayment: z.string().min(1, \"Monthly payment is required\"),\n    termMonths: z.string().min(1, \"Term is required\"),\n    dueDate: z.string().min(1, \"Due date is required\"),\n    loanType: z.enum([\"personal\", \"auto\", \"student\", \"mortgage\"]),\n  }),\n  z.object({\n    type: z.literal(\"monthly-payment\"),\n    name: z.string().min(1, \"Payment name is required\"),\n    amount: z.string().min(1, \"Amount is required\"),\n    dueDate: z.string().min(1, \"Due date is required\"),\n    paymentType: z.enum([\"auto_loan\", \"insurance\", \"utilities\", \"other\"]),\n    isRecurring: z.boolean().optional(),\n  }),\n  z.object({\n    type: z.literal(\"income\"),\n    name: z.string().min(1, \"Income source is required\"),\n    amount: z.string().min(1, \"Amount is required\"),\n    frequency: z.enum([\"weekly\", \"biweekly\", \"monthly\", \"yearly\"]),\n    nextPayDate: z.string().min(1, \"Next pay date is required\"),\n  }),\n]);\n\ntype AccountFormData = z.infer<typeof accountFormSchema>;\n\nexport function AccountForm() {\n  const [open, setOpen] = useState(false);\n  const [accountType, setAccountType] = useState<\"credit-card\" | \"loan\" | \"monthly-payment\" | \"income\">(\"credit-card\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AccountFormData>({\n    resolver: zodResolver(accountFormSchema),\n    defaultValues: {\n      type: \"credit-card\",\n      name: \"\",\n      dueDate: \"\",\n    },\n  });\n\n  const createCreditCardMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/credit-cards\", {\n        ...data,\n        balance: data.balance,\n        creditLimit: data.creditLimit,\n        interestRate: data.interestRate,\n        minimumPayment: data.minimumPayment,\n        dueDate: parseInt(data.dueDate),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/credit-cards\"] });\n      toast({ title: \"Success\", description: \"Credit card added successfully\" });\n      setOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add credit card\", variant: \"destructive\" });\n    },\n  });\n\n  const createLoanMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/loans\", {\n        ...data,\n        balance: data.balance,\n        originalAmount: data.originalAmount,\n        interestRate: data.interestRate,\n        monthlyPayment: data.monthlyPayment,\n        termMonths: parseInt(data.termMonths),\n        dueDate: parseInt(data.dueDate),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans\"] });\n      toast({ title: \"Success\", description: \"Loan added successfully\" });\n      setOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add loan\", variant: \"destructive\" });\n    },\n  });\n\n  const createMonthlyPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/monthly-payments\", {\n        ...data,\n        amount: data.amount,\n        dueDate: parseInt(data.dueDate),\n        isRecurring: data.isRecurring ?? true,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/monthly-payments\"] });\n      toast({ title: \"Success\", description: \"Monthly payment added successfully\" });\n      setOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add monthly payment\", variant: \"destructive\" });\n    },\n  });\n\n  const createIncomeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/income\", {\n        ...data,\n        amount: data.amount,\n        nextPayDate: data.nextPayDate,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      toast({ title: \"Success\", description: \"Income source added successfully\" });\n      setOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add income source\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: AccountFormData) => {\n    if (data.type === \"credit-card\") {\n      createCreditCardMutation.mutate(data);\n    } else if (data.type === \"loan\") {\n      createLoanMutation.mutate(data);\n    } else if (data.type === \"monthly-payment\") {\n      createMonthlyPaymentMutation.mutate(data);\n    } else if (data.type === \"income\") {\n      createIncomeMutation.mutate(data);\n    }\n  };\n\n  const isPending = createCreditCardMutation.isPending || createLoanMutation.isPending || \n                   createMonthlyPaymentMutation.isPending || createIncomeMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-primary text-white hover:bg-blue-700\" data-testid=\"button-add-account\">\n          <Plus className=\"mr-2\" size={16} />\n          Add Account\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-add-account\">\n        <DialogHeader>\n          <DialogTitle>Add New Account</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Account Type</FormLabel>\n                    <Select\n                      value={field.value}\n                      onValueChange={(value: \"credit-card\" | \"loan\" | \"monthly-payment\" | \"income\") => {\n                        field.onChange(value);\n                        setAccountType(value);\n                        form.reset({ type: value });\n                      }}\n                      data-testid=\"select-account-type\"\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select account type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"credit-card\">Credit Card</SelectItem>\n                        <SelectItem value=\"loan\">Loan</SelectItem>\n                        <SelectItem value=\"monthly-payment\">Monthly Payment</SelectItem>\n                        <SelectItem value=\"income\">Income Source</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Account Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g., Chase Freedom Unlimited\" \n                        {...field} \n                        data-testid=\"input-account-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Credit Card and Loan specific fields */}\n            {(accountType === \"credit-card\" || accountType === \"loan\") && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"balance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Balance</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-balance\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {accountType === \"credit-card\" ? (\n                  <FormField\n                    control={form.control}\n                    name=\"creditLimit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Credit Limit</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            {...field} \n                            data-testid=\"input-credit-limit\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                ) : (\n                  <FormField\n                    control={form.control}\n                    name=\"originalAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Original Loan Amount</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            {...field} \n                            data-testid=\"input-original-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n            )}\n\n            {/* Amount field for monthly payments and income */}\n            {(accountType === \"monthly-payment\" || accountType === \"income\") && (\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{accountType === \"income\" ? \"Income Amount\" : \"Payment Amount\"}</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                        data-testid=\"input-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Interest rate and payment fields for credit cards and loans */}\n            {(accountType === \"credit-card\" || accountType === \"loan\") && (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"interestRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Interest Rate (%)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-interest-rate\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {accountType === \"credit-card\" ? (\n                  <FormField\n                    control={form.control}\n                    name=\"minimumPayment\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Minimum Payment</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            {...field} \n                            data-testid=\"input-minimum-payment\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                ) : (\n                  <>\n                    <FormField\n                      control={form.control}\n                      name=\"monthlyPayment\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Monthly Payment</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\" \n                              placeholder=\"0.00\" \n                              {...field} \n                              data-testid=\"input-monthly-payment\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"termMonths\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Term (Months)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"36\" \n                              {...field} \n                              data-testid=\"input-term-months\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n              </div>\n            )}\n\n            {/* Due Date field for credit cards, loans, and monthly payments */}\n            {(accountType === \"credit-card\" || accountType === \"loan\" || accountType === \"monthly-payment\") && (\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date (Day of Month)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"31\" \n                        placeholder=\"15\" \n                        {...field} \n                        data-testid=\"input-due-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Income frequency and pay date */}\n            {accountType === \"income\" && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"frequency\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pay Frequency</FormLabel>\n                      <Select value={field.value} onValueChange={field.onChange} data-testid=\"select-frequency\">\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select frequency\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"biweekly\">Bi-weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"nextPayDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Next Pay Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field} \n                          data-testid=\"input-next-pay-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Loan type selector */}\n            {accountType === \"loan\" && (\n              <FormField\n                control={form.control}\n                name=\"loanType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Loan Type</FormLabel>\n                    <Select value={field.value} onValueChange={field.onChange} data-testid=\"select-loan-type\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select loan type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"personal\">Personal Loan</SelectItem>\n                        <SelectItem value=\"auto\">Auto Loan</SelectItem>\n                        <SelectItem value=\"student\">Student Loan</SelectItem>\n                        <SelectItem value=\"mortgage\">Mortgage</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Payment type selector */}\n            {accountType === \"monthly-payment\" && (\n              <FormField\n                control={form.control}\n                name=\"paymentType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Type</FormLabel>\n                    <Select value={field.value} onValueChange={field.onChange} data-testid=\"select-payment-type\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select payment type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"auto_loan\">Auto Loan</SelectItem>\n                        <SelectItem value=\"insurance\">Insurance</SelectItem>\n                        <SelectItem value=\"utilities\">Utilities</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"border-t border-neutral-200 pt-6\">\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\" \n                  onClick={() => setOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 bg-primary text-white hover:bg-blue-700\" \n                  disabled={isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {isPending ? \"Adding...\" : \"Add Account\"}\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":21960},"client/src/components/asset-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertAssetSchema, type InsertAsset } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertAssetSchema.extend({\n  currentValue: z.string().min(1, \"Current value is required\"),\n  purchasePrice: z.string().optional(),\n  appreciationRate: z.string().optional(),\n  depreciationRate: z.string().optional(),\n  ownershipPercentage: z.string().optional(),\n  expectedReturn: z.string().optional()\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AssetFormProps {\n  onSuccess?: () => void;\n  asset?: InsertAsset & { id: string };\n}\n\nconst ASSET_TYPES = [\n  { value: \"cash_liquid\", label: \"Cash & Liquid Assets\" },\n  { value: \"investments\", label: \"Investments\" },\n  { value: \"real_estate\", label: \"Real Estate\" },\n  { value: \"vehicles\", label: \"Vehicles\" },\n  { value: \"personal_property\", label: \"Personal Property\" },\n  { value: \"business\", label: \"Business Assets\" },\n  { value: \"receivables\", label: \"Receivables\" }\n];\n\nconst SUBCATEGORIES = {\n  cash_liquid: [\"checking\", \"savings\", \"emergency_fund\", \"money_market\", \"cd\", \"cash_on_hand\"],\n  investments: [\"stocks\", \"bonds\", \"mutual_funds\", \"etfs\", \"crypto\", \"401k\", \"ira\", \"roth_ira\", \"brokerage\"],\n  real_estate: [\"primary_home\", \"rental_property\", \"vacation_home\", \"raw_land\", \"commercial_property\"],\n  vehicles: [\"auto\", \"motorcycle\", \"boat\", \"rv\", \"aircraft\"],\n  personal_property: [\"jewelry\", \"art\", \"collectibles\", \"electronics\", \"furniture\", \"clothing\"],\n  business: [\"business_equity\", \"equipment\", \"inventory\", \"intellectual_property\"],\n  receivables: [\"loans_to_others\", \"accounts_receivable\", \"settlements\", \"insurance_claims\"]\n};\n\nconst RISK_LEVELS = [\n  { value: \"conservative\", label: \"Conservative\" },\n  { value: \"moderate\", label: \"Moderate\" },\n  { value: \"aggressive\", label: \"Aggressive\" }\n];\n\nexport function AssetForm({ onSuccess, asset }: AssetFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedType, setSelectedType] = useState(asset?.assetType || \"\");\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      assetName: asset?.assetName || \"\",\n      assetType: asset?.assetType || \"\",\n      subcategory: asset?.subcategory || \"\",\n      currentValue: asset?.currentValue || \"\",\n      purchasePrice: asset?.purchasePrice || \"\",\n      purchaseDate: asset?.purchaseDate || \"\",\n      appreciationRate: asset?.appreciationRate || \"0\",\n      depreciationRate: asset?.depreciationRate || \"0\",\n      ownershipPercentage: asset?.ownershipPercentage || \"100\",\n      isLiquid: asset?.isLiquid ?? false,\n      institution: asset?.institution || \"\",\n      accountNumber: asset?.accountNumber || \"\",\n      maturityDate: asset?.maturityDate || \"\",\n      expectedReturn: asset?.expectedReturn || \"\",\n      riskLevel: asset?.riskLevel || \"\",\n      marketValue: asset?.marketValue || \"\",\n      notes: asset?.notes || \"\"\n    }\n  });\n\n  const createAssetMutation = useMutation({\n    mutationFn: (data: InsertAsset) => apiRequest(\"POST\", \"/api/assets\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calculate-net-worth\"] });\n      toast({\n        title: \"Success\",\n        description: \"Asset created successfully\"\n      });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create asset\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateAssetMutation = useMutation({\n    mutationFn: (data: InsertAsset) => apiRequest(\"PUT\", `/api/assets/${asset?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calculate-net-worth\"] });\n      toast({\n        title: \"Success\",\n        description: \"Asset updated successfully\"\n      });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update asset\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: FormData) => {\n    const assetData: InsertAsset = {\n      ...data,\n      purchasePrice: data.purchasePrice || null,\n      purchaseDate: data.purchaseDate || null,\n      appreciationRate: data.appreciationRate || \"0\",\n      depreciationRate: data.depreciationRate || \"0\",\n      ownershipPercentage: data.ownershipPercentage || \"100\",\n      maturityDate: data.maturityDate || null,\n      expectedReturn: data.expectedReturn || null,\n      riskLevel: data.riskLevel || null,\n      marketValue: data.marketValue || null,\n      institution: data.institution || null,\n      accountNumber: data.accountNumber || null,\n      notes: data.notes || null\n    };\n\n    if (asset) {\n      updateAssetMutation.mutate(assetData);\n    } else {\n      createAssetMutation.mutate(assetData);\n    }\n  };\n\n  const isPending = createAssetMutation.isPending || updateAssetMutation.isPending;\n  const availableSubcategories = selectedType ? SUBCATEGORIES[selectedType as keyof typeof SUBCATEGORIES] || [] : [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{asset ? \"Edit Asset\" : \"Add New Asset\"}</CardTitle>\n        <CardDescription>\n          {asset ? \"Update asset information\" : \"Enter details for your new asset\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"assetName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Asset Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Chase Checking Account\" {...field} data-testid=\"input-asset-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"assetType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Asset Type</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        setSelectedType(value);\n                        form.setValue(\"subcategory\", \"\");\n                      }} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-asset-type\">\n                          <SelectValue placeholder=\"Select asset type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {ASSET_TYPES.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {availableSubcategories.length > 0 && (\n                <FormField\n                  control={form.control}\n                  name=\"subcategory\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subcategory</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-asset-subcategory\">\n                            <SelectValue placeholder=\"Select subcategory\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {availableSubcategories.map((sub) => (\n                            <SelectItem key={sub} value={sub}>\n                              {sub.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"currentValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Value ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"50000.00\" {...field} data-testid=\"input-current-value\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Purchase Information */}\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <FormField\n                control={form.control}\n                name=\"purchasePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purchase Price ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"45000.00\" {...field} data-testid=\"input-purchase-price\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"purchaseDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purchase Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} value={field.value || \"\"} data-testid=\"input-purchase-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"ownershipPercentage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ownership Percentage (%)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" min=\"0\" max=\"100\" placeholder=\"100\" {...field} data-testid=\"input-ownership-percentage\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Rates and Returns */}\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <FormField\n                control={form.control}\n                name=\"appreciationRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Appreciation Rate (% annual)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"3.5\" {...field} data-testid=\"input-appreciation-rate\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"depreciationRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Depreciation Rate (% annual)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"15\" {...field} data-testid=\"input-depreciation-rate\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expectedReturn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Expected Return (% annual)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"7\" {...field} data-testid=\"input-expected-return\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Additional Details */}\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"institution\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Institution/Bank</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Chase Bank\" {...field} data-testid=\"input-institution\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"accountNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Account Number (last 4 digits)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"1234\" maxLength={4} {...field} data-testid=\"input-account-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"maturityDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Maturity Date (for CDs, bonds)</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-maturity-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"riskLevel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Risk Level</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-risk-level\">\n                          <SelectValue placeholder=\"Select risk level\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {RISK_LEVELS.map((level) => (\n                          <SelectItem key={level.value} value={level.value}>\n                            {level.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"marketValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Market Value ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"52000.00\" {...field} data-testid=\"input-market-value\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isLiquid\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Liquid Asset</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Can this asset be easily converted to cash?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-liquid\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Additional notes about this asset...\"\n                      className=\"resize-none\"\n                      {...field}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onSuccess}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isPending}\n                data-testid=\"button-save-asset\"\n              >\n                {isPending ? \"Saving...\" : asset ? \"Update Asset\" : \"Save Asset\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18795},"client/src/components/budget-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { PieChart, Plus, AlertTriangle, TrendingUp, DollarSign } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { insertBudgetSchema, type Budget, type InsertBudget, type Expense } from \"@shared/schema\";\n\nconst categories = [\n  \"Housing\", \"Transportation\", \"Food\", \"Utilities\", \"Healthcare\", \"Entertainment\", \n  \"Shopping\", \"Personal Care\", \"Education\", \"Insurance\", \"Savings\", \"Other\"\n];\n\nexport function BudgetTracker() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n\n  const { data: budgets = [], isLoading } = useQuery<Budget[]>({\n    queryKey: [\"/api/budgets\"],\n  });\n\n  const { data: expenses = [] } = useQuery<Expense[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const form = useForm<InsertBudget>({\n    resolver: zodResolver(insertBudgetSchema),\n    defaultValues: {\n      category: \"\",\n      monthlyAllocation: \"\",\n      currentSpent: \"0\",\n      budgetMonth: currentMonth,\n      alertThreshold: \"80\",\n      isActive: true,\n    },\n  });\n\n  const createBudgetMutation = useMutation({\n    mutationFn: (data: InsertBudget) => apiRequest(\"POST\", \"/api/budgets\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateBudgetMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & Partial<InsertBudget>) =>\n      apiRequest(\"PUT\", `/api/budgets/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n\n  const onSubmit = (data: InsertBudget) => {\n    createBudgetMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: string | null) => {\n    if (!amount) return \"$0\";\n    return new Intl.NumberFormat('en-US', { \n      style: 'currency', \n      currency: 'USD',\n      minimumFractionDigits: 0 \n    }).format(parseFloat(amount));\n  };\n\n  const calculateSpentFromExpenses = (category: string, budgetMonth: string) => {\n    const monthStart = new Date(budgetMonth + \"-01\");\n    const monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);\n    \n    return expenses\n      .filter(expense => {\n        const expenseDate = new Date(expense.expenseDate);\n        return expense.category.toLowerCase() === category.toLowerCase() &&\n               expenseDate >= monthStart && expenseDate <= monthEnd;\n      })\n      .reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n  };\n\n  const getCurrentMonthBudgets = () => {\n    return budgets.filter(budget => budget.budgetMonth === currentMonth && budget.isActive);\n  };\n\n  const calculateProgress = (spent: number, allocated: string) => {\n    const allocation = parseFloat(allocated);\n    return allocation > 0 ? Math.min((spent / allocation) * 100, 100) : 0;\n  };\n\n  const isOverBudget = (spent: number, allocated: string, threshold: string) => {\n    const allocation = parseFloat(allocated);\n    const thresholdPercent = parseFloat(threshold);\n    return allocation > 0 && (spent / allocation) * 100 > thresholdPercent;\n  };\n\n  const totalBudget = getCurrentMonthBudgets().reduce((sum, budget) => sum + parseFloat(budget.monthlyAllocation), 0);\n  const totalSpent = getCurrentMonthBudgets().reduce((sum, budget) => {\n    const actualSpent = calculateSpentFromExpenses(budget.category, budget.budgetMonth);\n    return sum + actualSpent;\n  }, 0);\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n          <PieChart className=\"h-6 w-6\" />\n          Budget Tracker\n        </h2>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-budget\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Budget\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create Budget Category</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-budget-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {categories.map(category => (\n                            <SelectItem key={category} value={category}>{category}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"monthlyAllocation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Budget</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"500\" data-testid=\"input-monthly-allocation\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"alertThreshold\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Alert Threshold (%)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" min=\"0\" max=\"100\" placeholder=\"80\" data-testid=\"input-alert-threshold\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"budgetMonth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Budget Month</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"month\" data-testid=\"input-budget-month\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\" disabled={createBudgetMutation.isPending} data-testid=\"button-submit-budget\">\n                  {createBudgetMutation.isPending ? \"Creating...\" : \"Create Budget\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Budget Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card data-testid=\"card-total-budget\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Budget</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-budget\">\n              {formatCurrency(totalBudget.toString())}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              For {new Date(currentMonth).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-spent\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Spent</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-spent\">\n              {formatCurrency(totalSpent.toString())}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {totalBudget > 0 ? `${((totalSpent / totalBudget) * 100).toFixed(1)}% of budget` : \"No budget set\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-remaining-budget\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Remaining</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${totalBudget - totalSpent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {formatCurrency((totalBudget - totalSpent).toString())}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {totalBudget - totalSpent >= 0 ? \"Under budget\" : \"Over budget\"}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {getCurrentMonthBudgets().length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center h-32 space-y-2\">\n            <PieChart className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No budgets for this month</p>\n            <p className=\"text-sm text-muted-foreground\">Create your first budget to start tracking spending</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {getCurrentMonthBudgets().map((budget) => {\n            const actualSpent = calculateSpentFromExpenses(budget.category, budget.budgetMonth);\n            const progress = calculateProgress(actualSpent, budget.monthlyAllocation);\n            const overBudget = isOverBudget(actualSpent, budget.monthlyAllocation, budget.alertThreshold);\n            const remaining = parseFloat(budget.monthlyAllocation) - actualSpent;\n            \n            return (\n              <Card key={budget.id} data-testid={`card-budget-${budget.id}`} className={overBudget ? \"border-red-500\" : \"\"}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"text-lg\">{budget.category}</span>\n                    {overBudget && <AlertTriangle className=\"h-5 w-5 text-red-500\" />}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span className={progress > parseFloat(budget.alertThreshold) ? \"text-red-600\" : \"\"}>\n                        {progress.toFixed(1)}%\n                      </span>\n                    </div>\n                    <Progress \n                      value={progress} \n                      className={`h-2 ${progress > parseFloat(budget.alertThreshold) ? \"[&>div]:bg-red-500\" : \"\"}`} \n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Budgeted</span>\n                      <span className=\"font-medium\">{formatCurrency(budget.monthlyAllocation)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Spent</span>\n                      <span className={`font-medium ${overBudget ? \"text-red-600\" : \"\"}`}>\n                        {formatCurrency(actualSpent.toString())}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Remaining</span>\n                      <span className={`font-medium ${remaining >= 0 ? \"text-green-600\" : \"text-red-600\"}`}>\n                        {formatCurrency(remaining.toString())}\n                      </span>\n                    </div>\n                  </div>\n\n                  {overBudget && (\n                    <div className=\"flex items-center gap-2 text-sm text-red-600 bg-red-50 p-2 rounded\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      Over {budget.alertThreshold}% threshold\n                    </div>\n                  )}\n\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      const newAllocation = prompt(\"Enter new budget amount:\", budget.monthlyAllocation);\n                      if (newAllocation && !isNaN(parseFloat(newAllocation))) {\n                        updateBudgetMutation.mutate({ id: budget.id, monthlyAllocation: newAllocation });\n                      }\n                    }}\n                    data-testid={`button-update-budget-${budget.id}`}\n                  >\n                    Update Budget\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14861},"client/src/components/comprehensive-net-worth.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, TrendingUp, TrendingDown, DollarSign, Building, Car, Briefcase, CreditCard, GraduationCap, Receipt, Wallet } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line } from \"recharts\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AssetForm } from \"./asset-form\";\nimport { LiabilityForm } from \"./liability-form\";\nimport type { Asset, Liability, NetWorthSnapshot } from \"@shared/schema\";\n\nconst ASSET_COLORS = {\n  cash_liquid: \"#4f46e5\",\n  investments: \"#059669\",\n  real_estate: \"#dc2626\",\n  vehicles: \"#7c3aed\",\n  personal_property: \"#ea580c\",\n  business: \"#0891b2\"\n};\n\nconst LIABILITY_COLORS = {\n  consumer_debt: \"#ef4444\",\n  vehicle_loans: \"#f97316\",\n  real_estate: \"#eab308\",\n  education: \"#8b5cf6\",\n  business: \"#06b6d4\",\n  taxes_bills: \"#f43f5e\"\n};\n\nexport function ComprehensiveNetWorth() {\n  const queryClient = useQueryClient();\n  const [showAssetForm, setShowAssetForm] = useState(false);\n  const [showLiabilityForm, setShowLiabilityForm] = useState(false);\n\n  // Fetch data\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"]\n  });\n\n  const { data: liabilities = [], isLoading: liabilitiesLoading } = useQuery<Liability[]>({\n    queryKey: [\"/api/liabilities\"]\n  });\n\n  const { data: netWorthCalculation, isLoading: calculationLoading } = useQuery({\n    queryKey: [\"/api/calculate-net-worth\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/calculate-net-worth\");\n      return response.json();\n    }\n  });\n\n  const { data: snapshots = [], isLoading: snapshotsLoading } = useQuery<NetWorthSnapshot[]>({\n    queryKey: [\"/api/net-worth-snapshots\"]\n  });\n\n  // Create snapshot mutation\n  const createSnapshotMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/net-worth-snapshots\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/net-worth-snapshots\"] });\n    }\n  });\n\n  const isLoading = assetsLoading || liabilitiesLoading || calculationLoading;\n\n  // Prepare chart data\n  const assetsChartData = assets.length > 0 ? [\n    { name: \"Cash & Liquid\", value: parseFloat(netWorthCalculation?.cashLiquidAssets || \"0\"), color: ASSET_COLORS.cash_liquid },\n    { name: \"Investments\", value: parseFloat(netWorthCalculation?.investmentAssets || \"0\"), color: ASSET_COLORS.investments },\n    { name: \"Real Estate\", value: parseFloat(netWorthCalculation?.realEstateAssets || \"0\"), color: ASSET_COLORS.real_estate },\n    { name: \"Vehicles\", value: parseFloat(netWorthCalculation?.vehicleAssets || \"0\"), color: ASSET_COLORS.vehicles },\n    { name: \"Personal Property\", value: parseFloat(netWorthCalculation?.personalPropertyAssets || \"0\"), color: ASSET_COLORS.personal_property },\n    { name: \"Business\", value: parseFloat(netWorthCalculation?.businessAssets || \"0\"), color: ASSET_COLORS.business }\n  ].filter(item => item.value > 0) : [];\n\n  const liabilitiesChartData = liabilities.length > 0 ? [\n    { name: \"Consumer Debt\", value: parseFloat(netWorthCalculation?.consumerDebt || \"0\"), color: LIABILITY_COLORS.consumer_debt },\n    { name: \"Vehicle Loans\", value: parseFloat(netWorthCalculation?.vehicleLoans || \"0\"), color: LIABILITY_COLORS.vehicle_loans },\n    { name: \"Real Estate Debt\", value: parseFloat(netWorthCalculation?.realEstateDebt || \"0\"), color: LIABILITY_COLORS.real_estate },\n    { name: \"Education Debt\", value: parseFloat(netWorthCalculation?.educationDebt || \"0\"), color: LIABILITY_COLORS.education },\n    { name: \"Business Debt\", value: parseFloat(netWorthCalculation?.businessDebt || \"0\"), color: LIABILITY_COLORS.business },\n    { name: \"Taxes & Bills\", value: parseFloat(netWorthCalculation?.taxesBills || \"0\"), color: LIABILITY_COLORS.taxes_bills }\n  ].filter(item => item.value > 0) : [];\n\n  // Net worth trend data from snapshots\n  const trendData = snapshots.slice(0, 12).reverse().map(snapshot => ({\n    date: new Date(snapshot.snapshotDate).toLocaleDateString('en-US', { month: 'short', year: '2-digit' }),\n    netWorth: parseFloat(snapshot.netWorth),\n    assets: parseFloat(snapshot.totalAssets),\n    liabilities: parseFloat(snapshot.totalLiabilities)\n  }));\n\n  const handleCreateSnapshot = () => {\n    if (netWorthCalculation) {\n      createSnapshotMutation.mutate({\n        snapshotDate: new Date().toISOString().split('T')[0],\n        totalAssets: netWorthCalculation.totalAssets,\n        totalLiabilities: netWorthCalculation.totalLiabilities,\n        netWorth: netWorthCalculation.netWorth,\n        buyingPower: netWorthCalculation.buyingPower,\n        cashLiquidAssets: netWorthCalculation.cashLiquidAssets,\n        investmentAssets: netWorthCalculation.investmentAssets,\n        realEstateAssets: netWorthCalculation.realEstateAssets,\n        vehicleAssets: netWorthCalculation.vehicleAssets,\n        personalPropertyAssets: netWorthCalculation.personalPropertyAssets,\n        businessAssets: netWorthCalculation.businessAssets,\n        consumerDebt: netWorthCalculation.consumerDebt,\n        vehicleLoans: netWorthCalculation.vehicleLoans,\n        realEstateDebt: netWorthCalculation.realEstateDebt,\n        educationDebt: netWorthCalculation.educationDebt,\n        businessDebt: netWorthCalculation.businessDebt,\n        taxesBills: netWorthCalculation.taxesBills\n      });\n    }\n  };\n\n  const formatCurrency = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(num);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Net Worth Summary */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-assets\">\n              {formatCurrency(netWorthCalculation?.totalAssets || \"0\")}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Liabilities</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-liabilities\">\n              {formatCurrency(netWorthCalculation?.totalLiabilities || \"0\")}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Net Worth</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${\n              parseFloat(netWorthCalculation?.netWorth || \"0\") >= 0 ? \"text-green-600\" : \"text-red-600\"\n            }`} data-testid=\"text-net-worth\">\n              {formatCurrency(netWorthCalculation?.netWorth || \"0\")}\n            </div>\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Button\n                onClick={handleCreateSnapshot}\n                size=\"sm\"\n                disabled={createSnapshotMutation.isPending}\n                data-testid=\"button-create-snapshot\"\n              >\n                {createSnapshotMutation.isPending ? \"Saving...\" : \"Save Snapshot\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Buying Power</CardTitle>\n            <Wallet className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-buying-power\">\n              {formatCurrency(netWorthCalculation?.buyingPower || \"0\")}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Liquid assets + available credit\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"assets\">Assets</TabsTrigger>\n          <TabsTrigger value=\"liabilities\">Liabilities</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Assets Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Assets Breakdown</CardTitle>\n                <CardDescription>Distribution of your assets by category</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {assetsChartData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={assetsChartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${formatCurrency(value)}`}\n                      >\n                        {assetsChartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No assets added yet\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Liabilities Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Liabilities Breakdown</CardTitle>\n                <CardDescription>Distribution of your debts by category</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {liabilitiesChartData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={liabilitiesChartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${formatCurrency(value)}`}\n                      >\n                        {liabilitiesChartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No liabilities added yet\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"assets\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Asset Management</h3>\n            <Dialog open={showAssetForm} onOpenChange={setShowAssetForm}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-asset\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Asset\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Asset</DialogTitle>\n                  <DialogDescription>\n                    Add a new asset to track your net worth\n                  </DialogDescription>\n                </DialogHeader>\n                <AssetForm onSuccess={() => setShowAssetForm(false)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {assets.map((asset) => (\n              <Card key={asset.id}>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-2 rounded-lg bg-blue-100 dark:bg-blue-900\">\n                        {asset.assetType === 'cash_liquid' && <DollarSign className=\"h-5 w-5 text-blue-600\" />}\n                        {asset.assetType === 'investments' && <TrendingUp className=\"h-5 w-5 text-green-600\" />}\n                        {asset.assetType === 'real_estate' && <Building className=\"h-5 w-5 text-red-600\" />}\n                        {asset.assetType === 'vehicles' && <Car className=\"h-5 w-5 text-purple-600\" />}\n                        {asset.assetType === 'business' && <Briefcase className=\"h-5 w-5 text-blue-600\" />}\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\" data-testid={`text-asset-name-${asset.id}`}>{asset.assetName}</h4>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\">{asset.assetType.replace('_', ' ')}</Badge>\n                          {asset.subcategory && <Badge variant=\"secondary\">{asset.subcategory}</Badge>}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-semibold\" data-testid={`text-asset-value-${asset.id}`}>\n                        {formatCurrency(asset.currentValue)}\n                      </div>\n                      {asset.ownershipPercentage !== \"100\" && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          {asset.ownershipPercentage}% ownership\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            {assets.length === 0 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No assets added yet. Click \"Add Asset\" to get started.\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"liabilities\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Liability Management</h3>\n            <Dialog open={showLiabilityForm} onOpenChange={setShowLiabilityForm}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-liability\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Liability\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Liability</DialogTitle>\n                  <DialogDescription>\n                    Add a new debt or liability to track your net worth\n                  </DialogDescription>\n                </DialogHeader>\n                <LiabilityForm onSuccess={() => setShowLiabilityForm(false)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {liabilities.map((liability) => (\n              <Card key={liability.id}>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-2 rounded-lg bg-red-100 dark:bg-red-900\">\n                        {liability.liabilityType === 'consumer_debt' && <CreditCard className=\"h-5 w-5 text-red-600\" />}\n                        {liability.liabilityType === 'vehicle_loans' && <Car className=\"h-5 w-5 text-orange-600\" />}\n                        {liability.liabilityType === 'real_estate' && <Building className=\"h-5 w-5 text-yellow-600\" />}\n                        {liability.liabilityType === 'education' && <GraduationCap className=\"h-5 w-5 text-purple-600\" />}\n                        {liability.liabilityType === 'business' && <Briefcase className=\"h-5 w-5 text-blue-600\" />}\n                        {liability.liabilityType === 'taxes_bills' && <Receipt className=\"h-5 w-5 text-pink-600\" />}\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\" data-testid={`text-liability-name-${liability.id}`}>{liability.liabilityName}</h4>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\">{liability.liabilityType.replace('_', ' ')}</Badge>\n                          {liability.subcategory && <Badge variant=\"secondary\">{liability.subcategory}</Badge>}\n                        </div>\n                        {liability.interestRate && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {liability.interestRate}% APR\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-semibold text-red-600\" data-testid={`text-liability-balance-${liability.id}`}>\n                        {formatCurrency(liability.currentBalance)}\n                      </div>\n                      {liability.monthlyPayment && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          {formatCurrency(liability.monthlyPayment)}/month\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            {liabilities.length === 0 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No liabilities added yet. Click \"Add Liability\" to get started.\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Net Worth Trend</CardTitle>\n              <CardDescription>Track your net worth progress over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {trendData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <LineChart data={trendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"netWorth\" stroke=\"#2563eb\" strokeWidth={3} name=\"Net Worth\" />\n                    <Line type=\"monotone\" dataKey=\"assets\" stroke=\"#059669\" strokeWidth={2} name=\"Total Assets\" />\n                    <Line type=\"monotone\" dataKey=\"liabilities\" stroke=\"#dc2626\" strokeWidth={2} name=\"Total Liabilities\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No historical data yet. Create your first snapshot to start tracking trends.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21549},"client/src/components/debt-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\nimport { CreditCard, Loan } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\n\ninterface DebtChartProps {\n  creditCards: CreditCard[];\n  loans: Loan[];\n}\n\nconst COLORS = [\"#3B82F6\", \"#EF4444\", \"#10B981\", \"#F59E0B\", \"#8B5CF6\", \"#F97316\"];\n\nexport function DebtChart({ creditCards, loans }: DebtChartProps) {\n  const data = [\n    ...creditCards.map((card, index) => ({\n      name: card.name,\n      value: parseFloat(card.balance),\n      color: COLORS[index % COLORS.length],\n      type: \"Credit Card\",\n    })),\n    ...loans.map((loan, index) => ({\n      name: loan.name,\n      value: parseFloat(loan.balance),\n      color: COLORS[(creditCards.length + index) % COLORS.length],\n      type: loan.loanType,\n    })),\n  ];\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-3 border border-neutral-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-neutral-900\">{data.name}</p>\n          <p className=\"text-sm text-neutral-500\">{data.type}</p>\n          <p className=\"text-sm font-medium text-primary\">\n            {formatCurrency(data.value)}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (data.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center text-neutral-500\" data-testid=\"chart-empty-state\">\n        <div className=\"text-center\">\n          <PieChart size={48} className=\"mx-auto mb-2 text-neutral-300\" />\n          <p>No debt accounts to display</p>\n          <p className=\"text-sm\">Add a credit card or loan to see your debt distribution</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-64\" data-testid=\"debt-chart\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={100}\n            paddingAngle={2}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n          <Legend\n            verticalAlign=\"bottom\"\n            height={36}\n            formatter={(value, entry: any) => (\n              <span className=\"text-sm text-neutral-700\">{value}</span>\n            )}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":2655},"client/src/components/expense-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Receipt, Repeat } from \"lucide-react\";\nimport { insertExpenseSchema } from \"@shared/schema\";\n\nconst expenseFormSchema = insertExpenseSchema.extend({\n  amount: z.string().min(1, \"Amount is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  expenseDate: z.string().min(1, \"Date is required\"),\n  isRecurring: z.boolean().optional(),\n});\n\ntype ExpenseFormData = z.infer<typeof expenseFormSchema>;\n\ninterface ExpenseFormProps {\n  onExpenseAdded?: () => void;\n}\n\nexport function ExpenseForm({ onExpenseAdded }: ExpenseFormProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<ExpenseFormData>({\n    resolver: zodResolver(expenseFormSchema),\n    defaultValues: {\n      description: \"\",\n      amount: \"\",\n      category: \"\",\n      expenseDate: new Date().toISOString().split('T')[0],\n      paymentMethod: \"\",\n      notes: \"\",\n      isRecurring: false,\n    },\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: ExpenseFormData) => {\n      return apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      toast({ \n        title: \"Expense Added\", \n        description: \"Your expense has been recorded successfully.\" \n      });\n      setOpen(false);\n      form.reset();\n      onExpenseAdded?.();\n    },\n    onError: () => {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to add expense\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: ExpenseFormData) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"default\" \n          className=\"bg-primary text-white hover:bg-blue-700\"\n          data-testid=\"button-add-expense\"\n        >\n          <Plus size={16} className=\"mr-2\" />\n          Add Expense\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-add-expense\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Receipt size={20} className=\"text-primary\" />\n            <span>Add Expense</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"e.g., Electric bill, Groceries, Gas\" \n                      {...field} \n                      data-testid=\"input-expense-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Amount</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                        data-testid=\"input-expense-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expenseDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                        data-testid=\"input-expense-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select value={field.value} onValueChange={field.onChange} data-testid=\"select-expense-category\">\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"utilities\">Utilities</SelectItem>\n                      <SelectItem value=\"groceries\">Groceries</SelectItem>\n                      <SelectItem value=\"gas\">Gas & Transportation</SelectItem>\n                      <SelectItem value=\"dining\">Dining Out</SelectItem>\n                      <SelectItem value=\"entertainment\">Entertainment</SelectItem>\n                      <SelectItem value=\"shopping\">Shopping</SelectItem>\n                      <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                      <SelectItem value=\"insurance\">Insurance</SelectItem>\n                      <SelectItem value=\"subscriptions\">Subscriptions</SelectItem>\n                      <SelectItem value=\"home\">Home & Garden</SelectItem>\n                      <SelectItem value=\"education\">Education</SelectItem>\n                      <SelectItem value=\"travel\">Travel</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"paymentMethod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Payment Method (Optional)</FormLabel>\n                  <Select value={field.value || \"\"} onValueChange={field.onChange} data-testid=\"select-payment-method\">\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"How did you pay?\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"credit-card\">Credit Card</SelectItem>\n                      <SelectItem value=\"debit-card\">Debit Card</SelectItem>\n                      <SelectItem value=\"check\">Check</SelectItem>\n                      <SelectItem value=\"bank-transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"digital-wallet\">Digital Wallet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isRecurring\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base flex items-center space-x-2\">\n                      <Repeat size={16} />\n                      <span>Recurring Expense</span>\n                    </FormLabel>\n                    <div className=\"text-sm text-neutral-500\">\n                      Mark if this is a regular monthly bill or recurring purchase\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-recurring-expense\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Additional details about this expense...\" \n                      {...field} \n                      data-testid=\"textarea-expense-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-4 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\" \n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-expense\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-primary text-white hover:bg-blue-700\" \n                disabled={createExpenseMutation.isPending}\n                data-testid=\"button-submit-expense\"\n              >\n                {createExpenseMutation.isPending ? \"Adding...\" : \"Add Expense\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10607},"client/src/components/expense-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Receipt, Calendar, TrendingDown, DollarSign, Repeat, Clock } from \"lucide-react\";\nimport { Expense } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\n\ninterface ExpenseOverviewProps {\n  onAddExpense?: () => void;\n}\n\nexport function ExpenseOverview({ onAddExpense }: ExpenseOverviewProps) {\n  // Get current month expenses\n  const currentDate = new Date();\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n  const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n  \n  const startDate = firstDayOfMonth.toISOString().split('T')[0];\n  const endDate = lastDayOfMonth.toISOString().split('T')[0];\n\n  const { data: monthlyExpenses = [], isLoading: monthlyLoading } = useQuery({\n    queryKey: [\"/api/expenses\", { startDate, endDate }],\n    queryFn: () => fetch(`/api/expenses?startDate=${startDate}&endDate=${endDate}`).then(res => res.json()),\n  });\n\n  const { data: allExpenses = [], isLoading: allLoading } = useQuery({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const isLoading = monthlyLoading || allLoading;\n\n  // Calculate monthly total\n  const monthlyTotal = monthlyExpenses.reduce((sum: number, expense: Expense) => \n    sum + parseFloat(expense.amount), 0);\n\n  // Separate recurring and one-time expenses\n  const recurringExpenses = monthlyExpenses.filter((expense: Expense) => expense.isRecurring);\n  const oneTimeExpenses = monthlyExpenses.filter((expense: Expense) => !expense.isRecurring);\n  \n  const recurringTotal = recurringExpenses.reduce((sum: number, expense: Expense) => \n    sum + parseFloat(expense.amount), 0);\n  const oneTimeTotal = oneTimeExpenses.reduce((sum: number, expense: Expense) => \n    sum + parseFloat(expense.amount), 0);\n\n  // Calculate spending by category this month\n  const categorySpending = monthlyExpenses.reduce((acc: Record<string, number>, expense: Expense) => {\n    acc[expense.category] = (acc[expense.category] || 0) + parseFloat(expense.amount);\n    return acc;\n  }, {});\n\n  const topCategories = Object.entries(categorySpending)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5);\n\n  // Get recent expenses (last 7 days)\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  \n  const recentExpenses = allExpenses\n    .filter((expense: Expense) => new Date(expense.expenseDate) >= sevenDaysAgo)\n    .sort((a: Expense, b: Expense) => new Date(b.expenseDate).getTime() - new Date(a.expenseDate).getTime())\n    .slice(0, 5);\n\n  const getCategoryIcon = (category: string) => {\n    const icons: Record<string, string> = {\n      utilities: \"⚡\",\n      groceries: \"🛒\",\n      gas: \"⛽\",\n      dining: \"🍽️\",\n      entertainment: \"🎬\",\n      shopping: \"🛍️\",\n      healthcare: \"🏥\",\n      insurance: \"🛡️\",\n      subscriptions: \"📱\",\n      home: \"🏠\",\n      education: \"📚\",\n      travel: \"✈️\",\n    };\n    return icons[category] || \"💰\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"card-expense-overview\">\n        <CardHeader>\n          <CardTitle>Monthly Expenses</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-neutral-200 rounded w-32\"></div>\n            <div className=\"h-4 bg-neutral-200 rounded w-48\"></div>\n            <div className=\"space-y-2\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"h-12 bg-neutral-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-expense-overview\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Receipt className=\"text-primary\" size={20} />\n            <span>Monthly Expenses</span>\n          </CardTitle>\n          {onAddExpense && (\n            <Button variant=\"outline\" size=\"sm\" onClick={onAddExpense} data-testid=\"button-add-expense-overview\">\n              Add Expense\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {monthlyExpenses.length === 0 ? (\n          <div className=\"text-center py-6 text-neutral-500\" data-testid=\"empty-state-expenses\">\n            <Receipt size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n            <p className=\"text-lg font-medium mb-2\">No expenses this month</p>\n            <p className=\"text-sm mb-4\">Start tracking your spending to see where your money goes</p>\n            {onAddExpense && (\n              <Button onClick={onAddExpense} data-testid=\"button-add-first-expense\">\n                Add First Expense\n              </Button>\n            )}\n          </div>\n        ) : (\n          <>\n            {/* Monthly Total with Breakdown */}\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div>\n                  <div className=\"text-sm font-medium text-neutral-500\">This Month</div>\n                  <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-monthly-expenses\">\n                    {formatCurrency(monthlyTotal)}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm font-medium text-neutral-500\">Transactions</div>\n                  <div className=\"text-sm text-neutral-900\" data-testid=\"text-expense-count\">\n                    {monthlyExpenses.length} expenses\n                  </div>\n                  <div className=\"text-xs text-neutral-500 mt-1\">\n                    {currentDate.toLocaleDateString('en-US', { month: 'long' })}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Recurring vs One-time Breakdown */}\n              <div className=\"grid grid-cols-2 gap-3 pt-3 border-t border-red-200\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <Repeat size={14} className=\"text-blue-600\" />\n                    <span className=\"text-xs font-medium text-neutral-600\">Recurring</span>\n                  </div>\n                  <div className=\"text-sm font-semibold text-blue-600\" data-testid=\"text-recurring-total\">\n                    {formatCurrency(recurringTotal)}\n                  </div>\n                  <div className=\"text-xs text-neutral-500\">\n                    {recurringExpenses.length} bills\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <Clock size={14} className=\"text-green-600\" />\n                    <span className=\"text-xs font-medium text-neutral-600\">One-time</span>\n                  </div>\n                  <div className=\"text-sm font-semibold text-green-600\" data-testid=\"text-onetime-total\">\n                    {formatCurrency(oneTimeTotal)}\n                  </div>\n                  <div className=\"text-xs text-neutral-500\">\n                    {oneTimeExpenses.length} purchases\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Top Spending Categories */}\n            {topCategories.length > 0 && (\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-neutral-900\">Top Categories</h4>\n                {topCategories.map(([category, amount]) => (\n                  <div \n                    key={category} \n                    className=\"flex items-center justify-between p-3 border border-neutral-200 rounded-lg\"\n                    data-testid={`category-item-${category}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-2xl\">\n                        {getCategoryIcon(category)}\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-neutral-900 capitalize\" data-testid={`category-name-${category}`}>\n                          {category.replace('-', ' ')}\n                        </div>\n                        <div className=\"text-sm text-neutral-500\">\n                          {monthlyExpenses.filter((e: Expense) => e.category === category).length} transactions\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium text-red-600\" data-testid={`category-amount-${category}`}>\n                        {formatCurrency(amount)}\n                      </div>\n                      <div className=\"text-xs text-neutral-500\">\n                        {((amount / monthlyTotal) * 100).toFixed(0)}%\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Recent Expenses */}\n            {recentExpenses.length > 0 && (\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-neutral-900\">Recent Expenses</h4>\n                {recentExpenses.map((expense: Expense) => (\n                  <div \n                    key={expense.id} \n                    className=\"flex items-center justify-between p-2 hover:bg-neutral-50 rounded\"\n                    data-testid={`recent-expense-${expense.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-lg\">\n                        {getCategoryIcon(expense.category)}\n                      </div>\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"text-sm font-medium text-neutral-900\" data-testid={`expense-description-${expense.id}`}>\n                            {expense.description}\n                          </div>\n                          {expense.isRecurring && (\n                            <Repeat size={12} className=\"text-blue-500\" title=\"Recurring expense\" />\n                          )}\n                        </div>\n                        <div className=\"text-xs text-neutral-500\">\n                          {new Date(expense.expenseDate).toLocaleDateString('en-US', { \n                            month: 'short', \n                            day: 'numeric' \n                          })}\n                          {expense.paymentMethod && (\n                            <span className=\"ml-2 capitalize\">• {expense.paymentMethod.replace('-', ' ')}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-sm font-medium text-red-600\" data-testid={`expense-amount-${expense.id}`}>\n                      {formatCurrency(parseFloat(expense.amount))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11457},"client/src/components/income-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Calendar, Plus } from \"lucide-react\";\nimport { Income } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\n\ninterface IncomeOverviewProps {\n  onAddIncome?: () => void;\n}\n\nexport function IncomeOverview({ onAddIncome }: IncomeOverviewProps) {\n  const { data: incomes = [], isLoading } = useQuery({\n    queryKey: [\"/api/income\"],\n  });\n\n  const calculateMonthlyIncome = (incomes: Income[]) => {\n    return incomes.reduce((total, income) => {\n      const amount = parseFloat(income.amount);\n      switch (income.frequency) {\n        case \"weekly\": return total + (amount * 4.33);\n        case \"biweekly\": return total + (amount * 2.17);\n        case \"monthly\": return total + amount;\n        case \"yearly\": return total + (amount / 12);\n        default: return total + amount;\n      }\n    }, 0);\n  };\n\n  const getNextPayDate = (income: Income) => {\n    return new Date(income.nextPayDate);\n  };\n\n  const getDaysUntilPay = (income: Income) => {\n    const nextPay = new Date(income.nextPayDate);\n    const now = new Date();\n    const diffTime = nextPay.getTime() - now.getTime();\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const monthlyIncome = calculateMonthlyIncome(incomes);\n  const nextPayday = incomes.length > 0 \n    ? incomes.reduce((earliest, income) => {\n        const daysUntil = getDaysUntilPay(income);\n        const earliestDays = getDaysUntilPay(earliest);\n        return daysUntil < earliestDays ? income : earliest;\n      })\n    : null;\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"card-income-overview\">\n        <CardHeader>\n          <CardTitle>Income Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-neutral-200 rounded w-32\"></div>\n            <div className=\"h-4 bg-neutral-200 rounded w-48\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-income-overview\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"text-secondary\" size={20} />\n            <span>Income Overview</span>\n          </CardTitle>\n          {onAddIncome && (\n            <Button variant=\"outline\" size=\"sm\" onClick={onAddIncome} data-testid=\"button-add-income\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Income\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {incomes.length === 0 ? (\n          <div className=\"text-center py-6 text-neutral-500\" data-testid=\"empty-state-income\">\n            <TrendingUp size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n            <p className=\"text-lg font-medium mb-2\">No income sources</p>\n            <p className=\"text-sm mb-4\">Add your income sources to track your cash flow</p>\n            {onAddIncome && (\n              <Button onClick={onAddIncome} data-testid=\"button-add-first-income\">\n                <Plus size={16} className=\"mr-2\" />\n                Add First Income Source\n              </Button>\n            )}\n          </div>\n        ) : (\n          <>\n            {/* Monthly Income Summary */}\n            <div className=\"bg-secondary/10 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm font-medium text-neutral-500\">Monthly Income</div>\n                  <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-monthly-income\">\n                    {formatCurrency(monthlyIncome)}\n                  </div>\n                </div>\n                {nextPayday && (\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-neutral-500\">Next Payday</div>\n                    <div className=\"text-sm text-neutral-900\" data-testid=\"text-next-payday\">\n                      {getNextPayDate(nextPayday).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric' \n                      })}\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                      {getDaysUntilPay(nextPayday) === 0 ? \"Today\" : \n                       getDaysUntilPay(nextPayday) === 1 ? \"Tomorrow\" :\n                       `${getDaysUntilPay(nextPayday)} days`}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Income Sources List */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-neutral-900\">Income Sources</h4>\n              {incomes.map((income: Income) => (\n                <div \n                  key={income.id} \n                  className=\"flex items-center justify-between p-3 border border-neutral-200 rounded-lg\"\n                  data-testid={`income-item-${income.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                      <TrendingUp className=\"text-secondary\" size={16} />\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-neutral-900\" data-testid={`income-name-${income.id}`}>\n                        {income.name}\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-sm text-neutral-500\">\n                        <span data-testid={`income-amount-${income.id}`}>\n                          {formatCurrency(parseFloat(income.amount))}\n                        </span>\n                        <span>•</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {income.frequency}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm text-neutral-500\">Next Pay</div>\n                    <div className=\"text-sm font-medium text-neutral-900\">\n                      {getNextPayDate(income).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric' \n                      })}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6887},"client/src/components/investment-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { TrendingUp, Plus, BarChart3, DollarSign, Target, AlertCircle } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { insertInvestmentSchema, type Investment, type InsertInvestment } from \"@shared/schema\";\n\nexport function InvestmentTracker() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: investments = [], isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n\n  const form = useForm<InsertInvestment>({\n    resolver: zodResolver(insertInvestmentSchema),\n    defaultValues: {\n      accountName: \"\",\n      accountType: \"brokerage\",\n      balance: \"\",\n      contributionAmount: \"0\",\n      contributionFrequency: \"monthly\",\n      employerMatch: \"0\",\n      riskLevel: \"moderate\",\n      expectedReturn: \"7\",\n    },\n  });\n\n  const createInvestmentMutation = useMutation({\n    mutationFn: (data: InsertInvestment) => apiRequest(\"POST\", \"/api/investments\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateInvestmentMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & Partial<InsertInvestment>) =>\n      apiRequest(\"PUT\", `/api/investments/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n    },\n  });\n\n  const onSubmit = (data: InsertInvestment) => {\n    createInvestmentMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: string | null) => {\n    if (!amount) return \"$0\";\n    return new Intl.NumberFormat('en-US', { \n      style: 'currency', \n      currency: 'USD',\n      minimumFractionDigits: 0 \n    }).format(parseFloat(amount));\n  };\n\n  const calculateAnnualContribution = (amount: string | null, frequency: string | null) => {\n    if (!amount || !frequency) return 0;\n    const monthlyAmount = parseFloat(amount);\n    switch (frequency) {\n      case \"weekly\": return monthlyAmount * 52;\n      case \"biweekly\": return monthlyAmount * 26;\n      case \"monthly\": return monthlyAmount * 12;\n      case \"quarterly\": return monthlyAmount * 4;\n      case \"annually\": return monthlyAmount;\n      default: return monthlyAmount * 12;\n    }\n  };\n\n  const calculateProjectedValue = (balance: string | null, contribution: string | null, frequency: string | null, returnRate: string | null, years: number = 10) => {\n    if (!balance || !contribution || !returnRate) return 0;\n    \n    const currentBalance = parseFloat(balance);\n    const annualContribution = calculateAnnualContribution(contribution, frequency);\n    const rate = parseFloat(returnRate) / 100;\n    \n    // Future value with compound interest and regular contributions\n    const futureValue = currentBalance * Math.pow(1 + rate, years) + \n                       annualContribution * ((Math.pow(1 + rate, years) - 1) / rate);\n    \n    return futureValue;\n  };\n\n  const getTotalPortfolioValue = () => {\n    return investments.reduce((sum, inv) => sum + parseFloat(inv.balance || \"0\"), 0);\n  };\n\n  const getTotalAnnualContributions = () => {\n    return investments.reduce((sum, inv) => \n      sum + calculateAnnualContribution(inv.contributionAmount, inv.contributionFrequency), 0);\n  };\n\n  const getRiskColor = (riskLevel: string | null) => {\n    switch (riskLevel) {\n      case \"conservative\": return \"text-green-600\";\n      case \"moderate\": return \"text-yellow-600\";\n      case \"aggressive\": return \"text-red-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n          <BarChart3 className=\"h-6 w-6\" />\n          Investment Portfolio\n        </h2>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-investment\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Investment\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Investment Account</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"accountName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Account Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Fidelity 401k\" data-testid=\"input-account-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"accountType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Account Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-account-type\">\n                            <SelectValue placeholder=\"Select account type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"401k\">401(k)</SelectItem>\n                          <SelectItem value=\"ira\">Traditional IRA</SelectItem>\n                          <SelectItem value=\"roth_ira\">Roth IRA</SelectItem>\n                          <SelectItem value=\"brokerage\">Brokerage</SelectItem>\n                          <SelectItem value=\"crypto\">Cryptocurrency</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"balance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Balance</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"25000\" data-testid=\"input-balance\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"contributionAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contribution Amount</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"500\" data-testid=\"input-contribution-amount\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"contributionFrequency\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Frequency</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-contribution-frequency\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"biweekly\">Bi-weekly</SelectItem>\n                            <SelectItem value=\"monthly\">Monthly</SelectItem>\n                            <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                            <SelectItem value=\"annually\">Annually</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"riskLevel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Risk Level</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-risk-level\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"conservative\">Conservative</SelectItem>\n                            <SelectItem value=\"moderate\">Moderate</SelectItem>\n                            <SelectItem value=\"aggressive\">Aggressive</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"expectedReturn\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Expected Return (%)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.1\" placeholder=\"7\" data-testid=\"input-expected-return\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"employerMatch\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employer Match (%)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.1\" placeholder=\"4\" data-testid=\"input-employer-match\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\" disabled={createInvestmentMutation.isPending} data-testid=\"button-submit-investment\">\n                  {createInvestmentMutation.isPending ? \"Adding...\" : \"Add Investment\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Portfolio Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card data-testid=\"card-total-portfolio\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Portfolio</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-portfolio\">\n              {formatCurrency(getTotalPortfolioValue().toString())}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {investments.length} accounts\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-annual-contributions\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Annual Contributions</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-annual-contributions\">\n              {formatCurrency(getTotalAnnualContributions().toString())}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total yearly investment\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-projected-growth\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">10-Year Projection</CardTitle>\n            <Target className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-projected-growth\">\n              {formatCurrency(\n                investments.reduce((sum, inv) => \n                  sum + calculateProjectedValue(inv.balance, inv.contributionAmount, inv.contributionFrequency, inv.expectedReturn), 0\n                ).toString()\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              With current contributions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {investments.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center h-32 space-y-2\">\n            <BarChart3 className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No investment accounts yet</p>\n            <p className=\"text-sm text-muted-foreground\">Add your first investment account to start tracking</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {investments.map((investment) => {\n            const annualContribution = calculateAnnualContribution(investment.contributionAmount, investment.contributionFrequency);\n            const projectedValue = calculateProjectedValue(investment.balance, investment.contributionAmount, investment.contributionFrequency, investment.expectedReturn);\n            \n            return (\n              <Card key={investment.id} data-testid={`card-investment-${investment.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"text-lg\">{investment.accountName}</span>\n                    <span className=\"text-sm font-normal text-muted-foreground capitalize\">\n                      {investment.accountType.replace('_', ' ')}\n                    </span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Current Balance</span>\n                      <span className=\"font-medium\">{formatCurrency(investment.balance)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Annual Contribution</span>\n                      <span className=\"font-medium\">{formatCurrency(annualContribution.toString())}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Expected Return</span>\n                      <span className=\"font-medium\">{investment.expectedReturn}%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2 border-t pt-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Risk Level</span>\n                      <span className={`font-medium capitalize ${getRiskColor(investment.riskLevel)}`}>\n                        {investment.riskLevel}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">10-Year Projection</span>\n                      <span className=\"font-medium text-green-600\">\n                        {formatCurrency(projectedValue.toString())}\n                      </span>\n                    </div>\n                  </div>\n\n                  {parseFloat(investment.employerMatch || \"0\") > 0 && (\n                    <div className=\"flex items-center gap-2 text-sm text-green-600 bg-green-50 p-2 rounded\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      {investment.employerMatch}% employer match\n                    </div>\n                  )}\n\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      const newBalance = prompt(\"Enter new balance:\", investment.balance || \"\");\n                      if (newBalance && !isNaN(parseFloat(newBalance))) {\n                        updateInvestmentMutation.mutate({ id: investment.id, balance: newBalance });\n                      }\n                    }}\n                    data-testid={`button-update-investment-${investment.id}`}\n                  >\n                    Update Balance\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":18862},"client/src/components/liability-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertLiabilitySchema, type InsertLiability } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertLiabilitySchema.extend({\n  currentBalance: z.string().min(1, \"Current balance is required\"),\n  originalAmount: z.string().optional(),\n  interestRate: z.string().optional(),\n  minimumPayment: z.string().optional(),\n  monthlyPayment: z.string().optional(),\n  creditLimit: z.string().optional()\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface LiabilityFormProps {\n  onSuccess?: () => void;\n  liability?: InsertLiability & { id: string };\n}\n\nconst LIABILITY_TYPES = [\n  { value: \"consumer_debt\", label: \"Consumer Debt\" },\n  { value: \"vehicle_loans\", label: \"Vehicle Loans\" },\n  { value: \"real_estate\", label: \"Real Estate Loans\" },\n  { value: \"education\", label: \"Education Debt\" },\n  { value: \"business\", label: \"Business Debt\" },\n  { value: \"taxes_bills\", label: \"Taxes & Bills\" }\n];\n\nconst SUBCATEGORIES = {\n  consumer_debt: [\"credit_card\", \"personal_loan\", \"bnpl\", \"payday_loan\", \"line_of_credit\"],\n  vehicle_loans: [\"auto_loan\", \"motorcycle_loan\", \"boat_loan\", \"rv_loan\"],\n  real_estate: [\"mortgage\", \"heloc\", \"home_equity_loan\", \"second_mortgage\"],\n  education: [\"student_loan\", \"parent_plus\", \"private_education_loan\"],\n  business: [\"business_loan\", \"business_line_of_credit\", \"equipment_financing\", \"merchant_cash_advance\"],\n  taxes_bills: [\"unpaid_taxes\", \"medical_bills\", \"legal_fees\", \"utility_bills\"]\n};\n\nconst PAYMENT_FREQUENCIES = [\n  { value: \"monthly\", label: \"Monthly\" },\n  { value: \"bi_weekly\", label: \"Bi-weekly\" },\n  { value: \"weekly\", label: \"Weekly\" },\n  { value: \"quarterly\", label: \"Quarterly\" },\n  { value: \"annually\", label: \"Annually\" }\n];\n\nconst PAYOFF_STRATEGIES = [\n  { value: \"minimum\", label: \"Minimum Payments\" },\n  { value: \"avalanche\", label: \"Debt Avalanche (Highest Interest First)\" },\n  { value: \"snowball\", label: \"Debt Snowball (Smallest Balance First)\" }\n];\n\nexport function LiabilityForm({ onSuccess, liability }: LiabilityFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedType, setSelectedType] = useState(liability?.liabilityType || \"\");\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      liabilityName: liability?.liabilityName || \"\",\n      liabilityType: liability?.liabilityType || \"\",\n      subcategory: liability?.subcategory || \"\",\n      currentBalance: liability?.currentBalance || \"\",\n      originalAmount: liability?.originalAmount || \"\",\n      interestRate: liability?.interestRate || \"\",\n      minimumPayment: liability?.minimumPayment || \"\",\n      monthlyPayment: liability?.monthlyPayment || \"\",\n      dueDate: liability?.dueDate || \"\",\n      paymentFrequency: liability?.paymentFrequency || \"monthly\",\n      lender: liability?.lender || \"\",\n      accountNumber: liability?.accountNumber || \"\",\n      loanTerm: liability?.loanTerm || undefined,\n      remainingTerm: liability?.remainingTerm || undefined,\n      payoffStrategy: liability?.payoffStrategy || \"\",\n      isSecured: liability?.isSecured ?? false,\n      collateral: liability?.collateral || \"\",\n      taxDeductible: liability?.taxDeductible ?? false,\n      creditLimit: liability?.creditLimit || \"\",\n      notes: liability?.notes || \"\"\n    }\n  });\n\n  const createLiabilityMutation = useMutation({\n    mutationFn: (data: InsertLiability) => apiRequest(\"POST\", \"/api/liabilities\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/liabilities\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calculate-net-worth\"] });\n      toast({\n        title: \"Success\",\n        description: \"Liability created successfully\"\n      });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create liability\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateLiabilityMutation = useMutation({\n    mutationFn: (data: InsertLiability) => apiRequest(\"PUT\", `/api/liabilities/${liability?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/liabilities\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calculate-net-worth\"] });\n      toast({\n        title: \"Success\",\n        description: \"Liability updated successfully\"\n      });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update liability\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: FormData) => {\n    const liabilityData: InsertLiability = {\n      ...data,\n      originalAmount: data.originalAmount || null,\n      interestRate: data.interestRate || null,\n      minimumPayment: data.minimumPayment || null,\n      monthlyPayment: data.monthlyPayment || null,\n      dueDate: data.dueDate || null,\n      lender: data.lender || null,\n      accountNumber: data.accountNumber || null,\n      loanTerm: data.loanTerm || null,\n      remainingTerm: data.remainingTerm || null,\n      payoffStrategy: data.payoffStrategy || null,\n      collateral: data.collateral || null,\n      creditLimit: data.creditLimit || null,\n      notes: data.notes || null\n    };\n\n    if (liability) {\n      updateLiabilityMutation.mutate(liabilityData);\n    } else {\n      createLiabilityMutation.mutate(liabilityData);\n    }\n  };\n\n  const isPending = createLiabilityMutation.isPending || updateLiabilityMutation.isPending;\n  const availableSubcategories = selectedType ? SUBCATEGORIES[selectedType as keyof typeof SUBCATEGORIES] || [] : [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{liability ? \"Edit Liability\" : \"Add New Liability\"}</CardTitle>\n        <CardDescription>\n          {liability ? \"Update liability information\" : \"Enter details for your new debt or liability\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"liabilityName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Liability Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Chase Credit Card\" {...field} data-testid=\"input-liability-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"liabilityType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Liability Type</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        setSelectedType(value);\n                        form.setValue(\"subcategory\", \"\");\n                      }} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-liability-type\">\n                          <SelectValue placeholder=\"Select liability type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {LIABILITY_TYPES.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {availableSubcategories.length > 0 && (\n                <FormField\n                  control={form.control}\n                  name=\"subcategory\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subcategory</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-liability-subcategory\">\n                            <SelectValue placeholder=\"Select subcategory\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {availableSubcategories.map((sub) => (\n                            <SelectItem key={sub} value={sub}>\n                              {sub.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"currentBalance\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Balance ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"5000.00\" {...field} data-testid=\"input-current-balance\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Loan Details */}\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <FormField\n                control={form.control}\n                name=\"originalAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Original Amount ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"10000.00\" {...field} data-testid=\"input-original-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"interestRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Interest Rate (% APR)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"18.99\" {...field} data-testid=\"input-interest-rate\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"creditLimit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Credit Limit ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"15000.00\" {...field} data-testid=\"input-credit-limit\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Payment Information */}\n            <div className=\"grid gap-4 md:grid-cols-4\">\n              <FormField\n                control={form.control}\n                name=\"minimumPayment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Minimum Payment ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"125.00\" {...field} data-testid=\"input-minimum-payment\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"monthlyPayment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Monthly Payment ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"250.00\" {...field} data-testid=\"input-monthly-payment\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentFrequency\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Frequency</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-frequency\">\n                          <SelectValue placeholder=\"Select frequency\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {PAYMENT_FREQUENCIES.map((freq) => (\n                          <SelectItem key={freq.value} value={freq.value}>\n                            {freq.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Lender and Account Information */}\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"lender\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Lender/Institution</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Chase Bank\" {...field} data-testid=\"input-lender\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"accountNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Account Number (last 4 digits)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"1234\" maxLength={4} {...field} data-testid=\"input-account-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Loan Terms */}\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <FormField\n                control={form.control}\n                name=\"loanTerm\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Loan Term (months)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"60\" \n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        data-testid=\"input-loan-term\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"remainingTerm\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Remaining Term (months)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"48\" \n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        data-testid=\"input-remaining-term\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"payoffStrategy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payoff Strategy</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payoff-strategy\">\n                          <SelectValue placeholder=\"Select strategy\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {PAYOFF_STRATEGIES.map((strategy) => (\n                          <SelectItem key={strategy.value} value={strategy.value}>\n                            {strategy.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Security and Tax Information */}\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"isSecured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Secured Debt</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Is this debt secured by collateral?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-secured\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"taxDeductible\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Tax Deductible</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Is the interest tax deductible?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-tax-deductible\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"collateral\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Collateral (if secured)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., 2020 Honda Civic\" {...field} data-testid=\"input-collateral\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Additional notes about this liability...\"\n                      className=\"resize-none\"\n                      {...field}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onSuccess}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isPending}\n                data-testid=\"button-save-liability\"\n              >\n                {isPending ? \"Saving...\" : liability ? \"Update Liability\" : \"Save Liability\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":22354},"client/src/components/net-worth-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, Banknote, Target } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Asset, Investment, CreditCard, Loan } from \"@shared/schema\";\n\nexport function NetWorthSummary() {\n  const { data: assets = [] } = useQuery<Asset[]>({ queryKey: [\"/api/assets\"] });\n  const { data: investments = [] } = useQuery<Investment[]>({ queryKey: [\"/api/investments\"] });\n  const { data: creditCards = [] } = useQuery<CreditCard[]>({ queryKey: [\"/api/credit-cards\"] });\n  const { data: loans = [] } = useQuery<Loan[]>({ queryKey: [\"/api/loans\"] });\n\n  // Calculate total assets\n  const totalAssets = assets.reduce((sum, asset) => sum + parseFloat(asset.currentValue), 0) +\n                     investments.reduce((sum, inv) => sum + parseFloat(inv.balance), 0);\n\n  // Calculate total liabilities\n  const totalLiabilities = creditCards.reduce((sum, cc) => sum + parseFloat(cc.balance), 0) +\n                          loans.reduce((sum, loan) => sum + parseFloat(loan.balance), 0);\n\n  // Calculate net worth\n  const netWorth = totalAssets - totalLiabilities;\n\n  // Calculate liquid vs non-liquid assets\n  const liquidAssets = assets\n    .filter(asset => asset.isLiquid)\n    .reduce((sum, asset) => sum + parseFloat(asset.currentValue), 0);\n  \n  const nonLiquidAssets = totalAssets - liquidAssets;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', { \n      style: 'currency', \n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0 \n    }).format(amount);\n  };\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n      <Card data-testid=\"card-net-worth\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Net Worth</CardTitle>\n          {netWorth >= 0 ? (\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          ) : (\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          )}\n        </CardHeader>\n        <CardContent>\n          <div className={`text-2xl font-bold ${netWorth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n            {formatCurrency(netWorth)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Assets minus liabilities\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-total-assets\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-green-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-assets\">\n            {formatCurrency(totalAssets)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Including investments\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-total-liabilities\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Liabilities</CardTitle>\n          <TrendingDown className=\"h-4 w-4 text-red-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-liabilities\">\n            {formatCurrency(totalLiabilities)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Credit cards and loans\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-liquid-assets\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Liquid Assets</CardTitle>\n          <Banknote className=\"h-4 w-4 text-blue-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-liquid-assets\">\n            {formatCurrency(liquidAssets)}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Available for immediate use\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4350},"client/src/components/payment-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\nimport { PiggyBank } from \"lucide-react\";\n\nconst paymentSchema = z.object({\n  amount: z.string().min(1, \"Payment amount is required\"),\n  paymentDate: z.string().min(1, \"Payment date is required\"),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\ninterface PaymentDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  account: any;\n  accountType: string;\n}\n\nexport function PaymentDialog({ open, onOpenChange, account, accountType }: PaymentDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      amount: \"\",\n      paymentDate: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    },\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      // Record the payment\n      await apiRequest(\"POST\", \"/api/payments\", {\n        accountId: account.id,\n        accountType: accountType,\n        amount: data.amount,\n        paymentDate: data.paymentDate,\n        notes: data.notes || null,\n      });\n\n      // Update the account balance\n      if (accountType === \"credit-card\") {\n        const newBalance = Math.max(0, parseFloat(account.balance) - parseFloat(data.amount));\n        await apiRequest(\"PATCH\", `/api/credit-cards/${account.id}`, {\n          balance: newBalance.toString(),\n        });\n      } else if (accountType === \"loan\") {\n        const newBalance = Math.max(0, parseFloat(account.balance) - parseFloat(data.amount));\n        await apiRequest(\"PATCH\", `/api/loans/${account.id}`, {\n          balance: newBalance.toString(),\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${accountType}s`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      toast({ \n        title: \"Payment Recorded\", \n        description: `Payment of ${formatCurrency(parseFloat(form.getValues().amount))} has been recorded successfully.` \n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to record payment\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentFormData) => {\n    recordPaymentMutation.mutate(data);\n  };\n\n  const accountName = account?.name || \"Account\";\n  const currentBalance = account?.balance ? parseFloat(account.balance) : 0;\n  const paymentAmount = form.watch(\"amount\");\n  const newBalance = paymentAmount ? Math.max(0, currentBalance - parseFloat(paymentAmount)) : currentBalance;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-record-payment\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <PiggyBank size={20} className=\"text-primary\" />\n            <span>Record Payment</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mb-4 p-4 bg-neutral-50 rounded-lg\">\n          <div className=\"text-sm font-medium text-neutral-900\">{accountName}</div>\n          <div className=\"text-xs text-neutral-500 mt-1\">\n            Current Balance: {formatCurrency(currentBalance)}\n          </div>\n          {paymentAmount && (\n            <div className=\"text-xs text-primary mt-1\">\n              New Balance: {formatCurrency(newBalance)}\n            </div>\n          )}\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Payment Amount</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      step=\"0.01\" \n                      placeholder=\"0.00\" \n                      {...field} \n                      data-testid=\"input-payment-amount\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"paymentDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Payment Date</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field} \n                      data-testid=\"input-payment-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Add notes about this payment...\" \n                      {...field} \n                      data-testid=\"textarea-payment-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-4 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-payment\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-primary text-white hover:bg-blue-700\" \n                disabled={recordPaymentMutation.isPending}\n                data-testid=\"button-submit-payment\"\n              >\n                {recordPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6938},"client/src/components/savings-goals.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Target, Plus, Calendar, DollarSign, TrendingUp } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { insertSavingsGoalSchema, type SavingsGoal, type InsertSavingsGoal } from \"@shared/schema\";\n\nexport function SavingsGoals() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: savingsGoals = [], isLoading } = useQuery<SavingsGoal[]>({\n    queryKey: [\"/api/savings-goals\"],\n  });\n\n  const form = useForm<InsertSavingsGoal>({\n    resolver: zodResolver(insertSavingsGoalSchema),\n    defaultValues: {\n      goalName: \"\",\n      targetAmount: \"\",\n      currentAmount: \"0\",\n      monthlyContribution: \"0\",\n      goalType: \"emergency_fund\",\n      isActive: true,\n    },\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: (data: InsertSavingsGoal) => apiRequest(\"POST\", \"/api/savings-goals\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-goals\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateGoalMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & Partial<InsertSavingsGoal>) =>\n      apiRequest(\"PUT\", `/api/savings-goals/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-goals\"] });\n    },\n  });\n\n  const onSubmit = (data: InsertSavingsGoal) => {\n    createGoalMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: string | null) => {\n    if (!amount) return \"$0\";\n    return new Intl.NumberFormat('en-US', { \n      style: 'currency', \n      currency: 'USD',\n      minimumFractionDigits: 0 \n    }).format(parseFloat(amount));\n  };\n\n  const calculateProgress = (current: string | null, target: string | null) => {\n    if (!current || !target) return 0;\n    const currentAmount = parseFloat(current);\n    const targetAmount = parseFloat(target);\n    return targetAmount > 0 ? Math.min((currentAmount / targetAmount) * 100, 100) : 0;\n  };\n\n  const calculateTimeToGoal = (current: string | null, target: string | null, monthly: string | null) => {\n    if (!current || !target || !monthly) return \"N/A\";\n    const currentAmount = parseFloat(current);\n    const targetAmount = parseFloat(target);\n    const monthlyContribution = parseFloat(monthly);\n    \n    if (monthlyContribution <= 0) return \"N/A\";\n    \n    const remaining = targetAmount - currentAmount;\n    if (remaining <= 0) return \"Goal reached!\";\n    \n    const months = Math.ceil(remaining / monthlyContribution);\n    return `${months} months`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Target className=\"h-6 w-6\" />\n          Savings Goals\n        </h2>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-goal\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Goal\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create Savings Goal</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"goalName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Goal Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Emergency Fund\" data-testid=\"input-goal-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"goalType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Goal Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-goal-type\">\n                            <SelectValue placeholder=\"Select goal type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"emergency_fund\">Emergency Fund</SelectItem>\n                          <SelectItem value=\"vacation\">Vacation</SelectItem>\n                          <SelectItem value=\"house\">House Down Payment</SelectItem>\n                          <SelectItem value=\"car\">Car Purchase</SelectItem>\n                          <SelectItem value=\"retirement\">Retirement</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"targetAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Target Amount</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"10000\" data-testid=\"input-target-amount\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"currentAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Current Amount</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0\" data-testid=\"input-current-amount\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"monthlyContribution\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Contribution</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"500\" data-testid=\"input-monthly-contribution\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"targetDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Target Date (Optional)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" data-testid=\"input-target-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\" disabled={createGoalMutation.isPending} data-testid=\"button-submit-goal\">\n                  {createGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {savingsGoals.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center h-32 space-y-2\">\n            <Target className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No savings goals yet</p>\n            <p className=\"text-sm text-muted-foreground\">Add your first goal to start tracking progress</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {savingsGoals.map((goal) => {\n            const progress = calculateProgress(goal.currentAmount, goal.targetAmount);\n            const timeToGoal = calculateTimeToGoal(goal.currentAmount, goal.targetAmount, goal.monthlyContribution);\n            \n            return (\n              <Card key={goal.id} data-testid={`card-goal-${goal.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"text-lg\">{goal.goalName}</span>\n                    <span className=\"text-sm font-normal text-muted-foreground capitalize\">\n                      {goal.goalType.replace('_', ' ')}\n                    </span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span>{progress.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={progress} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Current</span>\n                      <span className=\"font-medium\">{formatCurrency(goal.currentAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Target</span>\n                      <span className=\"font-medium\">{formatCurrency(goal.targetAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Monthly</span>\n                      <span className=\"font-medium\">{formatCurrency(goal.monthlyContribution)}</span>\n                    </div>\n                  </div>\n\n                  {goal.targetDate && (\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Calendar className=\"h-4 w-4\" />\n                      Target: {new Date(goal.targetDate).toLocaleDateString()}\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    Time to goal: {timeToGoal}\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className=\"flex-1\"\n                      onClick={() => {\n                        const newAmount = prompt(\"Enter new current amount:\", goal.currentAmount);\n                        if (newAmount && !isNaN(parseFloat(newAmount))) {\n                          updateGoalMutation.mutate({ id: goal.id, currentAmount: newAmount });\n                        }\n                      }}\n                      data-testid={`button-update-${goal.id}`}\n                    >\n                      <DollarSign className=\"h-4 w-4 mr-1\" />\n                      Update\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12777},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  CreditCard, \n  Building2, \n  Calendar, \n  PieChart,\n  BarChart3 \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Credit Cards\", href: \"/credit-cards\", icon: CreditCard },\n  { name: \"Loans\", href: \"/loans\", icon: Building2 },\n  { name: \"Payment Schedule\", href: \"/schedule\", icon: Calendar },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-neutral-200 hidden lg:block\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <BarChart3 className=\"text-white text-sm\" size={16} />\n          </div>\n          <h1 className=\"text-xl font-bold text-neutral-900\">FinanceTracker</h1>\n        </div>\n        \n        <nav className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors cursor-pointer\",\n                    isActive\n                      ? \"bg-primary text-white\"\n                      : \"hover:bg-neutral-100 text-neutral-700\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  <item.icon size={20} />\n                  <span>{item.name}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":1817},"client/src/components/upcoming-payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  CreditCard as CreditCardIcon, \n  Building2, \n  Car, \n  Shield, \n  Zap, \n  DollarSign,\n  Calendar,\n  Edit,\n  PiggyBank\n} from \"lucide-react\";\nimport { CreditCard, Loan, MonthlyPayment } from \"@shared/schema\";\nimport { formatCurrency, getNextDueDate, getDaysUntilDue } from \"@/lib/financial-calculations\";\n\ntype FilterType = \"all\" | \"week\" | \"month\";\n\ninterface UpcomingPaymentsProps {\n  onEdit?: (account: any, type: string) => void;\n  onPay?: (account: any, type: string) => void;\n}\n\nexport function UpcomingPayments({ onEdit, onPay }: UpcomingPaymentsProps) {\n  const [filter, setFilter] = useState<FilterType>(\"all\");\n\n  const { data: creditCards = [], isLoading: creditCardsLoading } = useQuery({\n    queryKey: [\"/api/credit-cards\"],\n  });\n\n  const { data: loans = [], isLoading: loansLoading } = useQuery({\n    queryKey: [\"/api/loans\"],\n  });\n\n  const { data: monthlyPayments = [], isLoading: monthlyPaymentsLoading } = useQuery({\n    queryKey: [\"/api/monthly-payments\"],\n  });\n\n  const isLoading = creditCardsLoading || loansLoading || monthlyPaymentsLoading;\n\n  // Combine all payment accounts\n  const allPayments = [\n    ...creditCards.map((card: CreditCard) => ({\n      ...card,\n      type: \"credit-card\",\n      payment: parseFloat(card.minimumPayment),\n      daysUntilDue: getDaysUntilDue(card.dueDate),\n      nextDueDate: getNextDueDate(card.dueDate),\n    })),\n    ...loans.map((loan: Loan) => ({\n      ...loan,\n      type: \"loan\",\n      payment: parseFloat(loan.monthlyPayment),\n      daysUntilDue: getDaysUntilDue(loan.dueDate),\n      nextDueDate: getNextDueDate(loan.dueDate),\n    })),\n    ...monthlyPayments.map((payment: MonthlyPayment) => ({\n      ...payment,\n      type: \"monthly-payment\",\n      payment: parseFloat(payment.amount),\n      daysUntilDue: getDaysUntilDue(payment.dueDate),\n      nextDueDate: getNextDueDate(payment.dueDate),\n    })),\n  ];\n\n  // Filter payments based on selected filter\n  const filteredPayments = allPayments.filter(payment => {\n    if (filter === \"all\") return true;\n    if (filter === \"week\") return payment.daysUntilDue <= 7;\n    if (filter === \"month\") return payment.daysUntilDue <= 30;\n    return true;\n  }).sort((a, b) => a.daysUntilDue - b.daysUntilDue);\n\n  const getAccountIcon = (type: string, subType?: string) => {\n    if (type === \"credit-card\") return CreditCardIcon;\n    if (type === \"loan\") return Building2;\n    if (type === \"monthly-payment\") {\n      switch (subType) {\n        case \"auto_loan\": return Car;\n        case \"insurance\": return Shield;\n        case \"utilities\": return Zap;\n        default: return DollarSign;\n      }\n    }\n    return DollarSign;\n  };\n\n  const getTypeLabel = (type: string, subType?: string) => {\n    if (type === \"credit-card\") return \"Credit Card\";\n    if (type === \"loan\") return \"Loan\";\n    if (type === \"monthly-payment\") {\n      switch (subType) {\n        case \"auto_loan\": return \"Auto Loan\";\n        case \"insurance\": return \"Insurance\";\n        case \"utilities\": return \"Utilities\";\n        default: return \"Other\";\n      }\n    }\n    return type;\n  };\n\n  const getDueBadgeColor = (daysUntil: number) => {\n    if (daysUntil <= 3) return \"destructive\";\n    if (daysUntil <= 7) return \"default\";\n    return \"secondary\";\n  };\n\n  const totalUpcoming = filteredPayments.reduce((sum, payment) => sum + payment.payment, 0);\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"card-upcoming-payments\">\n        <CardHeader>\n          <CardTitle>Upcoming Payments</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"h-16 bg-neutral-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-upcoming-payments\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Upcoming Payments</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button \n              variant={filter === \"all\" ? \"default\" : \"outline\"} \n              size=\"sm\" \n              onClick={() => setFilter(\"all\")}\n              data-testid=\"filter-all\"\n            >\n              All\n            </Button>\n            <Button \n              variant={filter === \"week\" ? \"default\" : \"outline\"} \n              size=\"sm\" \n              onClick={() => setFilter(\"week\")}\n              data-testid=\"filter-week\"\n            >\n              This Week\n            </Button>\n            <Button \n              variant={filter === \"month\" ? \"default\" : \"outline\"} \n              size=\"sm\" \n              onClick={() => setFilter(\"month\")}\n              data-testid=\"filter-month\"\n            >\n              This Month\n            </Button>\n          </div>\n        </div>\n        <div className=\"text-sm text-neutral-500\">\n          Total: {formatCurrency(totalUpcoming)} • {filteredPayments.length} payments\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {filteredPayments.length === 0 ? (\n          <div className=\"text-center py-8 text-neutral-500\" data-testid=\"empty-state-payments\">\n            <Calendar size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n            <p className=\"text-lg font-medium mb-2\">No upcoming payments</p>\n            <p className=\"text-sm\">\n              {filter === \"all\" \n                ? \"You don't have any payment accounts yet\" \n                : `No payments due in the selected timeframe`}\n            </p>\n          </div>\n        ) : (\n          filteredPayments.map((payment) => {\n            const Icon = getAccountIcon(payment.type, payment.paymentType);\n            return (\n              <div\n                key={`${payment.type}-${payment.id}`}\n                className=\"flex items-center justify-between p-4 border border-neutral-200 rounded-lg hover:bg-neutral-50 transition-colors\"\n                data-testid={`payment-item-${payment.id}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex-shrink-0 h-12 w-12\">\n                    <div className=\"h-12 w-12 rounded-lg bg-blue-100 flex items-center justify-center\">\n                      <Icon className=\"text-blue-600\" size={24} />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"font-medium text-neutral-900\" data-testid={`payment-name-${payment.id}`}>\n                        {payment.name}\n                      </h3>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {getTypeLabel(payment.type, payment.paymentType)}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <span className=\"text-sm font-medium text-primary\" data-testid={`payment-amount-${payment.id}`}>\n                        {formatCurrency(payment.payment)}\n                      </span>\n                      <span className=\"text-sm text-neutral-500\">\n                        Due: {payment.nextDueDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </span>\n                      <Badge \n                        variant={getDueBadgeColor(payment.daysUntilDue)}\n                        className=\"text-xs\"\n                        data-testid={`payment-due-badge-${payment.id}`}\n                      >\n                        {payment.daysUntilDue === 0 ? \"Due Today\" : \n                         payment.daysUntilDue === 1 ? \"Due Tomorrow\" :\n                         `${payment.daysUntilDue} days`}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => onEdit?.(payment, payment.type)}\n                    data-testid={`button-edit-${payment.id}`}\n                  >\n                    <Edit size={16} className=\"mr-1\" />\n                    Edit\n                  </Button>\n                  <Button \n                    variant=\"default\" \n                    size=\"sm\" \n                    onClick={() => onPay?.(payment, payment.type)}\n                    data-testid={`button-pay-${payment.id}`}\n                  >\n                    <PiggyBank size={16} className=\"mr-1\" />\n                    Pay\n                  </Button>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9066},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/financial-calculations.ts":{"content":"export interface PayoffCalculation {\n  months: number;\n  totalInterest: number;\n  payoffDate: Date;\n  monthlySchedule: Array<{\n    month: number;\n    payment: number;\n    principal: number;\n    interest: number;\n    balance: number;\n  }>;\n}\n\nexport function calculatePayoff(\n  balance: number,\n  interestRate: number,\n  monthlyPayment: number,\n  extraPayment: number = 0\n): PayoffCalculation {\n  const monthlyRate = interestRate / 100 / 12;\n  const totalPayment = monthlyPayment + extraPayment;\n  let remainingBalance = balance;\n  let months = 0;\n  let totalInterest = 0;\n  const monthlySchedule = [];\n\n  while (remainingBalance > 0 && months < 1200) {\n    const interestPayment = remainingBalance * monthlyRate;\n    const principalPayment = Math.min(totalPayment - interestPayment, remainingBalance);\n    \n    remainingBalance -= principalPayment;\n    totalInterest += interestPayment;\n    months++;\n\n    monthlySchedule.push({\n      month: months,\n      payment: totalPayment,\n      principal: principalPayment,\n      interest: interestPayment,\n      balance: remainingBalance,\n    });\n\n    if (principalPayment <= 0) break;\n  }\n\n  return {\n    months,\n    totalInterest,\n    payoffDate: new Date(Date.now() + months * 30 * 24 * 60 * 60 * 1000),\n    monthlySchedule,\n  };\n}\n\nexport function calculateCreditUtilization(cards: Array<{ balance: string; creditLimit: string }>): number {\n  const totalBalance = cards.reduce((sum, card) => sum + parseFloat(card.balance), 0);\n  const totalLimit = cards.reduce((sum, card) => sum + parseFloat(card.creditLimit), 0);\n  \n  return totalLimit > 0 ? (totalBalance / totalLimit) * 100 : 0;\n}\n\nexport function formatCurrency(amount: string | number): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(num);\n}\n\nexport function formatDate(date: Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    year: 'numeric',\n  }).format(date);\n}\n\nexport function getNextDueDate(dayOfMonth: number): Date {\n  const now = new Date();\n  const nextDue = new Date(now.getFullYear(), now.getMonth(), dayOfMonth);\n  \n  if (nextDue <= now) {\n    nextDue.setMonth(nextDue.getMonth() + 1);\n  }\n  \n  return nextDue;\n}\n\nexport function getDaysUntilDue(dayOfMonth: number): number {\n  const nextDue = getNextDueDate(dayOfMonth);\n  const now = new Date();\n  const diffTime = nextDue.getTime() - now.getTime();\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n}\n","size_bytes":2539},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/comprehensive-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Home,\n  CreditCard as CreditCardIcon,\n  Building2,\n  Building,\n  FileText,\n  DollarSign,\n  TrendingUp,\n  Target,\n  PieChart,\n  BarChart3,\n  Receipt,\n  Wallet,\n  Download,\n  Plus,\n  Trash2\n} from \"lucide-react\";\nimport { DebtChart } from \"@/components/debt-chart\";\nimport { AccountForm } from \"@/components/account-form\";\n\nimport { UpcomingPayments } from \"@/components/upcoming-payments\";\nimport { UpcomingIncomes } from \"@/components/upcoming-incomes\";\nimport { IncomeOverview } from \"@/components/income-overview\";\nimport { FinancialOverviewChart } from \"@/components/financial-overview-chart\";\nimport { PaymentDialog } from \"@/components/payment-dialog\";\nimport { ExpenseForm } from \"@/components/expense-form\";\nimport { ExpenseOverview } from \"@/components/expense-overview\";\nimport { NetWorthSummary } from \"@/components/net-worth-summary\";\nimport { SavingsGoals } from \"@/components/savings-goals\";\nimport { BudgetTracker } from \"@/components/budget-tracker\";\nimport { InvestmentTracker } from \"@/components/investment-tracker\";\nimport { ComprehensiveNetWorth } from \"@/components/comprehensive-net-worth\";\nimport { CreditCard, Loan, MonthlyPayment, Income } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  formatCurrency, \n  calculateCreditUtilization\n} from \"@/lib/financial-calculations\";\nimport { useState } from \"react\";\n\n\nexport default function ComprehensiveDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<any>(null);\n  const [selectedAccountType, setSelectedAccountType] = useState<string>(\"\");\n  const [expenseDialogOpen, setExpenseDialogOpen] = useState(false);\n  const [revenueDialogOpen, setRevenueDialogOpen] = useState(false);\n  const [businessProfileDialogOpen, setBusinessProfileDialogOpen] = useState(false);\n  const [purchaseOrderDialogOpen, setPurchaseOrderDialogOpen] = useState(false);\n  const [businessSettingsOpen, setBusinessSettingsOpen] = useState(false);\n\n  const { data: creditCards = [], isLoading: creditCardsLoading } = useQuery<CreditCard[]>({\n    queryKey: [\"/api/credit-cards\"],\n  });\n\n  const { data: loans = [], isLoading: loansLoading } = useQuery<Loan[]>({\n    queryKey: [\"/api/loans\"],\n  });\n\n  const { data: monthlyPayments = [], isLoading: monthlyPaymentsLoading } = useQuery<MonthlyPayment[]>({\n    queryKey: [\"/api/monthly-payments\"],\n  });\n\n  const { data: incomes = [], isLoading: incomesLoading } = useQuery<Income[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/assets\"],\n  });\n\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: businessProfiles = [], isLoading: businessProfilesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/business-profiles\"],\n  });\n\n  const { data: purchaseOrders = [], isLoading: purchaseOrdersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-orders\"],\n  });\n\n  const { data: businessRevenue = [], isLoading: businessRevenueLoading } = useQuery<any[]>({\n    queryKey: [\"/api/business-revenue\"],\n  });\n\n  const { data: businessExpenses = [], isLoading: businessExpensesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/business-expenses\"],\n  });\n\n  const isLoading = creditCardsLoading || loansLoading || monthlyPaymentsLoading || incomesLoading || assetsLoading || expensesLoading;\n\n  // Business form components\n  const BusinessRevenueForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      amount: '',\n      description: '',\n      source: '',\n      category: '',\n      customCategory: '',\n      revenueType: '',\n      frequency: '',\n      date: new Date().toISOString().split('T')[0]\n    });\n\n    const revenueMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/business-revenue\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Business revenue added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/business-revenue\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add business revenue\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      revenueMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"revenue-amount\">Amount</Label>\n          <Input\n            id=\"revenue-amount\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.amount}\n            onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"revenue-description\">Description</Label>\n          <Input\n            id=\"revenue-description\"\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"revenue-source\">Source</Label>\n          <Input\n            id=\"revenue-source\"\n            value={formData.source}\n            onChange={(e) => setFormData(prev => ({ ...prev, source: e.target.value }))}\n            placeholder=\"e.g., Client payment, Product sales\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"revenue-type\">Revenue Type</Label>\n          <Select value={formData.revenueType} onValueChange={(value) => setFormData(prev => ({ ...prev, revenueType: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select revenue type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"one-time\">One-Time Payment</SelectItem>\n              <SelectItem value=\"subscription\">Subscription</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {formData.revenueType === 'subscription' && (\n          <div>\n            <Label htmlFor=\"revenue-frequency\">Billing Frequency</Label>\n            <Select value={formData.frequency} onValueChange={(value) => setFormData(prev => ({ ...prev, frequency: value }))}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select frequency\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                <SelectItem value=\"yearly\">Yearly</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n        \n        <div>\n          <Label htmlFor=\"revenue-category\">Category</Label>\n          <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"services\">Services</SelectItem>\n              <SelectItem value=\"products\">Products</SelectItem>\n              <SelectItem value=\"consulting\">Consulting</SelectItem>\n              <SelectItem value=\"saas\">SaaS/Software</SelectItem>\n              <SelectItem value=\"other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {formData.category === 'other' && (\n          <div>\n            <Label htmlFor=\"custom-revenue-category\">Custom Category</Label>\n            <Input\n              id=\"custom-revenue-category\"\n              value={formData.customCategory}\n              onChange={(e) => setFormData(prev => ({ ...prev, customCategory: e.target.value }))}\n              placeholder=\"Enter custom category\"\n              required\n            />\n          </div>\n        )}\n        <div>\n          <Label htmlFor=\"revenue-date\">Date</Label>\n          <Input\n            id=\"revenue-date\"\n            type=\"date\"\n            value={formData.date}\n            onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n            required\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={revenueMutation.isPending}>\n            {revenueMutation.isPending ? \"Adding...\" : \"Add Revenue\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const BusinessExpenseForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      amount: '',\n      description: '',\n      vendor: '',\n      category: '',\n      customCategory: '',\n      date: new Date().toISOString().split('T')[0],\n      notes: ''\n    });\n\n    const expenseMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/business-expenses\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Business expense added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/business-expenses\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add business expense\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      expenseMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"expense-amount\">Amount</Label>\n          <Input\n            id=\"expense-amount\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.amount}\n            onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"expense-description\">Description</Label>\n          <Input\n            id=\"expense-description\"\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"expense-vendor\">Vendor</Label>\n          <Input\n            id=\"expense-vendor\"\n            value={formData.vendor}\n            onChange={(e) => setFormData(prev => ({ ...prev, vendor: e.target.value }))}\n            placeholder=\"e.g., Office supply store, Software company\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"expense-category\">Category</Label>\n          <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"office-supplies\">Office Supplies</SelectItem>\n              <SelectItem value=\"software\">Software</SelectItem>\n              <SelectItem value=\"travel\">Travel</SelectItem>\n              <SelectItem value=\"meals\">Meals & Entertainment</SelectItem>\n              <SelectItem value=\"marketing\">Marketing</SelectItem>\n              <SelectItem value=\"other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {formData.category === 'other' && (\n          <div>\n            <Label htmlFor=\"custom-expense-category\">Custom Category</Label>\n            <Input\n              id=\"custom-expense-category\"\n              value={formData.customCategory}\n              onChange={(e) => setFormData(prev => ({ ...prev, customCategory: e.target.value }))}\n              placeholder=\"Enter custom category\"\n              required\n            />\n          </div>\n        )}\n        <div>\n          <Label htmlFor=\"expense-date\">Date</Label>\n          <Input\n            id=\"expense-date\"\n            type=\"date\"\n            value={formData.date}\n            onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"expense-notes\">Notes</Label>\n          <Textarea\n            id=\"expense-notes\"\n            value={formData.notes}\n            onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n            placeholder=\"Additional notes (optional)\"\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={expenseMutation.isPending}>\n            {expenseMutation.isPending ? \"Adding...\" : \"Add Expense\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Business Profile Form\n  const BusinessProfileForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      businessName: '',\n      address: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      phone: '',\n      fax: '',\n      email: '',\n      logoUrl: ''\n    });\n\n    const profileMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/business-profiles\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Business profile created successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/business-profiles\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create business profile\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      profileMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"business-name\">Business Name</Label>\n            <Input\n              id=\"business-name\"\n              value={formData.businessName}\n              onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"business-email\">Email</Label>\n            <Input\n              id=\"business-email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n            />\n          </div>\n        </div>\n        <div>\n          <Label htmlFor=\"business-address\">Address</Label>\n          <Input\n            id=\"business-address\"\n            value={formData.address}\n            onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n            required\n          />\n        </div>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"business-city\">City</Label>\n            <Input\n              id=\"business-city\"\n              value={formData.city}\n              onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"business-state\">State</Label>\n            <Input\n              id=\"business-state\"\n              value={formData.state}\n              onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"business-zip\">ZIP Code</Label>\n            <Input\n              id=\"business-zip\"\n              value={formData.zipCode}\n              onChange={(e) => setFormData(prev => ({ ...prev, zipCode: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"business-phone\">Phone</Label>\n            <Input\n              id=\"business-phone\"\n              value={formData.phone}\n              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"business-fax\">Fax</Label>\n            <Input\n              id=\"business-fax\"\n              value={formData.fax}\n              onChange={(e) => setFormData(prev => ({ ...prev, fax: e.target.value }))}\n            />\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={profileMutation.isPending}>\n            {profileMutation.isPending ? \"Creating...\" : \"Create Profile\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Purchase Order Form \n  const PurchaseOrderForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      businessProfileId: '',\n      poNumber: `PO-${Date.now()}`,\n      vendorName: '',\n      vendorAddress: '',\n      vendorPhone: '',\n      shipToName: '',\n      shipToAddress: '',\n      shipToPhone: '',\n      requisitioner: '',\n      shipVia: '',\n      fobPoint: '',\n      shippingTerms: '',\n      specialInstructions: '',\n      items: [{ itemNumber: '', description: '', quantity: '', unitPrice: '', total: '' }]\n    });\n\n    const orderMutation = useMutation({\n      mutationFn: async (data: any) => {\n        const { items, ...orderData } = data;\n        const subtotal = items.reduce((sum: number, item: any) => sum + parseFloat(item.total || '0'), 0);\n        const salesTax = subtotal * 0.08; // 8% tax\n        const totalDue = subtotal + salesTax;\n\n        const order = await apiRequest(\"POST\", \"/api/purchase-orders\", {\n          ...orderData,\n          subtotal: subtotal.toString(),\n          salesTax: salesTax.toString(),\n          shippingHandling: \"0\",\n          totalDue: totalDue.toString()\n        });\n\n        // Create order items\n        for (const item of items) {\n          if (item.description) {\n            await apiRequest(\"POST\", \"/api/purchase-order-items\", {\n              purchaseOrderId: order.id,\n              ...item\n            });\n          }\n        }\n\n        // Automatically create business expense for the purchase order\n        await apiRequest(\"POST\", \"/api/business-expenses\", {\n          amount: totalDue.toString(),\n          description: `Purchase Order ${orderData.poNumber} - ${orderData.vendorName}`,\n          vendor: orderData.vendorName,\n          category: \"Purchase Orders\",\n          expenseType: \"operational\",\n          date: new Date().toISOString().split('T')[0],\n          notes: `Auto-generated from PO ${orderData.poNumber}`,\n          purchaseOrderId: order.id\n        });\n\n        return order;\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Purchase order created and added to business expenses\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/business-expenses\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create purchase order\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!formData.businessProfileId) {\n        toast({\n          title: \"Error\",\n          description: \"Please select a business profile first\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      orderMutation.mutate(formData);\n    };\n\n    const addItem = () => {\n      setFormData(prev => ({\n        ...prev,\n        items: [...prev.items, { itemNumber: '', description: '', quantity: '', unitPrice: '', total: '' }]\n      }));\n    };\n\n    const updateItem = (index: number, field: string, value: string) => {\n      const newItems = [...formData.items];\n      newItems[index] = { ...newItems[index], [field]: value };\n      \n      if (field === 'quantity' || field === 'unitPrice') {\n        const quantity = parseFloat(newItems[index].quantity || '0');\n        const unitPrice = parseFloat(newItems[index].unitPrice || '0');\n        newItems[index].total = (quantity * unitPrice).toFixed(2);\n      }\n      \n      setFormData(prev => ({ ...prev, items: newItems }));\n    };\n\n    const removeItem = (index: number) => {\n      setFormData(prev => ({\n        ...prev,\n        items: prev.items.filter((_, i) => i !== index)\n      }));\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"business-profile\">Business Profile</Label>\n            <Select value={formData.businessProfileId} onValueChange={(value) => setFormData(prev => ({ ...prev, businessProfileId: value }))}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select business profile\" />\n              </SelectTrigger>\n              <SelectContent>\n                {businessProfiles.map((profile: any) => (\n                  <SelectItem key={profile.id} value={profile.id}>\n                    {profile.businessName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"po-number\">PO Number</Label>\n            <Input\n              id=\"po-number\"\n              value={formData.poNumber}\n              onChange={(e) => setFormData(prev => ({ ...prev, poNumber: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Vendor Information</h3>\n          <div>\n            <Label htmlFor=\"vendor-name\">Vendor Name</Label>\n            <Input\n              id=\"vendor-name\"\n              value={formData.vendorName}\n              onChange={(e) => setFormData(prev => ({ ...prev, vendorName: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"vendor-address\">Vendor Address</Label>\n            <Textarea\n              id=\"vendor-address\"\n              value={formData.vendorAddress}\n              onChange={(e) => setFormData(prev => ({ ...prev, vendorAddress: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"vendor-phone\">Vendor Phone</Label>\n            <Input\n              id=\"vendor-phone\"\n              value={formData.vendorPhone}\n              onChange={(e) => setFormData(prev => ({ ...prev, vendorPhone: e.target.value }))}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Ship To Information</h3>\n          <div>\n            <Label htmlFor=\"ship-to-name\">Ship To Name</Label>\n            <Input\n              id=\"ship-to-name\"\n              value={formData.shipToName}\n              onChange={(e) => setFormData(prev => ({ ...prev, shipToName: e.target.value }))}\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"ship-to-address\">Ship To Address</Label>\n            <Textarea\n              id=\"ship-to-address\"\n              value={formData.shipToAddress}\n              onChange={(e) => setFormData(prev => ({ ...prev, shipToAddress: e.target.value }))}\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"requisitioner\">Requisitioner</Label>\n            <Input\n              id=\"requisitioner\"\n              value={formData.requisitioner}\n              onChange={(e) => setFormData(prev => ({ ...prev, requisitioner: e.target.value }))}\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"ship-via\">Ship Via</Label>\n            <Input\n              id=\"ship-via\"\n              value={formData.shipVia}\n              onChange={(e) => setFormData(prev => ({ ...prev, shipVia: e.target.value }))}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Items</h3>\n            <Button type=\"button\" onClick={addItem} size=\"sm\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Item\n            </Button>\n          </div>\n          {formData.items.map((item, index) => (\n            <div key={index} className=\"grid grid-cols-6 gap-2 items-end\">\n              <div>\n                <Label>Item #</Label>\n                <Input\n                  value={item.itemNumber}\n                  onChange={(e) => updateItem(index, 'itemNumber', e.target.value)}\n                  placeholder=\"Item number\"\n                />\n              </div>\n              <div className=\"col-span-2\">\n                <Label>Description</Label>\n                <Input\n                  value={item.description}\n                  onChange={(e) => updateItem(index, 'description', e.target.value)}\n                  placeholder=\"Description\"\n                />\n              </div>\n              <div>\n                <Label>Qty</Label>\n                <Input\n                  type=\"number\"\n                  value={item.quantity}\n                  onChange={(e) => updateItem(index, 'quantity', e.target.value)}\n                  placeholder=\"Quantity\"\n                />\n              </div>\n              <div>\n                <Label>Unit Price</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={item.unitPrice}\n                  onChange={(e) => updateItem(index, 'unitPrice', e.target.value)}\n                  placeholder=\"0.00\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Input\n                  value={item.total}\n                  readOnly\n                  placeholder=\"Total\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => removeItem(index)}\n                  disabled={formData.items.length === 1}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div>\n          <Label htmlFor=\"special-instructions\">Special Instructions</Label>\n          <Textarea\n            id=\"special-instructions\"\n            value={formData.specialInstructions}\n            onChange={(e) => setFormData(prev => ({ ...prev, specialInstructions: e.target.value }))}\n            placeholder=\"Any special instructions or notes\"\n          />\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={orderMutation.isPending}>\n            {orderMutation.isPending ? \"Creating...\" : \"Create Purchase Order\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Tax form components\n  const TaxDocumentForm = () => {\n    const [formData, setFormData] = useState({\n      taxYear: new Date().getFullYear().toString(),\n      documentType: '1099-NEC',\n      recipientName: '',\n      recipientTin: '',\n      recipientAddress: '',\n      totalPayments: ''\n    });\n\n    const taxDocMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/tax-documents\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Tax document generated successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/tax-documents\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate tax document\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      taxDocMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"tax-year\">Tax Year</Label>\n          <Select value={formData.taxYear} onValueChange={(value) => setFormData(prev => ({ ...prev, taxYear: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"2024\">2024</SelectItem>\n              <SelectItem value=\"2023\">2023</SelectItem>\n              <SelectItem value=\"2022\">2022</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"document-type\">Document Type</Label>\n          <Select value={formData.documentType} onValueChange={(value) => setFormData(prev => ({ ...prev, documentType: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1099-NEC\">1099-NEC</SelectItem>\n              <SelectItem value=\"1099-MISC\">1099-MISC</SelectItem>\n              <SelectItem value=\"Schedule C\">Schedule C</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"recipient-name\">Recipient Name</Label>\n          <Input\n            id=\"recipient-name\"\n            value={formData.recipientName}\n            onChange={(e) => setFormData(prev => ({ ...prev, recipientName: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"recipient-tin\">Tax ID Number</Label>\n          <Input\n            id=\"recipient-tin\"\n            value={formData.recipientTin}\n            onChange={(e) => setFormData(prev => ({ ...prev, recipientTin: e.target.value }))}\n            placeholder=\"XXX-XX-XXXX or XX-XXXXXXX\"\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"recipient-address\">Address</Label>\n          <Textarea\n            id=\"recipient-address\"\n            value={formData.recipientAddress}\n            onChange={(e) => setFormData(prev => ({ ...prev, recipientAddress: e.target.value }))}\n            placeholder=\"Full address including zip code\"\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"total-payments\">Total Payments</Label>\n          <Input\n            id=\"total-payments\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.totalPayments}\n            onChange={(e) => setFormData(prev => ({ ...prev, totalPayments: e.target.value }))}\n            required\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={taxDocMutation.isPending}>\n            {taxDocMutation.isPending ? \"Generating...\" : \"Generate Document\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const SalesTaxForm = () => {\n    const [formData, setFormData] = useState({\n      state: '',\n      taxRate: '',\n      locality: '',\n      localTaxRate: '',\n      effectiveDate: new Date().toISOString().split('T')[0],\n      nexusType: 'physical'\n    });\n\n    const salesTaxMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/sales-tax-settings\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Sales tax setting added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/sales-tax-settings\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add sales tax setting\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      salesTaxMutation.mutate(formData);\n    };\n\n    const states = [\n      'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',\n      'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n      'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',\n      'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n      'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n    ];\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"state\">State</Label>\n          <Select value={formData.state} onValueChange={(value) => setFormData(prev => ({ ...prev, state: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select state\" />\n            </SelectTrigger>\n            <SelectContent>\n              {states.map(state => (\n                <SelectItem key={state} value={state}>{state}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"tax-rate\">State Tax Rate (%)</Label>\n          <Input\n            id=\"tax-rate\"\n            type=\"number\"\n            step=\"0.001\"\n            value={formData.taxRate}\n            onChange={(e) => setFormData(prev => ({ ...prev, taxRate: e.target.value }))}\n            placeholder=\"e.g., 6.25\"\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"locality\">City/County (Optional)</Label>\n          <Input\n            id=\"locality\"\n            value={formData.locality}\n            onChange={(e) => setFormData(prev => ({ ...prev, locality: e.target.value }))}\n            placeholder=\"e.g., Los Angeles\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"local-tax-rate\">Local Tax Rate (%) - Optional</Label>\n          <Input\n            id=\"local-tax-rate\"\n            type=\"number\"\n            step=\"0.001\"\n            value={formData.localTaxRate}\n            onChange={(e) => setFormData(prev => ({ ...prev, localTaxRate: e.target.value }))}\n            placeholder=\"e.g., 1.5\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"nexus-type\">Nexus Type</Label>\n          <Select value={formData.nexusType} onValueChange={(value) => setFormData(prev => ({ ...prev, nexusType: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"physical\">Physical Presence</SelectItem>\n              <SelectItem value=\"economic\">Economic Nexus</SelectItem>\n              <SelectItem value=\"click-through\">Click-through Nexus</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"effective-date\">Effective Date</Label>\n          <Input\n            id=\"effective-date\"\n            type=\"date\"\n            value={formData.effectiveDate}\n            onChange={(e) => setFormData(prev => ({ ...prev, effectiveDate: e.target.value }))}\n            required\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={salesTaxMutation.isPending}>\n            {salesTaxMutation.isPending ? \"Adding...\" : \"Add Tax Setting\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Business settings form components\n  const BusinessInfoForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      businessName: '',\n      businessType: '',\n      taxId: '',\n      address: '',\n      phone: '',\n      email: '',\n      website: ''\n    });\n\n    const businessInfoMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/business-info\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Business information updated successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/business-info\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update business information\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      businessInfoMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"business-name\">Business Name</Label>\n          <Input\n            id=\"business-name\"\n            value={formData.businessName}\n            onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"business-type\">Business Type</Label>\n          <Select value={formData.businessType} onValueChange={(value) => setFormData(prev => ({ ...prev, businessType: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select business type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"sole-proprietorship\">Sole Proprietorship</SelectItem>\n              <SelectItem value=\"llc\">LLC</SelectItem>\n              <SelectItem value=\"corporation\">Corporation</SelectItem>\n              <SelectItem value=\"partnership\">Partnership</SelectItem>\n              <SelectItem value=\"s-corp\">S-Corp</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"tax-id\">Tax ID / EIN</Label>\n          <Input\n            id=\"tax-id\"\n            value={formData.taxId}\n            onChange={(e) => setFormData(prev => ({ ...prev, taxId: e.target.value }))}\n            placeholder=\"XX-XXXXXXX\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"address\">Business Address</Label>\n          <Textarea\n            id=\"address\"\n            value={formData.address}\n            onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n            placeholder=\"Full business address\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"phone\">Phone Number</Label>\n          <Input\n            id=\"phone\"\n            value={formData.phone}\n            onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n            placeholder=\"(555) 123-4567\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n            placeholder=\"business@example.com\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"website\">Website</Label>\n          <Input\n            id=\"website\"\n            value={formData.website}\n            onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n            placeholder=\"https://example.com\"\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={businessInfoMutation.isPending}>\n            {businessInfoMutation.isPending ? \"Saving...\" : \"Save Information\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const PaymentMethodForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      type: 'bank-account',\n      accountName: '',\n      accountNumber: '',\n      routingNumber: '',\n      bankName: '',\n      accountType: 'checking'\n    });\n\n    const paymentMethodMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/payment-methods\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Payment method added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add payment method\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      paymentMethodMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"payment-type\">Payment Method Type</Label>\n          <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"bank-account\">Bank Account</SelectItem>\n              <SelectItem value=\"paypal\">PayPal</SelectItem>\n              <SelectItem value=\"stripe\">Stripe</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        {formData.type === 'bank-account' && (\n          <>\n            <div>\n              <Label htmlFor=\"account-name\">Account Name</Label>\n              <Input\n                id=\"account-name\"\n                value={formData.accountName}\n                onChange={(e) => setFormData(prev => ({ ...prev, accountName: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"account-number\">Account Number</Label>\n              <Input\n                id=\"account-number\"\n                value={formData.accountNumber}\n                onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"routing-number\">Routing Number</Label>\n              <Input\n                id=\"routing-number\"\n                value={formData.routingNumber}\n                onChange={(e) => setFormData(prev => ({ ...prev, routingNumber: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"bank-name\">Bank Name</Label>\n              <Input\n                id=\"bank-name\"\n                value={formData.bankName}\n                onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"account-type\">Account Type</Label>\n              <Select value={formData.accountType} onValueChange={(value) => setFormData(prev => ({ ...prev, accountType: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"checking\">Checking</SelectItem>\n                  <SelectItem value=\"savings\">Savings</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </>\n        )}\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={paymentMethodMutation.isPending}>\n            {paymentMethodMutation.isPending ? \"Adding...\" : \"Add Payment Method\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Additional tax form components\n  const SalesTaxReturnForm = () => {\n    const [formData, setFormData] = useState({\n      quarter: 'Q1',\n      year: new Date().getFullYear().toString(),\n      grossSales: '',\n      taxableAmount: '',\n      taxRate: '',\n      taxDue: '',\n      previousBalance: '',\n      penalties: '',\n      interest: ''\n    });\n\n    const salesTaxReturnMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/sales-tax-returns\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Sales tax return generated successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/sales-tax-returns\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate sales tax return\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      salesTaxReturnMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"quarter\">Quarter</Label>\n            <Select value={formData.quarter} onValueChange={(value) => setFormData(prev => ({ ...prev, quarter: value }))}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Q1\">Q1 (Jan-Mar)</SelectItem>\n                <SelectItem value=\"Q2\">Q2 (Apr-Jun)</SelectItem>\n                <SelectItem value=\"Q3\">Q3 (Jul-Sep)</SelectItem>\n                <SelectItem value=\"Q4\">Q4 (Oct-Dec)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"year\">Year</Label>\n            <Input\n              id=\"year\"\n              type=\"number\"\n              value={formData.year}\n              onChange={(e) => setFormData(prev => ({ ...prev, year: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div>\n          <Label htmlFor=\"gross-sales\">Gross Sales</Label>\n          <Input\n            id=\"gross-sales\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.grossSales}\n            onChange={(e) => setFormData(prev => ({ ...prev, grossSales: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"taxable-amount\">Taxable Amount</Label>\n          <Input\n            id=\"taxable-amount\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.taxableAmount}\n            onChange={(e) => setFormData(prev => ({ ...prev, taxableAmount: e.target.value }))}\n            required\n          />\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={salesTaxReturnMutation.isPending}>\n            {salesTaxReturnMutation.isPending ? \"Generating...\" : \"Generate Return\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const ExpenseReportForm = () => {\n    const [formData, setFormData] = useState({\n      reportType: 'quarterly',\n      startDate: '',\n      endDate: '',\n      categories: [] as string[],\n      includeTaxDeductible: true,\n      groupByCategory: true\n    });\n\n    const expenseReportMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/expense-reports\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Expense report generated successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/expense-reports\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate expense report\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      expenseReportMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"report-type\">Report Type</Label>\n          <Select value={formData.reportType} onValueChange={(value) => setFormData(prev => ({ ...prev, reportType: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"monthly\">Monthly</SelectItem>\n              <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n              <SelectItem value=\"yearly\">Yearly</SelectItem>\n              <SelectItem value=\"custom\">Custom Date Range</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        {formData.reportType === 'custom' && (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"start-date\">Start Date</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={formData.startDate}\n                onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\">End Date</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={formData.endDate}\n                onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n                required\n              />\n            </div>\n          </div>\n        )}\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={expenseReportMutation.isPending}>\n            {expenseReportMutation.isPending ? \"Generating...\" : \"Generate Report\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const ScheduleCForm = () => {\n    const [formData, setFormData] = useState({\n      businessName: '',\n      businessCode: '',\n      grossReceipts: '',\n      totalExpenses: '',\n      netProfit: '',\n      employeeNumber: '0',\n      accountingMethod: 'cash'\n    });\n\n    const scheduleCMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/schedule-c\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Schedule C form generated successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/schedule-c\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate Schedule C form\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      scheduleCMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"business-name\">Business Name</Label>\n          <Input\n            id=\"business-name\"\n            value={formData.businessName}\n            onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"business-code\">Business Code</Label>\n          <Input\n            id=\"business-code\"\n            value={formData.businessCode}\n            onChange={(e) => setFormData(prev => ({ ...prev, businessCode: e.target.value }))}\n            placeholder=\"6-digit NAICS code\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"gross-receipts\">Gross Receipts</Label>\n          <Input\n            id=\"gross-receipts\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.grossReceipts}\n            onChange={(e) => setFormData(prev => ({ ...prev, grossReceipts: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"total-expenses\">Total Expenses</Label>\n          <Input\n            id=\"total-expenses\"\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.totalExpenses}\n            onChange={(e) => setFormData(prev => ({ ...prev, totalExpenses: e.target.value }))}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"accounting-method\">Accounting Method</Label>\n          <Select value={formData.accountingMethod} onValueChange={(value) => setFormData(prev => ({ ...prev, accountingMethod: value }))}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"cash\">Cash</SelectItem>\n              <SelectItem value=\"accrual\">Accrual</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"submit\" disabled={scheduleCMutation.isPending}>\n            {scheduleCMutation.isPending ? \"Generating...\" : \"Generate Schedule C\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const ShopifyIntegrationForm = () => {\n    const [activeTab, setActiveTab] = useState<'api' | 'csv'>('csv');\n    const [csvFile, setCsvFile] = useState<File | null>(null);\n    const [formData, setFormData] = useState({\n      storeName: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      syncFrequency: 'daily'\n    });\n\n    const shopifyMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/shopify-integration\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Shopify store connected successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/shopify-integration\"] });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to connect Shopify store\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const csvImportMutation = useMutation({\n      mutationFn: async (file: File) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await fetch('/api/shopify-csv-import', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) throw new Error('Upload failed');\n        return response.json();\n      },\n      onSuccess: (data) => {\n        toast({\n          title: \"Success\",\n          description: `Imported ${data.count} orders successfully`\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/shopify-orders\"] });\n        setCsvFile(null);\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to import CSV file\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const downloadTemplate = () => {\n      const csvContent = `Order ID,Customer Name,Customer Email,Order Date,Order Total,Sales Tax Amount,Tax Rate,State,City,Shipping Address,Product Names,Payment Status\n#1001,John Smith,john.smith@email.com,2024-08-01,125.50,10.04,8.0%,CA,Los Angeles,\"123 Main St Los Angeles CA 90210\",\"Premium Widget, Standard Widget\",paid\n#1002,Sarah Johnson,sarah.j@email.com,2024-08-01,89.99,7.20,8.0%,CA,San Francisco,\"456 Oak Ave San Francisco CA 94102\",Deluxe Service Package,paid\n#1003,Mike Brown,mike.brown@email.com,2024-08-02,45.00,0.00,0.0%,OR,Portland,\"789 Pine St Portland OR 97201\",Digital Download,paid`;\n      \n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'shopify_orders_template.csv';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    };\n\n    const handleApiSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      shopifyMutation.mutate(formData);\n    };\n\n    const handleCsvSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      if (csvFile) {\n        csvImportMutation.mutate(csvFile);\n      }\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const file = e.target.files?.[0];\n      if (file && file.type === 'text/csv') {\n        setCsvFile(file);\n      } else {\n        toast({\n          title: \"Invalid file\",\n          description: \"Please select a CSV file\",\n          variant: \"destructive\"\n        });\n      }\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex border-b\">\n          <button\n            className={`px-4 py-2 ${activeTab === 'csv' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('csv')}\n          >\n            CSV Import\n          </button>\n          <button\n            className={`px-4 py-2 ${activeTab === 'api' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('api')}\n          >\n            API Connection\n          </button>\n        </div>\n\n        {activeTab === 'csv' && (\n          <div className=\"space-y-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">CSV Import Instructions</h4>\n              <p className=\"text-sm text-blue-800 mb-3\">\n                Import your Shopify orders using our CSV template. The file should include customer info, order details, and sales tax data.\n              </p>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={downloadTemplate}\n                className=\"bg-white\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download CSV Template\n              </Button>\n            </div>\n\n            <form onSubmit={handleCsvSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"csv-file\">Upload CSV File</Label>\n                <Input\n                  id=\"csv-file\"\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileChange}\n                  required\n                />\n                {csvFile && (\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    Selected: {csvFile.name}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"bg-gray-50 p-3 rounded text-xs text-gray-600\">\n                <strong>Required columns:</strong> Order ID, Customer Name, Customer Email, Order Date, Order Total, Sales Tax Amount, Tax Rate, State, City\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"submit\" disabled={!csvFile || csvImportMutation.isPending}>\n                  {csvImportMutation.isPending ? \"Importing...\" : \"Import Orders\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n        )}\n\n        {activeTab === 'api' && (\n          <form onSubmit={handleApiSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"store-name\">Store Name</Label>\n              <Input\n                id=\"store-name\"\n                value={formData.storeName}\n                onChange={(e) => setFormData(prev => ({ ...prev, storeName: e.target.value }))}\n                placeholder=\"your-store.myshopify.com\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"api-key\">API Key</Label>\n              <Input\n                id=\"api-key\"\n                value={formData.apiKey}\n                onChange={(e) => setFormData(prev => ({ ...prev, apiKey: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"api-secret\">API Secret</Label>\n              <Input\n                id=\"api-secret\"\n                type=\"password\"\n                value={formData.apiSecret}\n                onChange={(e) => setFormData(prev => ({ ...prev, apiSecret: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"access-token\">Access Token</Label>\n              <Input\n                id=\"access-token\"\n                type=\"password\"\n                value={formData.accessToken}\n                onChange={(e) => setFormData(prev => ({ ...prev, accessToken: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"sync-frequency\">Sync Frequency</Label>\n              <Select value={formData.syncFrequency} onValueChange={(value) => setFormData(prev => ({ ...prev, syncFrequency: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"hourly\">Hourly</SelectItem>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button type=\"submit\" disabled={shopifyMutation.isPending}>\n                {shopifyMutation.isPending ? \"Connecting...\" : \"Connect Store\"}\n              </Button>\n            </div>\n          </form>\n        )}\n      </div>\n    );\n  };\n\n  // Credit card and loan form components\n  const CreditCardForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      name: '',\n      balance: '',\n      creditLimit: '',\n      interestRate: '',\n      minimumPayment: '',\n      dueDate: 30\n    });\n\n    const createCreditCardMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/credit-cards\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Credit card added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/credit-cards\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add credit card\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      createCreditCardMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"card-name\">Card Name</Label>\n          <Input\n            id=\"card-name\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., Chase Sapphire\"\n            required\n          />\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"balance\">Current Balance</Label>\n            <Input\n              id=\"balance\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.balance}\n              onChange={(e) => setFormData(prev => ({ ...prev, balance: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"credit-limit\">Credit Limit</Label>\n            <Input\n              id=\"credit-limit\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.creditLimit}\n              onChange={(e) => setFormData(prev => ({ ...prev, creditLimit: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"interest-rate\">Interest Rate (%)</Label>\n            <Input\n              id=\"interest-rate\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.interestRate}\n              onChange={(e) => setFormData(prev => ({ ...prev, interestRate: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"min-payment\">Minimum Payment</Label>\n            <Input\n              id=\"min-payment\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.minimumPayment}\n              onChange={(e) => setFormData(prev => ({ ...prev, minimumPayment: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={createCreditCardMutation.isPending}>\n            {createCreditCardMutation.isPending ? \"Adding...\" : \"Add Card\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const LoanForm = ({ onClose }: { onClose: () => void }) => {\n    const [formData, setFormData] = useState({\n      name: '',\n      balance: '',\n      interestRate: '',\n      monthlyPayment: '',\n      termMonths: '',\n      originalAmount: '',\n      loanType: 'personal',\n      dueDate: 30\n    });\n\n    const createLoanMutation = useMutation({\n      mutationFn: async (data: any) => {\n        return apiRequest(\"POST\", \"/api/loans\", data);\n      },\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Loan added successfully\"\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/loans\"] });\n        onClose();\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to add loan\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      createLoanMutation.mutate(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"loan-name\">Loan Name</Label>\n          <Input\n            id=\"loan-name\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., Auto Loan, Mortgage\"\n            required\n          />\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"loan-balance\">Current Balance</Label>\n            <Input\n              id=\"loan-balance\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.balance}\n              onChange={(e) => setFormData(prev => ({ ...prev, balance: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"original-amount\">Original Amount</Label>\n            <Input\n              id=\"original-amount\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.originalAmount}\n              onChange={(e) => setFormData(prev => ({ ...prev, originalAmount: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"loan-interest-rate\">Interest Rate (%)</Label>\n            <Input\n              id=\"loan-interest-rate\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.interestRate}\n              onChange={(e) => setFormData(prev => ({ ...prev, interestRate: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"monthly-payment\">Monthly Payment</Label>\n            <Input\n              id=\"monthly-payment\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.monthlyPayment}\n              onChange={(e) => setFormData(prev => ({ ...prev, monthlyPayment: e.target.value }))}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"term-months\">Term (Months)</Label>\n            <Input\n              id=\"term-months\"\n              type=\"number\"\n              value={formData.termMonths}\n              onChange={(e) => setFormData(prev => ({ ...prev, termMonths: e.target.value }))}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"loan-type\">Loan Type</Label>\n            <Select value={formData.loanType} onValueChange={(value) => setFormData(prev => ({ ...prev, loanType: value }))}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"personal\">Personal Loan</SelectItem>\n                <SelectItem value=\"auto\">Auto Loan</SelectItem>\n                <SelectItem value=\"mortgage\">Mortgage</SelectItem>\n                <SelectItem value=\"student\">Student Loan</SelectItem>\n                <SelectItem value=\"business\">Business Loan</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" disabled={createLoanMutation.isPending}>\n            {createLoanMutation.isPending ? \"Adding...\" : \"Add Loan\"}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  // Delete functions\n  const deleteCreditCard = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/credit-cards/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Credit card deleted successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/credit-cards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete credit card\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteLoan = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/loans/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Loan deleted successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete loan\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Calculate overview metrics\n  const totalDebt = [...creditCards, ...loans].reduce(\n    (sum, account) => sum + parseFloat(account.balance || \"0\"),\n    0\n  );\n\n  const totalMonthlyPayments = [\n    ...creditCards.map((card: CreditCard) => parseFloat(card.minimumPayment || \"0\")),\n    ...loans.map((loan: Loan) => parseFloat(loan.monthlyPayment || \"0\"))\n  ].reduce((sum, payment) => sum + payment, 0);\n\n  const creditUtilization = calculateCreditUtilization(creditCards);\n\n  // Calculate monthly income\n  const calculateMonthlyIncome = (incomes: Income[]) => {\n    return incomes.reduce((total, income) => {\n      const amount = parseFloat(income.amount || \"0\");\n      switch (income.frequency) {\n        case \"weekly\": return total + (amount * 4.33);\n        case \"biweekly\": return total + (amount * 2.17);\n        case \"monthly\": return total + amount;\n        case \"annually\": return total + (amount / 12);\n        default: return total + amount;\n      }\n    }, 0);\n  };\n\n  const totalMonthlyIncome = calculateMonthlyIncome(incomes);\n\n  // Calculate available cash and credit metrics\n  const availableCash = assets\n    .filter((asset: any) => ['cash', 'checking', 'savings'].includes(asset.category?.toLowerCase() || ''))\n    .reduce((sum: number, asset: any) => sum + parseFloat(asset.value || asset.currentValue || \"0\"), 0);\n\n  const totalCreditLimit = creditCards.reduce((sum, card) => sum + parseFloat(card.creditLimit || \"0\"), 0);\n  const totalCreditUsed = creditCards.reduce((sum, card) => sum + parseFloat(card.balance || \"0\"), 0);\n  const availableCredit = totalCreditLimit - totalCreditUsed;\n  const totalLiquidity = availableCash + availableCredit;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <main className=\"p-4\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-3xl font-bold tracking-tight\">Personal Finance Center</h1>\n          </div>\n\n          <Tabs defaultValue=\"personal\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 lg:w-fit mb-6\">\n              <TabsTrigger value=\"personal\" className=\"flex items-center gap-2\" data-testid=\"tab-personal\">\n                <Home className=\"h-4 w-4\" />\n                Personal\n              </TabsTrigger>\n              <TabsTrigger value=\"business\" className=\"flex items-center gap-2\" data-testid=\"tab-business\">\n                <Building2 className=\"h-4 w-4\" />\n                Business\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"personal\" className=\"space-y-6 mt-8\">\n              {/* Full Width Visual Chart at Top */}\n              <FinancialOverviewChart \n                creditCards={creditCards} \n                loans={loans} \n                incomes={incomes} \n                assets={assets} \n                expenses={expenses} \n              />\n\n              {/* Net Worth Summary - Full Width */}\n              <NetWorthSummary />\n\n              {/* Financial Summary Cards */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n                <Card data-testid=\"card-total-debt\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Debt</CardTitle>\n                    <CreditCardIcon className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-debt\">\n                      {formatCurrency(totalDebt)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Credit cards and loans\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-monthly-payments\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Monthly Payments</CardTitle>\n                    <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-monthly-payments\">\n                      {formatCurrency(totalMonthlyPayments)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      All recurring payments\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-monthly-income\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Monthly Income</CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-monthly-income\">\n                      {formatCurrency(totalMonthlyIncome)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {incomes.length} income source{incomes.length !== 1 ? 's' : ''}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-available-cash\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Available Cash</CardTitle>\n                    <Wallet className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-available-cash\">\n                      {formatCurrency(availableCash)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Liquid assets\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-available-credit\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Available Credit</CardTitle>\n                    <CreditCardIcon className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-available-credit\">\n                      {formatCurrency(availableCredit)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {creditUtilization.toFixed(1)}% utilization\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Total Liquidity Card - Full Width */}\n              <Card data-testid=\"card-total-liquidity\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-lg font-medium\">Total Liquidity (Available Cash + Credit)</CardTitle>\n                  <Target className=\"h-5 w-5 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-purple-600\" data-testid=\"text-total-liquidity\">\n                    {formatCurrency(totalLiquidity)}\n                  </div>\n                  <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                    <span>Cash: {formatCurrency(availableCash)}</span>\n                    <span>•</span>\n                    <span>Credit: {formatCurrency(availableCredit)}</span>\n                    <span>•</span>\n                    <span>Total buying power available</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Full Width Sections */}\n              <div className=\"space-y-6\">\n                <IncomeOverview />\n                <ExpenseOverview />\n              </div>\n\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                <UpcomingPayments />\n                <UpcomingIncomes />\n              </div>\n\n              {/* Credit Management Section */}\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                {/* Credit Cards Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CreditCardIcon className=\"h-5 w-5\" />\n                      Credit Cards\n                    </CardTitle>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-credit-card\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Card\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Credit Card</DialogTitle>\n                        </DialogHeader>\n                        <CreditCardForm onClose={() => {}} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {creditCards.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <CreditCardIcon size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No credit cards added yet</p>\n                        <p className=\"text-sm\">Add your credit cards to track balances and payments</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {creditCards.map((card: any) => (\n                          <div key={card.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h3 className=\"font-medium\">{card.name}</h3>\n                                <Badge variant=\"outline\">\n                                  {calculateCreditUtilization(parseFloat(card.balance), parseFloat(card.creditLimit))}% Used\n                                </Badge>\n                              </div>\n                              <div className=\"text-sm text-muted-foreground space-y-1\">\n                                <div>Balance: <span className=\"font-medium text-red-600\">{formatCurrency(parseFloat(card.balance))}</span></div>\n                                <div>Limit: <span className=\"font-medium\">{formatCurrency(parseFloat(card.creditLimit))}</span></div>\n                                <div>Rate: {card.interestRate}% APR</div>\n                                <div>Due: {new Date(Date.now() + card.dueDate * 24 * 60 * 60 * 1000).toLocaleDateString()}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedAccount(card);\n                                  setSelectedAccountType('credit-card');\n                                  setPaymentDialogOpen(true);\n                                }}\n                                data-testid={`button-pay-${card.id}`}\n                              >\n                                Pay\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => deleteCreditCard.mutate(card.id)}\n                                data-testid={`button-delete-${card.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Loans Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building2 className=\"h-5 w-5\" />\n                      Loans\n                    </CardTitle>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-loan\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Loan\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Loan</DialogTitle>\n                        </DialogHeader>\n                        <LoanForm onClose={() => {}} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {loans.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <Building2 size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No loans added yet</p>\n                        <p className=\"text-sm\">Add your loans to track balances and payments</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {loans.map((loan: any) => (\n                          <div key={loan.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h3 className=\"font-medium\">{loan.name}</h3>\n                                <Badge variant=\"outline\">{loan.interestRate}% Rate</Badge>\n                              </div>\n                              <div className=\"text-sm text-muted-foreground space-y-1\">\n                                <div>Balance: <span className=\"font-medium text-red-600\">{formatCurrency(parseFloat(loan.balance))}</span></div>\n                                <div>Monthly Payment: <span className=\"font-medium\">{formatCurrency(parseFloat(loan.monthlyPayment))}</span></div>\n                                <div>Term: {loan.termMonths} months</div>\n                                <div>Due: {new Date(Date.now() + loan.dueDate * 24 * 60 * 60 * 1000).toLocaleDateString()}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedAccount(loan);\n                                  setSelectedAccountType('loan');\n                                  setPaymentDialogOpen(true);\n                                }}\n                                data-testid={`button-pay-loan-${loan.id}`}\n                              >\n                                Pay\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => deleteLoan.mutate(loan.id)}\n                                data-testid={`button-delete-loan-${loan.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Credit Summary Stats */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Credit Card Debt</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {formatCurrency(creditCards.reduce((sum, card) => sum + parseFloat(card.balance), 0))}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Credit Limit</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {formatCurrency(creditCards.reduce((sum, card) => sum + parseFloat(card.creditLimit), 0))}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Average Credit Utilization</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {creditCards.length > 0 \n                        ? Math.round(creditCards.reduce((sum, card) => \n                            sum + calculateCreditUtilization(parseFloat(card.balance), parseFloat(card.creditLimit)), 0\n                          ) / creditCards.length)\n                        : 0}%\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Loan Debt</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {formatCurrency(loans.reduce((sum, loan) => sum + parseFloat(loan.balance), 0))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"business\" className=\"space-y-6 mt-8\">\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                {/* Credit Cards Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CreditCardIcon className=\"h-5 w-5\" />\n                      Credit Cards\n                    </CardTitle>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-credit-card\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Card\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Credit Card</DialogTitle>\n                        </DialogHeader>\n                        <CreditCardForm onClose={() => {}} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {creditCards.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <CreditCardIcon size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No credit cards added yet</p>\n                        <p className=\"text-sm\">Add your credit cards to track balances and payments</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {creditCards.map((card: any) => (\n                          <div key={card.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h3 className=\"font-medium\">{card.name}</h3>\n                                <Badge variant=\"outline\">{card.interestRate}% APR</Badge>\n                              </div>\n                              <div className=\"text-sm text-muted-foreground space-y-1\">\n                                <div>Balance: <span className=\"font-medium text-red-600\">{formatCurrency(parseFloat(card.balance))}</span></div>\n                                <div>Credit Limit: <span className=\"font-medium\">{formatCurrency(parseFloat(card.creditLimit))}</span></div>\n                                <div>Min Payment: <span className=\"font-medium\">{formatCurrency(parseFloat(card.minimumPayment))}</span></div>\n                                <div>Due: {new Date(Date.now() + card.dueDate * 24 * 60 * 60 * 1000).toLocaleDateString()}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedAccount(card);\n                                  setSelectedAccountType('credit-card');\n                                  setPaymentDialogOpen(true);\n                                }}\n                                data-testid={`button-pay-${card.id}`}\n                              >\n                                Pay\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => deleteCreditCard.mutate(card.id)}\n                                data-testid={`button-delete-${card.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Loans Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building2 className=\"h-5 w-5\" />\n                      Loans\n                    </CardTitle>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-loan\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Loan\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Loan</DialogTitle>\n                        </DialogHeader>\n                        <LoanForm onClose={() => {}} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {loans.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <Building2 size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No loans added yet</p>\n                        <p className=\"text-sm\">Add your loans to track balances and payments</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {loans.map((loan: any) => (\n                          <div key={loan.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h3 className=\"font-medium\">{loan.name}</h3>\n                                <Badge variant=\"outline\">{loan.interestRate}% Rate</Badge>\n                              </div>\n                              <div className=\"text-sm text-muted-foreground space-y-1\">\n                                <div>Balance: <span className=\"font-medium text-red-600\">{formatCurrency(parseFloat(loan.balance))}</span></div>\n                                <div>Monthly Payment: <span className=\"font-medium\">{formatCurrency(parseFloat(loan.monthlyPayment))}</span></div>\n                                <div>Term: {loan.termMonths} months</div>\n                                <div>Due: {new Date(Date.now() + loan.dueDate * 24 * 60 * 60 * 1000).toLocaleDateString()}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedAccount(loan);\n                                  setSelectedAccountType('loan');\n                                  setPaymentDialogOpen(true);\n                                }}\n                                data-testid={`button-pay-loan-${loan.id}`}\n                              >\n                                Pay\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => deleteLoan.mutate(loan.id)}\n                                data-testid={`button-delete-loan-${loan.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Summary Stats */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Credit Card Debt</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {formatCurrency(creditCards.reduce((sum, card) => sum + parseFloat(card.balance), 0))}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Loan Debt</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {formatCurrency(loans.reduce((sum, loan) => sum + parseFloat(loan.balance), 0))}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Available Credit</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {formatCurrency(availableCredit)}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Credit Utilization</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {creditUtilization.toFixed(1)}%\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"business\" className=\"space-y-6 mt-8\">\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                {/* Business Revenue Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"h-5 w-5\" />\n                      Business Revenue\n                    </CardTitle>\n                    <Dialog open={revenueDialogOpen} onOpenChange={setRevenueDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-revenue\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Revenue\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Business Revenue</DialogTitle>\n                        </DialogHeader>\n                        <BusinessRevenueForm onClose={() => setRevenueDialogOpen(false)} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-neutral-500\">\n                      <DollarSign size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                      <p className=\"mb-4\">Track your business revenue</p>\n                      <p className=\"text-sm\">Add one-time payments and recurring subscriptions</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Business Expenses Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Receipt className=\"h-5 w-5\" />\n                      Business Expenses\n                    </CardTitle>\n                    <Dialog open={expenseDialogOpen} onOpenChange={setExpenseDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-expense\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Expense\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Business Expense</DialogTitle>\n                        </DialogHeader>\n                        <BusinessExpenseForm onClose={() => setExpenseDialogOpen(false)} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-neutral-500\">\n                      <Receipt size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                      <p className=\"mb-4\">Track your business expenses</p>\n                      <p className=\"text-sm\">Manage vendor payments and business costs</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Business Profiles and Purchase Orders Section */}\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                {/* Business Profiles Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building className=\"h-5 w-5\" />\n                      Business Profiles\n                    </CardTitle>\n                    <Dialog open={businessProfileDialogOpen} onOpenChange={setBusinessProfileDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\" data-testid=\"button-add-business-profile\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Profile\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl\">\n                        <DialogHeader>\n                          <DialogTitle>Create Business Profile</DialogTitle>\n                        </DialogHeader>\n                        <BusinessProfileForm onClose={() => setBusinessProfileDialogOpen(false)} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {businessProfiles.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <Building size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No business profiles yet</p>\n                        <p className=\"text-sm\">Create a business profile for purchase orders</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {businessProfiles.map((profile: any) => (\n                          <div key={profile.id} className=\"p-4 border rounded-lg\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-semibold\">{profile.businessName}</h3>\n                              <Badge variant=\"outline\">Active</Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground space-y-1\">\n                              <div>{profile.address}</div>\n                              <div>{profile.city}, {profile.state} {profile.zipCode}</div>\n                              {profile.phone && <div>Phone: {profile.phone}</div>}\n                              {profile.email && <div>Email: {profile.email}</div>}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Purchase Orders Section */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Purchase Orders\n                    </CardTitle>\n                    <Dialog open={purchaseOrderDialogOpen} onOpenChange={setPurchaseOrderDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          data-testid=\"button-create-purchase-order\"\n                          disabled={businessProfiles.length === 0}\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create PO\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-5xl\">\n                        <DialogHeader>\n                          <DialogTitle>Create Purchase Order</DialogTitle>\n                        </DialogHeader>\n                        <PurchaseOrderForm onClose={() => setPurchaseOrderDialogOpen(false)} />\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    {businessProfiles.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <FileText size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">Create a business profile first</p>\n                        <p className=\"text-sm\">Business profiles are required for purchase orders</p>\n                      </div>\n                    ) : purchaseOrders.length === 0 ? (\n                      <div className=\"text-center py-8 text-neutral-500\">\n                        <FileText size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                        <p className=\"mb-4\">No purchase orders yet</p>\n                        <p className=\"text-sm\">Create purchase orders for vendor transactions</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {purchaseOrders.map((order: any) => (\n                          <div key={order.id} className=\"p-4 border rounded-lg\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-semibold\">PO #{order.poNumber}</h3>\n                              <Badge variant=\"outline\">{order.status || 'Draft'}</Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground space-y-1\">\n                              <div>Vendor: {order.vendorName}</div>\n                              <div>Total: {formatCurrency(parseFloat(order.totalDue || '0'))}</div>\n                              <div>Created: {new Date(order.createdAt).toLocaleDateString()}</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Business Cost vs Revenue Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Business Cost vs Revenue Analysis\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 w-full\">\n                    {businessRevenue.length === 0 && businessExpenses.length === 0 ? (\n                      <div className=\"flex items-center justify-center h-full text-neutral-500\">\n                        <div className=\"text-center\">\n                          <BarChart3 size={48} className=\"mx-auto mb-4 text-neutral-300\" />\n                          <p className=\"mb-2\">No business data yet</p>\n                          <p className=\"text-sm\">Add revenue and expenses to see cost analysis</p>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                            <h3 className=\"text-sm font-medium text-green-800\">Total Revenue</h3>\n                            <p className=\"text-2xl font-bold text-green-600\">\n                              {formatCurrency(businessRevenue.reduce((sum: number, item: any) => sum + parseFloat(item.amount || '0'), 0))}\n                            </p>\n                          </div>\n                          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                            <h3 className=\"text-sm font-medium text-red-800\">Total Expenses</h3>\n                            <p className=\"text-2xl font-bold text-red-600\">\n                              {formatCurrency(businessExpenses.reduce((sum: number, item: any) => sum + parseFloat(item.amount || '0'), 0))}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                          <h3 className=\"text-sm font-medium text-blue-800\">Net Profit</h3>\n                          <p className=\"text-2xl font-bold text-blue-600\">\n                            {formatCurrency(\n                              businessRevenue.reduce((sum: number, item: any) => sum + parseFloat(item.amount || '0'), 0) -\n                              businessExpenses.reduce((sum: number, item: any) => sum + parseFloat(item.amount || '0'), 0)\n                            )}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Business Summary Stats */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      $0.00\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      $0.00\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Net Profit</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      $0.00\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Monthly Recurring Revenue</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      $0.00\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          <PaymentDialog \n            open={paymentDialogOpen}\n            onOpenChange={setPaymentDialogOpen}\n            account={selectedAccount}\n            accountType={selectedAccountType}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":115075},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Home,\n  CreditCard as CreditCardIcon,\n  Building2,\n  DollarSign,\n  Menu,\n  TrendingUp,\n  Target,\n  PieChart,\n  BarChart3,\n  Receipt\n} from \"lucide-react\";\nimport { DebtChart } from \"@/components/debt-chart\";\nimport { AccountForm } from \"@/components/account-form\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { UpcomingPayments } from \"@/components/upcoming-payments\";\nimport { IncomeOverview } from \"@/components/income-overview\";\nimport { PaymentDialog } from \"@/components/payment-dialog\";\nimport { ExpenseForm } from \"@/components/expense-form\";\nimport { ExpenseOverview } from \"@/components/expense-overview\";\nimport { NetWorthSummary } from \"@/components/net-worth-summary\";\nimport { SavingsGoals } from \"@/components/savings-goals\";\nimport { BudgetTracker } from \"@/components/budget-tracker\";\nimport { InvestmentTracker } from \"@/components/investment-tracker\";\nimport { CreditCard, Loan, MonthlyPayment, Income } from \"@shared/schema\";\nimport { \n  formatCurrency, \n  calculateCreditUtilization, \n  formatDate, \n  getNextDueDate, \n  getDaysUntilDue \n} from \"@/lib/financial-calculations\";\nimport { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\nexport default function Dashboard() {\n  const isMobile = useIsMobile();\n  const [extraPayment, setExtraPayment] = useState(\"100\");\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<any>(null);\n  const [selectedAccountType, setSelectedAccountType] = useState<string>(\"\");\n\n  const { data: creditCards = [], isLoading: creditCardsLoading } = useQuery<CreditCard[]>({\n    queryKey: [\"/api/credit-cards\"],\n  });\n\n  const { data: loans = [], isLoading: loansLoading } = useQuery<Loan[]>({\n    queryKey: [\"/api/loans\"],\n  });\n\n  const { data: monthlyPayments = [], isLoading: monthlyPaymentsLoading } = useQuery<MonthlyPayment[]>({\n    queryKey: [\"/api/monthly-payments\"],\n  });\n\n  const { data: incomes = [], isLoading: incomesLoading } = useQuery<Income[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const isLoading = creditCardsLoading || loansLoading || monthlyPaymentsLoading || incomesLoading;\n\n  // Calculate overview metrics\n  const totalDebt = [...creditCards, ...loans].reduce(\n    (sum, account) => sum + parseFloat(account.balance),\n    0\n  );\n\n  const totalMonthlyPayments = [\n    ...creditCards.map((card: CreditCard) => parseFloat(card.minimumPayment)),\n    ...loans.map((loan: Loan) => parseFloat(loan.monthlyPayment))\n  ].reduce((sum, payment) => sum + payment, 0);\n\n  const creditUtilization = calculateCreditUtilization(creditCards);\n\n  // Calculate debt-free date (simplified)\n  const averagePayment = totalMonthlyPayments + parseFloat(extraPayment || \"0\");\n  const estimatedMonths = totalDebt > 0 && averagePayment > 0 \n    ? Math.ceil(totalDebt / averagePayment) \n    : 0;\n  \n  const debtFreeDate = new Date();\n  debtFreeDate.setMonth(debtFreeDate.getMonth() + estimatedMonths);\n\n  // Calculate monthly income\n  const calculateMonthlyIncome = (incomes: Income[]) => {\n    return incomes.reduce((total, income) => {\n      const amount = parseFloat(income.amount);\n      switch (income.frequency) {\n        case \"weekly\": return total + (amount * 4.33);\n        case \"biweekly\": return total + (amount * 2.17);\n        case \"monthly\": return total + amount;\n        case \"yearly\": return total + (amount / 12);\n        default: return total + amount;\n      }\n    }, 0);\n  };\n\n  const monthlyIncome = calculateMonthlyIncome(incomes);\n  const netCashFlow = monthlyIncome - totalMonthlyPayments;\n\n  // Get all debt accounts for display\n  const allAccounts = [...creditCards, ...loans];\n\n  // Handle account editing and payments\n  const handleEditAccount = (account: any, type: string) => {\n    // This would open the edit form - implementation depends on your form setup\n    console.log(\"Edit account:\", account, type);\n  };\n\n  const handlePayAccount = (account: any, type: string) => {\n    setSelectedAccount(account);\n    setSelectedAccountType(type);\n    setPaymentDialogOpen(true);\n  };\n\n  // Generate payment schedule for next 4 months\n  const paymentSchedule = Array.from({ length: 4 }, (_, i) => {\n    const date = new Date();\n    date.setMonth(date.getMonth() + i);\n    \n    return {\n      month: formatDate(date),\n      total: totalMonthlyPayments,\n      accounts: [\n        ...creditCards.map((card: CreditCard) => ({\n          name: card.name,\n          payment: parseFloat(card.minimumPayment),\n        })),\n        ...loans.map((loan: Loan) => ({\n          name: loan.name,\n          payment: parseFloat(loan.monthlyPayment),\n        })),\n      ],\n    };\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <Sidebar />\n        <main className=\"flex-1\">\n          <div className=\"p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-neutral-200 rounded w-48\"></div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div key={i} className=\"h-32 bg-neutral-200 rounded-xl\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-neutral-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white border-b border-neutral-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {isMobile && (\n                <Sheet>\n                  <SheetTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-mobile-menu\">\n                      <Menu size={20} />\n                    </Button>\n                  </SheetTrigger>\n                  <SheetContent side=\"left\" className=\"w-64 p-0\">\n                    <Sidebar />\n                  </SheetContent>\n                </Sheet>\n              )}\n              <h2 className=\"text-2xl font-semibold text-neutral-900\" data-testid=\"heading-dashboard\">\n                Dashboard\n              </h2>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <AccountForm />\n              <div className=\"w-8 h-8 bg-neutral-300 rounded-full\" data-testid=\"avatar-user\"></div>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6 overflow-y-auto h-full\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card data-testid=\"card-total-debt\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-500\">Total Debt</span>\n                  <AlertTriangle className=\"text-accent\" size={20} />\n                </div>\n                <div className=\"text-2xl font-bold text-neutral-900\" data-testid=\"text-total-debt\">\n                  {formatCurrency(totalDebt)}\n                </div>\n                <div className=\"text-sm text-neutral-500 mt-1\">\n                  Across {creditCards.length + loans.length} accounts\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-monthly-payments\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-500\">Monthly Payments</span>\n                  <Calendar className=\"text-primary\" size={20} />\n                </div>\n                <div className=\"text-2xl font-bold text-neutral-900\" data-testid=\"text-monthly-payments\">\n                  {formatCurrency(totalMonthlyPayments)}\n                </div>\n                <div className=\"text-sm text-secondary mt-1\">\n                  Minimum monthly obligations\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-income-vs-debt\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-500\">Monthly Cash Flow</span>\n                  <TrendingUp className=\"text-secondary\" size={20} />\n                </div>\n                <div className=\"text-2xl font-bold text-neutral-900\" data-testid=\"text-cash-flow\">\n                  {formatCurrency(netCashFlow)}\n                </div>\n                <div className=\"text-sm mt-1\">\n                  <span className=\"text-secondary\">\n                    Income: {formatCurrency(monthlyIncome)}\n                  </span>\n                  <span className=\"text-neutral-400 mx-2\">|</span>\n                  <span className=\"text-accent\">\n                    Debt: {formatCurrency(totalMonthlyPayments)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-credit-utilization\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-500\">Credit Utilization</span>\n                  <Percent className=\"text-secondary\" size={20} />\n                </div>\n                <div className=\"text-2xl font-bold text-neutral-900\" data-testid=\"text-credit-utilization\">\n                  {creditUtilization.toFixed(0)}%\n                </div>\n                <div className={`text-sm mt-1 ${creditUtilization > 70 ? 'text-accent' : creditUtilization > 30 ? 'text-orange-500' : 'text-secondary'}`}>\n                  {creditUtilization > 70 ? 'High utilization' : creditUtilization > 30 ? 'Moderate utilization' : 'Good utilization'}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-payoff-date\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-500\">Debt-Free Date</span>\n                  <Target className=\"text-secondary\" size={20} />\n                </div>\n                <div className=\"text-2xl font-bold text-neutral-900\" data-testid=\"text-payoff-date\">\n                  {estimatedMonths > 0 ? formatDate(debtFreeDate) : 'N/A'}\n                </div>\n                <div className=\"text-sm text-neutral-500 mt-1\">\n                  {estimatedMonths > 0 ? `${estimatedMonths} months left` : 'No debt'}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Debt Visualization */}\n            <div className=\"lg:col-span-2\">\n              <Card data-testid=\"card-debt-chart\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Debt Distribution</CardTitle>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"default\" size=\"sm\" data-testid=\"button-chart-view\">\n                        Chart\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-table-view\">\n                        Table\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <DebtChart creditCards={creditCards} loans={loans} />\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"space-y-6\">\n              {/* Payment Calculator */}\n              <Card data-testid=\"card-payment-calculator\">\n                <CardHeader>\n                  <CardTitle>Payment Calculator</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"extra-payment\">Extra Payment</Label>\n                    <Input\n                      id=\"extra-payment\"\n                      type=\"number\"\n                      value={extraPayment}\n                      onChange={(e) => setExtraPayment(e.target.value)}\n                      placeholder=\"100.00\"\n                      data-testid=\"input-extra-payment\"\n                    />\n                  </div>\n                  <div className=\"text-sm text-neutral-600\">\n                    <div className=\"flex justify-between py-1\">\n                      <span>Time Saved:</span>\n                      <span className=\"font-medium\" data-testid=\"text-time-saved\">\n                        {Math.max(0, estimatedMonths - Math.ceil(totalDebt / (totalMonthlyPayments + parseFloat(extraPayment || \"0\"))))} months\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between py-1\">\n                      <span>Interest Saved:</span>\n                      <span className=\"font-medium text-secondary\" data-testid=\"text-interest-saved\">\n                        {formatCurrency(Math.max(0, totalDebt * 0.05))} {/* Simplified calculation */}\n                      </span>\n                    </div>\n                  </div>\n                  <Button className=\"w-full bg-secondary text-white hover:bg-green-700\" data-testid=\"button-apply-extra-payment\">\n                    Apply Extra Payment\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Enhanced Dashboard Sections */}\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Income Overview */}\n            <IncomeOverview onAddIncome={() => {/* Handle adding income */}} />\n            \n            {/* Upcoming Payments with Filtering */}\n            <UpcomingPayments \n              onEdit={handleEditAccount}\n              onPay={handlePayAccount}\n            />\n          </div>\n\n          {/* Expense Tracking Section */}\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Expense Overview */}\n            <div className=\"lg:col-span-2\">\n              <ExpenseOverview />\n            </div>\n            \n            {/* Quick Add Expense */}\n            <div className=\"flex items-start\">\n              <ExpenseForm />\n            </div>\n          </div>\n\n          {/* Accounts List */}\n          <div className=\"mt-8\">\n            <Card data-testid=\"card-accounts-list\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Your Accounts</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter\">\n                      Filter\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-sort\">\n                      Sort\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {allAccounts.length === 0 ? (\n                  <div className=\"p-8 text-center text-neutral-500\" data-testid=\"empty-state-accounts\">\n                    <div className=\"w-16 h-16 mx-auto mb-4 bg-neutral-100 rounded-full flex items-center justify-center\">\n                      <CreditCardIcon size={32} className=\"text-neutral-400\" />\n                    </div>\n                    <p className=\"text-lg font-medium mb-2\">No accounts yet</p>\n                    <p className=\"text-sm mb-4\">Add your first credit card or loan to get started</p>\n                    <AccountForm />\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <div className=\"min-w-full\">\n                      <div className=\"bg-neutral-50 px-6 py-3 border-b border-neutral-200\">\n                        <div className=\"grid grid-cols-6 gap-4 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                          <div>Account</div>\n                          <div>Balance</div>\n                          <div>Monthly Payment</div>\n                          <div>Due Date</div>\n                          <div>Payoff</div>\n                          <div>Actions</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"divide-y divide-neutral-200\">\n                        {creditCards.map((card: CreditCard) => (\n                          <div key={card.id} className=\"px-6 py-4 hover:bg-neutral-50\" data-testid={`row-creditcard-${card.id}`}>\n                            <div className=\"grid grid-cols-6 gap-4 items-center\">\n                              <div className=\"flex items-center\">\n                                <div className=\"flex-shrink-0 h-10 w-10\">\n                                  <div className=\"h-10 w-10 rounded-lg bg-blue-100 flex items-center justify-center\">\n                                    <CreditCardIcon className=\"text-blue-600\" size={20} />\n                                  </div>\n                                </div>\n                                <div className=\"ml-4\">\n                                  <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-name-${card.id}`}>\n                                    {card.name}\n                                  </div>\n                                  <div className=\"text-sm text-neutral-500\">Credit Card</div>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-balance-${card.id}`}>\n                                  {formatCurrency(card.balance)}\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">\n                                  {formatCurrency(card.creditLimit)} limit\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-payment-${card.id}`}>\n                                  {formatCurrency(card.minimumPayment)}\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">Minimum</div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\">\n                                  {getNextDueDate(card.dueDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                                </div>\n                                <div className={`text-sm ${getDaysUntilDue(card.dueDate) <= 3 ? 'text-accent' : 'text-neutral-500'}`}>\n                                  {getDaysUntilDue(card.dueDate) <= 0 ? 'Overdue' : `Due in ${getDaysUntilDue(card.dueDate)} days`}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\">\n                                  {/* Simplified payoff calculation */}\n                                  {Math.ceil(parseFloat(card.balance) / parseFloat(card.minimumPayment))} months\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">Estimated</div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${card.id}`}>\n                                  Edit\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-secondary\" data-testid={`button-pay-${card.id}`}>\n                                  Pay\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                        \n                        {loans.map((loan: Loan) => (\n                          <div key={loan.id} className=\"px-6 py-4 hover:bg-neutral-50\" data-testid={`row-loan-${loan.id}`}>\n                            <div className=\"grid grid-cols-6 gap-4 items-center\">\n                              <div className=\"flex items-center\">\n                                <div className=\"flex-shrink-0 h-10 w-10\">\n                                  <div className=\"h-10 w-10 rounded-lg bg-green-100 flex items-center justify-center\">\n                                    <Building2 className=\"text-green-600\" size={20} />\n                                  </div>\n                                </div>\n                                <div className=\"ml-4\">\n                                  <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-name-${loan.id}`}>\n                                    {loan.name}\n                                  </div>\n                                  <div className=\"text-sm text-neutral-500 capitalize\">{loan.loanType} Loan</div>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-balance-${loan.id}`}>\n                                  {formatCurrency(loan.balance)}\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">\n                                  {parseFloat(loan.interestRate)}% APR\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\" data-testid={`text-payment-${loan.id}`}>\n                                  {formatCurrency(loan.monthlyPayment)}\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">Fixed</div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\">\n                                  {getNextDueDate(loan.dueDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                                </div>\n                                <div className={`text-sm ${getDaysUntilDue(loan.dueDate) <= 3 ? 'text-accent' : 'text-neutral-500'}`}>\n                                  {getDaysUntilDue(loan.dueDate) <= 0 ? 'Overdue' : `Due in ${getDaysUntilDue(loan.dueDate)} days`}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-sm font-medium text-neutral-900\">\n                                  {loan.termMonths} months\n                                </div>\n                                <div className=\"text-sm text-neutral-500\">Term</div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${loan.id}`}>\n                                  Edit\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-secondary\" data-testid={`button-pay-${loan.id}`}>\n                                  Pay\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Schedule */}\n          {allAccounts.length > 0 && (\n            <div className=\"mt-8\">\n              <Card data-testid=\"card-payment-schedule\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Upcoming Payment Schedule</CardTitle>\n                    <Button variant=\"ghost\" data-testid=\"button-view-all-schedule\">\n                      View All\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {paymentSchedule.map((month, index) => (\n                      <div key={index} className=\"border border-neutral-200 rounded-lg p-4\" data-testid={`schedule-month-${index}`}>\n                        <div className=\"text-sm font-medium text-neutral-500 mb-2\" data-testid={`text-month-${index}`}>\n                          {month.month}\n                        </div>\n                        <div className=\"text-xl font-bold text-neutral-900 mb-3\" data-testid={`text-total-${index}`}>\n                          {formatCurrency(month.total)}\n                        </div>\n                        <div className=\"space-y-2\">\n                          {month.accounts.slice(0, 3).map((account, accountIndex) => (\n                            <div key={accountIndex} className=\"flex justify-between text-sm\">\n                              <span className=\"text-neutral-600 truncate mr-2\">{account.name}</span>\n                              <span className=\"font-medium\">{formatCurrency(account.payment)}</span>\n                            </div>\n                          ))}\n                          {month.accounts.length > 3 && (\n                            <div className=\"text-sm text-neutral-500\">\n                              +{month.accounts.length - 3} more\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Payment Dialog */}\n      <PaymentDialog\n        open={paymentDialogOpen}\n        onOpenChange={setPaymentDialogOpen}\n        account={selectedAccount}\n        accountType={selectedAccountType}\n      />\n    </div>\n  );\n}\n","size_bytes":27118},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}